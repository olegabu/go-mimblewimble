export memory memory(initial: 2, max: 0);

global g_a:int = 65536;

table T_a:funcref(min: 13, max: 13);

data d_DG30FKE7I6J841A9C2B5HLSucces(offset: 65536) = 
  "\10$\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\19\12D;\02?,G\14=30\0a"
  "\1b\06FKE7\0fI\0e\17\03@\1d<+6\1fJ-\1c\01 %)!\08\0c\15\16".\108>\0b41\18"
  "/A\099\11#C2B:\05\04&('\0d*\1e5\07\1aH\13$L\ff\00\00Success\00Illegal "
  "byte sequence\00Domain error\00Result not representable\00Not a tty\00"
  "Permission denied\00Operation not permitted\00No such file or director"
  "y\00No such process\00File exists\00Value too large for data type\00No"
  " space left on device\00Out of memory\00Resource busy\00Interrupted sy"
  "stem call\00Resource temporarily unavailable\00Invalid seek\00Cross-de"
  "vice link\00Read-only file system\00Directory not empty\00Connection r"
  "eset by peer\00Operation timed out\00Connection refused\00Host is unre"
  "achable\00Address in use\00Broken pipe\00I/O error\00No such device or"
  " address\00No such device\00Not a directory\00Is a directory\00Text fi"
  "le busy\00Exec format error\00Invalid argument\00Argument list too lon"
  "g\00Symbolic link loop\00Filename too long\00Too many open files in sy"
  "stem\00No file descriptors available\00Bad file descriptor\00No child "
  "process\00Bad address\00File too large\00Too many links\00No locks ava"
  "ilable\00Resource deadlock would occur\00State not recoverable\00Previ"
  "ous owner died\00Operation canceled\00Function not implemented\00No me"
  "ssage of desired type\00Identifier removed\00Link has been severed\00P"
  "rotocol error\00Bad message\00Not a socket\00Destination address requi"
  "red\00Message too large\00Protocol wrong type for socket\00Protocol no"
  "t available\00Protocol not supported\00Not supported\00Address family "
  "not supported by protocol\00Address not available\00Network is down\00"
  "Network unreachable\00Connection reset by network\00Connection aborted"
  "\00No buffer space available\00Socket is connected\00Socket not connec"
  "ted\00Operation already in progress\00Operation in progress\00Stale fi"
  "le handle\00Quota exceeded\00Multihop attempted\00Capabilities insuffi"
  "cient\00No error information\00\00-+   0X0x\00(null)\00\00\00\00\00\00"
  "\00\00\00\00\19\00\0a\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\09\00"
  "\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\0a\19\19\19\03\0a\07\00\01"
  "\1b\09\0b\18\00\00\09\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00"
  "\0a\0d\19\19\19\00\0d\00\00\02\00\09\0e\00\00\00\09\00\0e\00\00\0e\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c"
  "\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\09\0c\00"
  "\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00"
  "\00\04\0f\00\00\00\00\09\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00"
  "\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\09\12\00\00\00\00\00"
  "\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00"
  "\00\00\00\09\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00"
  "\00\00\00\17\00\00\00\00\17\00\00\00\00\09\14\00\00\00\00\00\14\00\00\14"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\09"
  "\16\00\00\00\00\00\16\00\00\16\00\00Support for formatting long double"
  " values is currently disabled.\0aTo enable it, add -lc-printscan-long-"
  "double to the link command.\0a\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "0123456789ABCDEF-0X+0X 0X-0x+0x 0x\00inf\00INF\00nan\00NAN\00.\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\04\00\00\00\00\00\00\00\05\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\04\00\00\00\00\00\00\00Invalid flags\00\00\00\05\00\00\00\00\00\00"
  "\00self test failed\00prealloc != NULL\00ctx != secp256k1_context_no_p"
  "recomp\00P\92\9bt\c1\a0IT\b7\8bK`5\e9z^\07\8aZ\0f(\ec\96\d5G\bf\ee\9a\ce"
  "\80:\c01\d3\c6\869s\92n\04\9ec|\b1\b5\f4\0a6\da\c2\8a\f1vih\c3\0c#\13\f3"
  "\a3\89\04\00\00\98\17\f8\02\c5V\a0\00\9f\95\8d\028\b7l\03\fc\9b\02\03\c1"
  "\c2\a1\03\)\06\02V\b1\ee\02\dc\f9~\02\99o\1e\00\b8\d4\10\03\fe#\f4\01\c4"
  "\99A\01\15\9a"\01\b4\17\fd\00*B\84\03\c0\bfO\02v\95\11\03\a3&w\02\b6\0e"
  "\12\00\00\00\00\00For this sample, this 63-byte string will be used as"
  " input data\00\00\00\00\00\00\00\00\00\00\00\00\00\f0\8ax\cb\ba\ee\08+"
  "\05*\e0p\8f2\fa\1eP\c5\c4!\aaw+\a5\db\b4\06\a2\eak\e3BThe scalar for t"
  "his x is unknown\00Out of memory\00[libsecp256k1] illegal argument: %s"
  "\0a\00[libsecp256k1] internal consistency check failed: %s\0a\00\00\00"
  "\00\00\00\00\80\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\f0\f0\f0\f0"
  "\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0"
  "\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0"
  "\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0"
  "\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0"
  "\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0\f0"
  "\f0\f0\f0\f0\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1"
  "\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1"
  "\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\02\02"
  "\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02"
  "\02\02\02\02\13\03\03\03\03\03\03\03\03\03\03\03\03#\03\034\04\04\04D\f1"
  "\f1\f1\f1\f1\f1\f1\f1\f1\f1\f1\80\bf\a0\bf\80\9f\90\bf\80\8f\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\e6\0d\01\00!\00"
  "\00\00Field<unimplemented>\00\00\00\00x\0d\01\00\1b\00\00\00unimplemen"
  "ted: size of typeNumField\00\00\00\00\00\a8\0d\01\00 \00\00\00unimplem"
  "ented: alignment of typereflect: call of reflect.Type.reflect: field i"
  "ndex out of rangeT\10\0e\01\00$\00\00\00unimplemented: (reflect.Type)."
  "Elem()reflect: call of reflect.Value. on invalid typeLenBool\00\00\00\00"
  "\00\00x\0e\01\00&\00\00\00unimplemented: (reflect.Value).Bytes()Comple"
  "xElemFloat\00\00\e7\0e\01\00!\00\00\00\c5\0e\01\00"\00\00\00Indexrefle"
  "ct: string index out of rangereflect: slice index out of rangeInt\00\00"
  "\00\00\00\18\0f\01\00%\00\00\00(reflect.Value).Interface: unexportedIs"
  "Nil\00\00\00\00\00\00P\0f\01\00)\00\00\00unimplemented: (reflect.Value"
  ").MapRange()\00\00\00\00\00\00\00\8f\0f\01\00(\00\00\00Pointerunimplem"
  "ented: (reflect.Value).Pointer()\00\c0\0f\01\00&\00\00\00unimplemented"
  ": (reflect.Value).Slice()<T>Uint\00\00\00\f8\0f\01\00\1e\00\00\00sync:"
  " unlock of unlocked Mutex\00\01\02\02\03\03\03\03\04\04\04\04\04\04\04"
  "\04\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\06\06\06\06\06\06\06"
  "\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06"
  "\06\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\08\08\08\08\08\08\08"
  "\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08"
  "\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08"
  "\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08"
  "\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08"
  "\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08"
  "\08out of memorypanic: runtime error: index out of rangenil pointer de"
  "reference\00\00\00\00\00\00w\11\01\00\0b\00\00\00panic: unreachablesli"
  "ce out of rangeValue.Getsyscall/js: call of  on undefinednullbooleannu"
  "mberstringsymbolobjectfunction<null><symbol><object><function><undefin"
  "ed><boolean: <number: >0\12\01\00\08\00\00\00bad type@\12\01\00\16\00\00"
  "\00ValueOf: invalid valueValue.SetValue.SetIndexValue.IntValue.Indexme"
  "ssageJavaScript error: syscall/js: Value.Call: property  is not a func"
  "tion, got Value.Call\00\00\00\e8\12\01\00\0d\00\00\00bad type flag_pen"
  "dingEventid\00\00\00\00F\13\01\00\1f\00\00\00thisargsconsole\00-\13\01"
  "\00\19\00\00\00errorcall to released functionblocking select matched n"
  "o caseObjectArrayprocessfsconstantsUint8ArrayO_WRONLYO_RDWRO_CREATO_TR"
  "UNCO_APPENDO_EXCL/dev/stdout : writeoperation not supported52512562531"
  "2515625781253906251953125976562548828125244140625122070312561035156253"
  "0517578125152587890625762939453125381469726562519073486328125953674316"
  "4062547683715820312523841857910156251192092895507812559604644775390625"
  "2980232238769531251490116119384765625745058059692382812537252902984619"
  "1406251862645149230957031259313225746154785156254656612873077392578125"
  "2328306436538696289062511641532182693481445312558207660913467407226562"
  "5291038304567337036132812514551915228366851806640625727595761418342590"
  "3320312536379788070917129516601562518189894035458564758300781259094947"
  "0177292823791503906254547473508864641189575195312522737367544323205947"
  "8759765625113686837721616029739379882812556843418860808014869689941406"
  "2528421709430404007434844970703125142108547152020037174224853515625710"
  "5427357601001858711242675781253552713678800500929355621337890625177635"
  "6839400250464677810668945312588817841970012523233890533447265625444089"
  "2098500626161694526672363281252220446049250313080847263336181640625111"
  "0223024625156540423631668090820312555511151231257827021181583404541015"
  "6252775557561562891351059079170227050781251387778780781445675529539585"
  "1135253906256938893903907228377647697925567626953125346944695195361418"
  "8823848962783813476562517347234759768070944119244813919067382812586736"
  "1737988403547205962240695953369140625\00\00\00\00\88\02\1c\08\a0\d5\8f"
  "\fa<\fb\ff\ff\00\00\00\00v\bf>\a2\7f\e1\ae\baW\fb\ff\ff\00\00\00\00v\ac"
  "U0 \fb\16\8br\fb\ff\ff\00\00\00\00\ea5\ce]J\89B\cf\8c\fb\ff\ff\00\00\00"
  "\00-;eU\aa\b0k\9a\a7\fb\ff\ff\00\00\00\00\dfE\1a=\03\cf\1a\e6\c1\fb\ff"
  "\ff\00\00\00\00\ca\c6\9a\c7\17\fep\ab\dc\fb\ff\ff\00\00\00\00O\dc\bc\be"
  "\fc\b1w\ff\f6\fb\ff\ff\00\00\00\00\0c\d6kA\ef\91V\be\11\fc\ff\ff\00\00"
  "\00\00<\fc\7f\90\ad\1f\d0\8d,\fc\ff\ff\00\00\00\00\83\9aU1(\Q\d3F\fc\ff"
  "\ff\00\00\00\00\b5\c9\a6\ad\8f\acq\9da\fc\ff\ff\00\00\00\00\cb\8b\ee#w"
  ""\9c\ea{\fc\ff\ff\00\00\00\00mSx@\91I\cc\ae\96\fc\ff\ff\00\00\00\00W\ce"
  "\b6]y\12<\82\b1\fc\ff\ff\00\00\00\007V\fbM6\94\10\c2\cb\fc\ff\ff\00\00"
  "\00\00O\98H8o\ea\96\90\e6\fc\ff\ff\00\00\00\00\c7:\82%\cb\85t\d7\00\fd"
  "\ff\ff\00\00\00\00\f4\97\bf\97\cd\cf\86\a0\1b\fd\ff\ff\00\00\00\00\e5\ac"
  "*\17\98\0a4\ef5\fd\ff\ff\00\00\00\00\8e\b25*\fbg8\b2P\fd\ff\ff\00\00\00"
  "\00;?\c6\d2\df\d4\c8\84k\fd\ff\ff\00\00\00\00\ba\cd\d3\1a'D\dd\c5\85\fd"
  "\ff\ff\00\00\00\00\96\c9%\bb\ce\9fk\93\a0\fd\ff\ff\00\00\00\00\84\a5b}"
  "$l\ac\db\ba\fd\ff\ff\00\00\00\00\f6\da_\0dXf\ab\a3\d5\fd\ff\ff\00\00\00"
  "\00&\f1\c3\de\93\f8\e2\f3\ef\fd\ff\ff\00\00\00\00\b8\80\ff\aa\a8\ad\b5"
  "\b5\0a\fe\ff\ff\00\00\00\00\8bJ|l\05_b\87%\fe\ff\ff\00\00\00\00S0\c14`"
  "\ff\bc\c9?\fe\ff\ff\00\00\00\00U&\ba\91\8c\85N\96Z\fe\ff\ff\00\00\00\00"
  "\bd~)p$w\f9\dft\fe\ff\ff\00\00\00\00\8f\b8\e5\b8\9f\bd\df\a6\8f\fe\ff\ff"
  "\00\00\00\00\94}t\88\cf_\a9\f8\a9\fe\ff\ff\00\00\00\00\cf\9b\a8\8f\93p"
  "D\b9\c4\fe\ff\ff\00\00\00\00k\15\0f\bf\f8\f0\08\8a\df\fe\ff\ff\00\00\00"
  "\00\b611eU%\b0\cd\f9\fe\ff\ff\00\00\00\00\ac\7f{\d0\c6\e2?\99\14\ff\ff"
  "\ff\00\00\00\00\06;+*\c4\10\\e4.\ff\ff\ff\00\00\00\00\d3\92si\99$$\aaI"
  "\ff\ff\ff\00\00\00\00\0e\ca\00\83\f2\b5\87\fdc\ff\ff\ff\00\00\00\00\eb"
  "\1a\11\92d\08\e5\bc~\ff\ff\ff\00\00\00\00\cc\88Po\09\cc\bc\8c\99\ff\ff"
  "\ff\00\00\00\00,e\19\e2X\17\b7\d1\b3\ff\ff\ff\00\00\00\00\00\00\00\00\00"
  "\00@\9c\ce\ff\ff\ff\00\00\00\00\00\00\00\00\10\a5\d4\e8\e8\ff\ff\ff\00"
  "\00\00\00\00\00b\ac\c5\ebx\ad\03\00\00\00\00\00\00\00\84\09\94\f8x9?\81"
  "\1e\00\00\00\00\00\00\00\b3\15\07\c9{\ce\97\c08\00\00\00\00\00\00\00p\"
  "\ea{\ce2~\8fS\00\00\00\00\00\00\00h\80\e9\ab\a48\d2\d5m\00\00\00\00\00"
  "\00\00E"\9a\17&'O\9f\88\00\00\00\00\00\00\00'\fb\c4\d41\a2c\ed\a2\00\00"
  "\00\00\00\00\00\a8\ad\c8\8c8e\de\b0\bd\00\00\00\00\00\00\00\dbe\ab\1a\8e"
  "\08\c7\83\d8\00\00\00\00\00\00\00\9a\1dqB\f9\1d]\c4\f2\00\00\00\00\00\00"
  "\00X\e7\1b\a6,iM\92\0d\01\00\00\00\00\00\00\ea\8dp\1ad\ee\01\da'\01\00"
  "\00\00\00\00\00Jw\ef\9a\99\a3m\a2B\01\00\00\00\00\00\00\85k}\b4{x\09\f2"
  "\\01\00\00\00\00\00\00w\18\ddy\a1\e4T\b4w\01\00\00\00\00\00\00\c2\c5\9b"
  "[\92\86[\86\92\01\00\00\00\00\00\00=]\96\c8\c5S5\c8\ac\01\00\00\00\00\00"
  "\00\b3\a0\97\fa\\b4*\95\c7\01\00\00\00\00\00\00\e3_\a0\99\bd\9fF\de\e1"
  "\01\00\00\00\00\00\00%\8c9\db4\c2\9b\a5\fc\01\00\00\00\00\00\00\\9f\98"
  "\a3r\9a\c6\f6\16\02\00\00\00\00\00\00\ce\be\e9TS\bf\dc\b71\02\00\00\00"
  "\00\00\00\e2A"\f2\17\f3\fc\88L\02\00\00\00\00\00\00\a5x\\d3\9b\ce \ccf"
  "\02\00\00\00\00\00\00\dfS!{\f3Z\16\98\81\02\00\00\00\00\00\00:0\1f\97\dc"
  "\b5\a0\e2\9b\02\00\00\00\00\00\00\96\b3\e3\S\d1\d9\a8\b6\02\00\00\00\00"
  "\00\00<D\a7\a4\d9|\9b\fb\d0\02\00\00\00\00\00\00\10D\a4\a7LLv\bb\eb\02"
  "\00\00\00\00\00\00\1a\9c@\b6\ef\8e\ab\8b\06\03\00\00\00\00\00\00,\84W\a6"
  "\10\ef\1f\d0 \03\00\00\00\00\00\00)1\91\e9\e5\a4\10\9b;\03\00\00\00\00"
  "\00\00\9d\0c\9c\a1\fb\9b\10\e7U\03\00\00\00\00\00\00)\f4;b\d9 (\acp\03"
  "\00\00\00\00\00\00\85\cf\a7z^KD\80\8b\03\00\00\00\00\00\00-\dd\ac\03@\e4"
  "!\bf\a5\03\00\00\00\00\00\00\8f\ffD^/\9cg\8e\c0\03\00\00\00\00\00\00A\b8"
  "\8c\9c\9d\173\d4\da\03\00\00\00\00\00\00\a9\1b\e3\b4\92\db\19\9e\f5\03"
  "\00\00\00\00\00\00\d9w\df\ban\bf\96\eb\0f\04\00\00\00\00\00\00k\ee\f0\9b"
  ";\02\87\af*\04\00\00\00\00\00\00\01\00\00\00\00\00\00\00\0a\00\00\00\00"
  "\00\00\00d\00\00\00\00\00\00\00\e8\03\00\00\00\00\00\00\10'\00\00\00\00"
  "\00\00\a0\86\01\00\00\00\00\00@B\0f\00\00\00\00\00\80\96\98\00\00\00\00"
  "\00\00\e1\f5\05\00\00\00\00\00\ca\9a;\00\00\00\00\00\e4\0bT\02\00\00\00"
  "\00\e8vH\17\00\00\00\00\10\a5\d4\e8\00\00\00\00\a0rN\18\09\00\00\00@z\10"
  "\f3Z\00\00\00\80\c6\a4~\8d\03\00\00\00\c1o\f2\86#\00\00\00\8a]xEc\01\00"
  "\00d\a7\b3\b6\e0\0d\00\00\e8\89\04#\c7\8a\a\b\f\n\r\t\v\x\u\U000102030"
  "4050607080910111213141516171819202122232425262728293031323334353637383"
  "9404142434445464748495051525354555657585960616263646566676869707172737"
  "475767778798081828384858687888990919293949596979899-Inf+InfNaN\00\df \01"
  "\000\00\00\00\9e \01\00A\00\00\00m \01\001\00\00\00< \01\001\00\00\00 "
  " \01\00\1c\00\00\00strconv: \ce\b5 > (den<<shift)/2strconv: num > den<"
  "<shift in adjustLastDigitFixedstrconv: internal error, rest != 0 but n"
  "eeded > 0strconv: internal error: extFloat.FixedDecimal called with n "
  "== 0strconv: illegal AppendFloat/FormatFloat bitSize0123456789ABCDEF01"
  "23456789abcdef<invalid reflect.Value>map[[]byte(MISSING)ErrorString`)("
  "nil\00\00\00\00\00\00x!\01\00\1f\00\00\00fmt: unknown base; can't happ"
  "eni)(nil)0123456789ABCDEFXtruefalse0123456789abcdefx%!(NOVERB)%!(EXTRA"
  " , <nil>%!(BADINDEX)Random256(): %x\0aRandom256(): %x\0a\00\01\00\00\00"
  "\10\00\00\00\00\00\00\00\1c\00\00\002\00\00\00\03\00\00\00l\00\00\00\8e"
  "\00\00\00\89\00\00\00{\00\00\00+\00\00\00\98\00\00\00C\00\00\00'\00\00"
  "\00\a3\00\00\00\89\00\00\00\10D\8b\01\00\10 \00\00\00\00\00\00\00\00\00"
  "\09\00\02\00\00\02\0b\00\02\17\00\02\1d\00\02"\00\02(\00\02.\00\023\00"
  "\029\03\00X@\00$I\00\90\01O\01\00"U\02\00\13W\00"^\05\00\e5\0dc\01_g\00"
  "\04p\00\04t\00\09y\0a\007c\00C\80\01\00\7fI\00\9f\01\84\01\00\02\88\01"
  "\00\02\92\01\00\02\9d\01\00\02\a7\01\00\02\b0\01\00\b3\01\b9\01\03\00I"
  "\c4\01\00\d6\01\c6\01\00\c55\ca\01\03\04"\d0\01\04"\d3\01\04\b3\01\d8\01"
  "\01\04"\dc\01\02\04"\dc\01\04\84\02\e3\01\02\04\e7\1f\e8\01\04\e7\1f\ec"
  "\01\01\05\df\01\ec\01\00\00\00\00\00\00\00\0awidPresent\0bprecPresent\05"
  "minus\04plus\05sharp\05space\04zero\05plusV\06sharpV\08typecode\05valu"
  "e\05flags\01s\06handle\04name\03buf\08fmtFlags\03wid\04prec\06intbuf\03"
  "arg\03fmt\09reordered\0agoodArgNum\09panicking\08erroring\08wrapErrs\0a"
  "wrappedErr\01_\03ref\05gcPtr\02Op\04Path\03Err\06Method\04Type\03Key\05"
  "Value\00\00\00\00\00\00\0c\00\00\00\0c\00\00\00";
data d_4486P0GSn3Ix0MkPsW4wzVYJM0j9(offset: 74768) = 
  "\05\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\02\00\00\00\03\00\00\0044\01\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\ff\ff\ff\ff\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\008\09\01\00^\0a\01\00\8c6\01"
  "\00\00\00\00\00P\01\00\00\01\00\00\00\b6\13\01\00\0b\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\01\00\00\00\e0\13\01\00\01\00\00\00\01\00\00"
  "\00\e1\13\01\00\02\00\00\00\01\00\00\00\e3\13\01\00\03\00\00\00\02\00\00"
  "\00\e6\13\01\00\03\00\00\00\02\00\00\00\e9\13\01\00\04\00\00\00\02\00\00"
  "\00\ed\13\01\00\05\00\00\00\03\00\00\00\f2\13\01\00\05\00\00\00\03\00\00"
  "\00\f7\13\01\00\06\00\00\00\03\00\00\00\fd\13\01\00\07\00\00\00\04\00\00"
  "\00\04\14\01\00\07\00\00\00\04\00\00\00\0b\14\01\00\08\00\00\00\04\00\00"
  "\00\13\14\01\00\09\00\00\00\04\00\00\00\1c\14\01\00\0a\00\00\00\05\00\00"
  "\00&\14\01\00\0a\00\00\00\05\00\00\000\14\01\00\0b\00\00\00\05\00\00\00"
  ";\14\01\00\0c\00\00\00\06\00\00\00G\14\01\00\0c\00\00\00\06\00\00\00S\14"
  "\01\00\0d\00\00\00\06\00\00\00`\14\01\00\0e\00\00\00\07\00\00\00n\14\01"
  "\00\0e\00\00\00\07\00\00\00|\14\01\00\0f\00\00\00\07\00\00\00\8b\14\01"
  "\00\10\00\00\00\07\00\00\00\9b\14\01\00\11\00\00\00\08\00\00\00\ac\14\01"
  "\00\11\00\00\00\08\00\00\00\bd\14\01\00\12\00\00\00\08\00\00\00\cf\14\01"
  "\00\13\00\00\00\09\00\00\00\e2\14\01\00\13\00\00\00\09\00\00\00\f5\14\01"
  "\00\14\00\00\00\09\00\00\00\09\15\01\00\15\00\00\00\0a\00\00\00\1e\15\01"
  "\00\15\00\00\00\0a\00\00\003\15\01\00\16\00\00\00\0a\00\00\00I\15\01\00"
  "\17\00\00\00\0a\00\00\00`\15\01\00\18\00\00\00\0b\00\00\00x\15\01\00\18"
  "\00\00\00\0b\00\00\00\90\15\01\00\19\00\00\00\0b\00\00\00\a9\15\01\00\1a"
  "\00\00\00\0c\00\00\00\c3\15\01\00\1a\00\00\00\0c\00\00\00\dd\15\01\00\1b"
  "\00\00\00\0c\00\00\00\f8\15\01\00\1c\00\00\00\0d\00\00\00\14\16\01\00\1c"
  "\00\00\00\0d\00\00\000\16\01\00\1d\00\00\00\0d\00\00\00M\16\01\00\1e\00"
  "\00\00\0d\00\00\00k\16\01\00\1f\00\00\00\0e\00\00\00\8a\16\01\00\1f\00"
  "\00\00\0e\00\00\00\a9\16\01\00 \00\00\00\0e\00\00\00\c9\16\01\00!\00\00"
  "\00\0f\00\00\00\ea\16\01\00!\00\00\00\0f\00\00\00\0b\17\01\00"\00\00\00"
  "\0f\00\00\00-\17\01\00#\00\00\00\10\00\00\00P\17\01\00#\00\00\00\10\00"
  "\00\00s\17\01\00$\00\00\00\10\00\00\00\97\17\01\00%\00\00\00\10\00\00\00"
  "\bc\17\01\00&\00\00\00\11\00\00\00\e2\17\01\00&\00\00\00\11\00\00\00\08"
  "\18\01\00'\00\00\00\11\00\00\00/\18\01\00(\00\00\00\12\00\00\00W\18\01"
  "\00(\00\00\00\12\00\00\00\7f\18\01\00)\00\00\00\12\00\00\00\a8\18\01\00"
  "*\00\00\00\13\00\00\00\d2\18\01\00*\00\00\00\17\00\00\00\08\00\00\00\81"
  "\ff\ff\ff4\00\00\00\0b\00\00\00\01\fc\ff\ff \00~\00\a1\00w\03z\03\7f\03"
  "\84\03V\05Y\05\8a\05\8d\05\c7\05\d0\05\ea\05\ef\05\f4\05\06\06\1b\06\1e"
  "\06\0d\07\10\07J\07M\07\b1\07\c0\07\fa\07\fd\07-\080\08[\08^\08j\08\a0"
  "\08\c7\08\d3\08\8c\09\8f\09\90\09\93\09\b2\09\b6\09\b9\09\bc\09\c4\09\c7"
  "\09\c8\09\cb\09\ce\09\d7\09\d7\09\dc\09\e3\09\e6\09\fe\09\01\0a\0a\0a\0f"
  "\0a\10\0a\13\0a9\0a<\0aB\0aG\0aH\0aK\0aM\0aQ\0aQ\0aY\0a^\0af\0av\0a\81"
  "\0a\b9\0a\bc\0a\cd\0a\d0\0a\d0\0a\e0\0a\e3\0a\e6\0a\f1\0a\f9\0a\0c\0b\0f"
  "\0b\10\0b\13\0b9\0b<\0bD\0bG\0bH\0bK\0bM\0bU\0bW\0b\\0bc\0bf\0bw\0b\82"
  "\0b\8a\0b\8e\0b\95\0b\99\0b\9f\0b\a3\0b\a4\0b\a8\0b\aa\0b\ae\0b\b9\0b\be"
  "\0b\c2\0b\c6\0b\cd\0b\d0\0b\d0\0b\d7\0b\d7\0b\e6\0b\fa\0b\00\0c9\0c=\0c"
  "M\0cU\0cZ\0c`\0cc\0cf\0co\0cw\0c\b9\0c\bc\0c\cd\0c\d5\0c\d6\0c\de\0c\e3"
  "\0c\e6\0c\f2\0c\00\0dO\0dT\0dc\0df\0d\96\0d\9a\0d\bd\0d\c0\0d\c6\0d\ca"
  "\0d\ca\0d\cf\0d\df\0d\e6\0d\ef\0d\f2\0d\f4\0d\01\0e:\0e?\0e[\0e\81\0e\bd"
  "\0e\c0\0e\cd\0e\d0\0e\d9\0e\dc\0e\df\0e\00\0fl\0fq\0f\da\0f\00\10\c7\10"
  "\cd\10\cd\10\d0\10M\12P\12]\12`\12\8d\12\90\12\b5\12\b8\12\c5\12\c8\12"
  "\15\13\18\13Z\13]\13|\13\80\13\99\13\a0\13\f5\13\f8\13\fd\13\00\14\9c\16"
  "\a0\16\f8\16\00\17\14\17 \176\17@\17S\17`\17s\17\80\17\dd\17\e0\17\e9\17"
  "\f0\17\f9\17\00\18\0d\18\10\18\19\18 \18x\18\80\18\aa\18\b0\18\f5\18\00"
  "\19+\190\19;\19@\19@\19D\19m\19p\19t\19\80\19\ab\19\b0\19\c9\19\d0\19\da"
  "\19\de\19\1b\1a\1e\1a|\1a\7f\1a\89\1a\90\1a\99\1a\a0\1a\ad\1a\b0\1a\c0"
  "\1a\00\1bK\1bP\1b|\1b\80\1b\f3\1b\fc\1b7\1c;\1cI\1cM\1c\88\1c\90\1c\ba"
  "\1c\bd\1c\c7\1c\d0\1c\fa\1c\00\1d\15\1f\18\1f\1d\1f \1fE\1fH\1fM\1fP\1f"
  "}\1f\80\1f\d3\1f\d6\1f\ef\1f\f2\1f\fe\1f\10 ' 0 ^ p q t \9c \a0 \bf \d0"
  " \f0 \00!\8b!\90!&$@$J$`$s+v+\f3,\f9,'-----0-g-o-p-\7f-\96-\a0-R.\80.\f3"
  ".\00/\d5/\f0/\fb/\010\960\990\ff0\051\e31\f01\fc\9f\00\a0\8c\a4\90\a4\c6"
  "\a4\d0\a4+\a6@\a6\f7\a6\00\a7\bf\a7\c2\a7\ca\a7\f5\a7,\a80\a89\a8@\a8w"
  "\a8\80\a8\c5\a8\ce\a8\d9\a8\e0\a8S\a9_\a9|\a9\80\a9\d9\a9\de\a96\aa@\aa"
  "M\aaP\aaY\aa\\aa\c2\aa\db\aa\f6\aa\01\ab\06\ab\09\ab\0e\ab\11\ab\16\ab"
  " \abk\abp\ab\ed\ab\f0\ab\f9\ab\00\ac\a3\d7\b0\d7\c6\d7\cb\d7\fb\d7\00\f9"
  "m\fap\fa\d9\fa\00\fb\06\fb\13\fb\17\fb\1d\fb\c1\fb\d3\fb?\fdP\fd\8f\fd"
  "\92\fd\c7\fd\f0\fd\fd\fd\00\fe\19\fe \fek\fep\fe\fc\fe\01\ff\be\ff\c2\ff"
  "\c7\ff\ca\ff\cf\ff\d2\ff\d7\ff\da\ff\dc\ff\e0\ff\ee\ff\fc\ff\fd\ff\ad\00"
  "\8b\03\8d\03\a2\030\05\90\05\dd\06?\08_\08\b5\08\e2\08\84\09\a9\09\b1\09"
  "\de\09\04\0a)\0a1\0a4\0a7\0a=\0a]\0a\84\0a\8e\0a\92\0a\a9\0a\b1\0a\b4\0a"
  "\c6\0a\ca\0a\00\0b\04\0b)\0b1\0b4\0b^\0b\84\0b\91\0b\9b\0b\9d\0b\c9\0b"
  "\0d\0c\11\0c)\0cE\0cI\0cW\0c\8d\0c\91\0c\a9\0c\b4\0c\c5\0c\c9\0c\df\0c"
  "\f0\0c\0d\0d\11\0dE\0dI\0d\80\0d\84\0d\b2\0d\bc\0d\d5\0d\d7\0d\83\0e\85"
  "\0e\8b\0e\a4\0e\a6\0e\c5\0e\c7\0eH\0f\98\0f\bd\0f\cd\0f\c6\10I\12W\12Y"
  "\12\89\12\b1\12\bf\12\c1\12\d7\12\11\13\80\16\0d\17m\17q\17\1f\19_\1a\fa"
  "\1dX\1fZ\1f\\1f^\1f\b5\1f\c5\1f\dc\1f\f5\1f\8f \96+/,_,&-\a7-\af-\b7-\bf"
  "-\c7-\cf-\d7-\df-\9a.@001\8f1\1f2\ce\a9\ff\a9'\ab/\ab7\fb=\fb?\fbB\fbE"
  "\fbS\feg\feu\fe\e7\ff\00\00\01\00M\00\01\00P\00\01\00]\00\01\00\80\00\01"
  "\00\fa\00\01\00\00\01\01\00\02\01\01\00\07\01\01\003\01\01\007\01\01\00"
  "\9c\01\01\00\a0\01\01\00\a0\01\01\00\d0\01\01\00\fd\01\01\00\80\02\01\00"
  "\9c\02\01\00\a0\02\01\00\d0\02\01\00\e0\02\01\00\fb\02\01\00\00\03\01\00"
  "#\03\01\00-\03\01\00J\03\01\00P\03\01\00z\03\01\00\80\03\01\00\c3\03\01"
  "\00\c8\03\01\00\d5\03\01\00\00\04\01\00\9d\04\01\00\a0\04\01\00\a9\04\01"
  "\00\b0\04\01\00\d3\04\01\00\d8\04\01\00\fb\04\01\00\00\05\01\00'\05\01"
  "\000\05\01\00c\05\01\00o\05\01\00o\05\01\00\00\06\01\006\07\01\00@\07\01"
  "\00U\07\01\00`\07\01\00g\07\01\00\00\08\01\00\05\08\01\00\08\08\01\008"
  "\08\01\00<\08\01\00<\08\01\00?\08\01\00\9e\08\01\00\a7\08\01\00\af\08\01"
  "\00\e0\08\01\00\f5\08\01\00\fb\08\01\00\1b\09\01\00\1f\09\01\009\09\01"
  "\00?\09\01\00?\09\01\00\80\09\01\00\b7\09\01\00\bc\09\01\00\cf\09\01\00"
  "\d2\09\01\00\06\0a\01\00\0c\0a\01\005\0a\01\008\0a\01\00:\0a\01\00?\0a"
  "\01\00H\0a\01\00P\0a\01\00X\0a\01\00`\0a\01\00\9f\0a\01\00\c0\0a\01\00"
  "\e6\0a\01\00\eb\0a\01\00\f6\0a\01\00\00\0b\01\005\0b\01\009\0b\01\00U\0b"
  "\01\00X\0b\01\00r\0b\01\00x\0b\01\00\91\0b\01\00\99\0b\01\00\9c\0b\01\00"
  "\a9\0b\01\00\af\0b\01\00\00\0c\01\00H\0c\01\00\80\0c\01\00\b2\0c\01\00"
  "\c0\0c\01\00\f2\0c\01\00\fa\0c\01\00'\0d\01\000\0d\01\009\0d\01\00`\0e"
  "\01\00\ad\0e\01\00\b0\0e\01\00\b1\0e\01\00\00\0f\01\00'\0f\01\000\0f\01"
  "\00Y\0f\01\00\b0\0f\01\00\cb\0f\01\00\e0\0f\01\00\f6\0f\01\00\00\10\01"
  "\00M\10\01\00R\10\01\00o\10\01\00\7f\10\01\00\c1\10\01\00\d0\10\01\00\e8"
  "\10\01\00\f0\10\01\00\f9\10\01\00\00\11\01\00G\11\01\00P\11\01\00v\11\01"
  "\00\80\11\01\00\f4\11\01\00\00\12\01\00>\12\01\00\80\12\01\00\a9\12\01"
  "\00\b0\12\01\00\ea\12\01\00\f0\12\01\00\f9\12\01\00\00\13\01\00\0c\13\01"
  "\00\0f\13\01\00\10\13\01\00\13\13\01\00D\13\01\00G\13\01\00H\13\01\00K"
  "\13\01\00M\13\01\00P\13\01\00P\13\01\00W\13\01\00W\13\01\00]\13\01\00c"
  "\13\01\00f\13\01\00l\13\01\00p\13\01\00t\13\01\00\00\14\01\00a\14\01\00"
  "\80\14\01\00\c7\14\01\00\d0\14\01\00\d9\14\01\00\80\15\01\00\b5\15\01\00"
  "\b8\15\01\00\dd\15\01\00\00\16\01\00D\16\01\00P\16\01\00Y\16\01\00`\16"
  "\01\00l\16\01\00\80\16\01\00\b8\16\01\00\c0\16\01\00\c9\16\01\00\00\17"
  "\01\00\1a\17\01\00\1d\17\01\00+\17\01\000\17\01\00?\17\01\00\00\18\01\00"
  ";\18\01\00\a0\18\01\00\f2\18\01\00\ff\18\01\00\06\19\01\00\09\19\01\00"
  "\09\19\01\00\0c\19\01\008\19\01\00;\19\01\00F\19\01\00P\19\01\00Y\19\01"
  "\00\a0\19\01\00\a7\19\01\00\aa\19\01\00\d7\19\01\00\da\19\01\00\e4\19\01"
  "\00\00\1a\01\00G\1a\01\00P\1a\01\00\a2\1a\01\00\c0\1a\01\00\f8\1a\01\00"
  "\00\1c\01\00E\1c\01\00P\1c\01\00l\1c\01\00p\1c\01\00\8f\1c\01\00\92\1c"
  "\01\00\b6\1c\01\00\00\1d\01\006\1d\01\00:\1d\01\00G\1d\01\00P\1d\01\00"
  "Y\1d\01\00`\1d\01\00\98\1d\01\00\a0\1d\01\00\a9\1d\01\00\e0\1e\01\00\f8"
  "\1e\01\00\b0\1f\01\00\b0\1f\01\00\c0\1f\01\00\f1\1f\01\00\ff\1f\01\00\99"
  "#\01\00\00$\01\00t$\01\00\80$\01\00C%\01\00\000\01\00.4\01\00\00D\01\00"
  "FF\01\00\00h\01\008j\01\00@j\01\00ij\01\00nj\01\00oj\01\00\d0j\01\00\ed"
  "j\01\00\f0j\01\00\f5j\01\00\00k\01\00Ek\01\00Pk\01\00wk\01\00}k\01\00\8f"
  "k\01\00@n\01\00\9an\01\00\00o\01\00Jo\01\00Oo\01\00\87o\01\00\8fo\01\00"
  "\9fo\01\00\e0o\01\00\e4o\01\00\f0o\01\00\f1o\01\00\00p\01\00\f7\87\01\00"
  "\00\88\01\00\d5\8c\01\00\00\8d\01\00\08\8d\01\00\00\b0\01\00\1e\b1\01\00"
  "P\b1\01\00R\b1\01\00d\b1\01\00g\b1\01\00p\b1\01\00\fb\b2\01\00\00\bc\01"
  "\00j\bc\01\00p\bc\01\00|\bc\01\00\80\bc\01\00\88\bc\01\00\90\bc\01\00\99"
  "\bc\01\00\9c\bc\01\00\9f\bc\01\00\00\d0\01\00\f5\d0\01\00\00\d1\01\00&"
  "\d1\01\00)\d1\01\00r\d1\01\00{\d1\01\00\e8\d1\01\00\00\d2\01\00E\d2\01"
  "\00\e0\d2\01\00\f3\d2\01\00\00\d3\01\00V\d3\01\00`\d3\01\00x\d3\01\00\00"
  "\d4\01\00\9f\d4\01\00\a2\d4\01\00\a2\d4\01\00\a5\d4\01\00\a6\d4\01\00\a9"
  "\d4\01\00\0a\d5\01\00\0d\d5\01\00F\d5\01\00J\d5\01\00\a5\d6\01\00\a8\d6"
  "\01\00\cb\d7\01\00\ce\d7\01\00\8b\da\01\00\9b\da\01\00\af\da\01\00\00\e0"
  "\01\00\18\e0\01\00\1b\e0\01\00*\e0\01\00\00\e1\01\00,\e1\01\000\e1\01\00"
  "=\e1\01\00@\e1\01\00I\e1\01\00N\e1\01\00O\e1\01\00\c0\e2\01\00\f9\e2\01"
  "\00\ff\e2\01\00\ff\e2\01\00\00\e8\01\00\c4\e8\01\00\c7\e8\01\00\d6\e8\01"
  "\00\00\e9\01\00K\e9\01\00P\e9\01\00Y\e9\01\00^\e9\01\00_\e9\01\00q\ec\01"
  "\00\b4\ec\01\00\01\ed\01\00=\ed\01\00\00\ee\01\00$\ee\01\00'\ee\01\00;"
  "\ee\01\00B\ee\01\00B\ee\01\00G\ee\01\00T\ee\01\00W\ee\01\00d\ee\01\00g"
  "\ee\01\00\9b\ee\01\00\a1\ee\01\00\bb\ee\01\00\f0\ee\01\00\f1\ee\01\00\00"
  "\f0\01\00+\f0\01\000\f0\01\00\93\f0\01\00\a0\f0\01\00\ae\f0\01\00\b1\f0"
  "\01\00\f5\f0\01\00\00\f1\01\00\ad\f1\01\00\e6\f1\01\00\02\f2\01\00\10\f2"
  "\01\00;\f2\01\00@\f2\01\00H\f2\01\00P\f2\01\00Q\f2\01\00`\f2\01\00e\f2"
  "\01\00\00\f3\01\00\d7\f6\01\00\e0\f6\01\00\ec\f6\01\00\f0\f6\01\00\fc\f6"
  "\01\00\00\f7\01\00s\f7\01\00\80\f7\01\00\d8\f7\01\00\e0\f7\01\00\eb\f7"
  "\01\00\00\f8\01\00\0b\f8\01\00\10\f8\01\00G\f8\01\00P\f8\01\00Y\f8\01\00"
  "`\f8\01\00\87\f8\01\00\90\f8\01\00\ad\f8\01\00\b0\f8\01\00\b1\f8\01\00"
  "\00\f9\01\00S\fa\01\00`\fa\01\00m\fa\01\00p\fa\01\00t\fa\01\00x\fa\01\00"
  "z\fa\01\00\80\fa\01\00\86\fa\01\00\90\fa\01\00\a8\fa\01\00\b0\fa\01\00"
  "\b6\fa\01\00\c0\fa\01\00\c2\fa\01\00\d0\fa\01\00\d6\fa\01\00\00\fb\01\00"
  "\ca\fb\01\00\f0\fb\01\00\f9\fb\01\00\00\00\02\00\dd\a6\02\00\00\a7\02\00"
  "4\b7\02\00@\b7\02\00\1d\b8\02\00 \b8\02\00\a1\ce\02\00\b0\ce\02\00\e0\eb"
  "\02\00\00\f8\02\00\1d\fa\02\00\00\00\03\00J\13\03\00\00\01\0e\00\ef\01"
  "\0e\00\0c\00'\00;\00>\00\8f\01\9e\03\09\086\08V\08\f3\08\04\0a\14\0a\18"
  "\0a\7f\0e\aa\0e\bd\105\11\e0\11\12\12\87\12\89\12\8e\12\9e\12\04\13)\13"
  "1\134\13:\13\\14\14\19\17\196\19\09\1c7\1c\a8\1c\07\1d\0a\1d;\1d>\1df\1d"
  "i\1d\8f\1d\92\1do$_jZkbkU\d4\9d\d4\ad\d4\ba\d4\bc\d4\c4\d4\06\d5\15\d5"
  "\1d\d5:\d5?\d5E\d5Q\d5\a0\da\07\e0"\e0%\e0\04\ee \ee#\ee(\ee3\ee8\ee:\ee"
  "H\eeJ\eeL\eeP\eeS\eeX\eeZ\ee\\ee^\ee`\eec\eek\ees\eex\ee}\ee\7f\ee\8a\ee"
  "\a4\ee\aa\ee\c0\f0\d0\f0y\f9\cc\f9\93\fb\00\00\00\00\00\00\987\01\00\00"
  "\00\00\00\04\08\01\00\c9\13\01\00\17\00\00\00";

import function runtime_fd_write(a:int, b:int, c:int, d:int):int;

import function wasi_fd_close(a:int):int;

import function wasi_fd_write(a:int, b:int, c:int, d:int):int;

import function wasi_fd_seek(a:int, b:long, c:int, d:int):int;

import function syscall_js_valueGet(a:int, b:int, c:int, d:int, e:int, f:int);

import function syscall_js_valuePrepareString(a:int, b:int, c:int, d:int);

import function syscall_js_valueLoadString(a:int, b:int, c:int, d:int, e:int, f:int);

import function syscall_js_finalizeRef(a:int, b:int, c:int);

import function syscall_js_stringVal(a:int, b:int, c:int, d:int, e:int);

import function syscall_js_valueSet(a:int, b:int, c:int, d:int, e:int, f:int);

import function syscall_js_valueLength(a:int, b:int, c:int):int;

import function syscall_js_valueIndex(a:int, b:int, c:int, d:int, e:int);

import function syscall_js_valueCall(a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int);

function memcpy(a:int, b:int, c:int):int {
  var d:int;
  var e:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var e:int;
  var e:int;
  var e:int;
  var d:int;
  var d:int;
  var e:int;
  var d:int;
  var d:int;
  var e:int;
  var d:int;
  var d:int;
  var d:int;
  var e:int;
  var d:int;
  var e:int;
  var d:int;
  var d:int;
  var f:int;
  var d:int;
  var e:int;
  var d:int;
  var d:int;
  var h:int;
  var i:int;
  var d:int;
  var d:int;
  var d:int;
  var e:int;
  var e:int;
  var d:int;
  var d:int;
  var e:int;
  var d:int;
  var g:int;
  var d:int;
  var f:int;
  var d:int;
  var h:int;
  var i:int;
  var d:int;
  var h:int;
  var f:int;
  var d:int;
  var h:int;
  var i:int;
  var e:int;
  var e:int;
  var g:int;
  var d:int;
  var e:int;
  var d:int;
  var g:int;
  var d:int;
  var f:int;
  var d:int;
  var h:int;
  var i:int;
  var d:int;
  var h:int;
  var f:int;
  var d:int;
  var h:int;
  var i:int;
  var e:int;
  var e:int;
  var g:int;
  var e:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var e:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var e:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var e:int;
  var d:int;
  var d:int;
  var d:int;
  var e:int;
  var d:int;
  if (eqz(c)) goto B_b;
  if (eqz(b & 3)) goto B_b;
  d = a;
  loop L_c {
    d[0]:byte = b[0]:ubyte;
    e = c + -1;
    d = d + 1;
    b = b + 1;
    if (c == 1) goto B_a;
    c = e;
    if (b & 3) continue L_c;
    goto B_a;
  }
  label B_b:
  e = c;
  d = a;
  label B_a:
  c = d & 3;
  if (c) goto B_e;
  if (e < 16) goto B_f;
  loop L_g {
    d[0]:int = b[0]:int;
    (d + 4)[0]:int = (b + 4)[0]:int;
    (d + 8)[0]:int = (b + 8)[0]:int;
    (d + 12)[0]:int = (b + 12)[0]:int;
    d = d + 16;
    b = b + 16;
    e = e + -16;
    if (e > 15) continue L_g;
  }
  label B_f:
  if (eqz(e & 8)) goto B_h;
  d[0]:long@4 = b[0]:long@4;
  b = b + 8;
  d = d + 8;
  label B_h:
  if (eqz(e & 4)) goto B_i;
  d[0]:int = b[0]:int;
  b = b + 4;
  d = d + 4;
  label B_i:
  if (eqz(e & 2)) goto B_j;
  d[0]:byte = b[0]:ubyte;
  d[1]:byte = b[1]:ubyte;
  d = d + 2;
  b = b + 2;
  label B_j:
  if (eqz(e & 1)) goto B_d;
  d[0]:byte = b[0]:ubyte;
  return a;
  label B_e:
  if (e < 32) goto B_k;
  br_table[B_n, B_m, B_l, ..B_k](c + -1)
  label B_n:
  d[1]:byte = b[1]:ubyte;
  d[0]:byte = (f = b[0]:int);
  d[2]:byte = b[2]:ubyte;
  e = e + -3;
  g = d + 3;
  c = 0;
  loop L_o {
    d = g + c;
    d[0]:int = (i = ((h = b + c) + 4)[0]:int) << 8 | f >> 24;
    (d + 4)[0]:int = (f = (h + 8)[0]:int) << 8 | i >> 24;
    (d + 8)[0]:int = (i = (h + 12)[0]:int) << 8 | f >> 24;
    (d + 12)[0]:int = (f = (h + 16)[0]:int) << 8 | i >> 24;
    c = c + 16;
    e = e + -16;
    if (e > 16) continue L_o;
  }
  d = g + c;
  b = b + c + 3;
  goto B_k;
  label B_m:
  d[0]:byte = (f = b[0]:int);
  d[1]:byte = b[1]:ubyte;
  e = e + -2;
  g = d + 2;
  c = 0;
  loop L_p {
    d = g + c;
    d[0]:int = (i = ((h = b + c) + 4)[0]:int) << 16 | f >> 16;
    (d + 4)[0]:int = (f = (h + 8)[0]:int) << 16 | i >> 16;
    (d + 8)[0]:int = (i = (h + 12)[0]:int) << 16 | f >> 16;
    (d + 12)[0]:int = (f = (h + 16)[0]:int) << 16 | i >> 16;
    c = c + 16;
    e = e + -16;
    if (e > 17) continue L_p;
  }
  d = g + c;
  b = b + c + 2;
  goto B_k;
  label B_l:
  d[0]:byte = (f = b[0]:int);
  e = e + -1;
  g = d + 1;
  c = 0;
  loop L_q {
    d = g + c;
    d[0]:int = (i = ((h = b + c) + 4)[0]:int) << 24 | f >> 8;
    (d + 4)[0]:int = (f = (h + 8)[0]:int) << 24 | i >> 8;
    (d + 8)[0]:int = (i = (h + 12)[0]:int) << 24 | f >> 8;
    (d + 12)[0]:int = (f = (h + 16)[0]:int) << 24 | i >> 8;
    c = c + 16;
    e = e + -16;
    if (e > 18) continue L_q;
  }
  d = g + c;
  b = b + c + 1;
  label B_k:
  if (eqz(e & 16)) goto B_r;
  d[0]:short@1 = b[0]:ushort@1;
  d[2]:byte = b[2]:ubyte;
  d[3]:byte = b[3]:ubyte;
  d[4]:byte = b[4]:ubyte;
  d[5]:byte = b[5]:ubyte;
  d[6]:byte = b[6]:ubyte;
  d[7]:byte = b[7]:ubyte;
  d[8]:byte = b[8]:ubyte;
  d[9]:byte = b[9]:ubyte;
  d[10]:byte = b[10]:ubyte;
  d[11]:byte = b[11]:ubyte;
  d[12]:byte = b[12]:ubyte;
  d[13]:byte = b[13]:ubyte;
  d[14]:byte = b[14]:ubyte;
  d[15]:byte = b[15]:ubyte;
  d = d + 16;
  b = b + 16;
  label B_r:
  if (eqz(e & 8)) goto B_s;
  d[0]:byte = b[0]:ubyte;
  d[1]:byte = b[1]:ubyte;
  d[2]:byte = b[2]:ubyte;
  d[3]:byte = b[3]:ubyte;
  d[4]:byte = b[4]:ubyte;
  d[5]:byte = b[5]:ubyte;
  d[6]:byte = b[6]:ubyte;
  d[7]:byte = b[7]:ubyte;
  d = d + 8;
  b = b + 8;
  label B_s:
  if (eqz(e & 4)) goto B_t;
  d[0]:byte = b[0]:ubyte;
  d[1]:byte = b[1]:ubyte;
  d[2]:byte = b[2]:ubyte;
  d[3]:byte = b[3]:ubyte;
  d = d + 4;
  b = b + 4;
  label B_t:
  if (eqz(e & 2)) goto B_u;
  d[0]:byte = b[0]:ubyte;
  d[1]:byte = b[1]:ubyte;
  d = d + 2;
  b = b + 2;
  label B_u:
  if (eqz(e & 1)) goto B_d;
  d[0]:byte = b[0]:ubyte;
  label B_d:
  return a;
}

function memset(a:{ a:byte, b:byte, c:byte, d:byte }, b:long_ptr, c:int):int {
  var e:int;
  var f:int;
  if (eqz(c)) goto B_a;
  a.a = b;
  var d:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int } = c + a;
  (d + -1)[0]:byte = b;
  if (c < 3) goto B_a;
  a.c = b;
  a.b = b;
  (d + -3)[0]:byte = b;
  (d + -2)[0]:byte = b;
  if (c < 7) goto B_a;
  a.d = b;
  (d + -4)[0]:byte = b;
  if (c < 9) goto B_a;
  d = a + (e = 0 - a & 3);
  d.a = (b = (b & 255) * 16843009);
  c = d + (e = c - e & -4);
  (c + -4)[0]:int = b;
  if (e < 9) goto B_a;
  d.c = b;
  d.b = b;
  (c + -8)[0]:int = b;
  (c + -12)[0]:int = b;
  if (e < 25) goto B_a;
  d.g = b;
  d.f = b;
  d.e = b;
  d.d = b;
  (c + -16)[0]:int = b;
  (c + -20)[0]:int = b;
  (c + -24)[0]:int = b;
  (c + -28)[0]:int = b;
  c = e - (f = (d & 4) | 24);
  if (c < 32) goto B_a;
  var g:long = i64_extend_i32_u(b);
  g = g << 32L | g;
  b = d + f;
  loop L_b {
    b[0] = g;
    (b + 24)[0]:long = g;
    (b + 16)[0]:long = g;
    (b + 8)[0]:long = g;
    b = b + 32;
    c = c + -32;
    if (c > 31) continue L_b;
  }
  label B_a:
  return a;
}

function close(a:int):int {
  a = wasi_fd_close(a);
  if (a) goto B_a;
  return 0;
  label B_a:
  0[19722]:int = a;
  return -1;
}

function stdio_close(a:int_ptr):int {
  return close(a[14])
}

function writev(a:int, b:int, c:int):int {
  var d:int_ptr = g_a - 16;
  g_a = d;
  var e:int = -1;
  if (c > -1) goto B_b;
  0[19722]:int = 28;
  goto B_a;
  label B_b:
  c = wasi_fd_write(a, b, c, d + 12);
  if (eqz(c)) goto B_c;
  0[19722]:int = c;
  e = -1;
  goto B_a;
  label B_c:
  e = d[3];
  label B_a:
  g_a = d + 16;
  return e;
}

function stdio_write(a:int, b:int_ptr, c:int):int {
  var g:int;
  var h:int;
  var i:int;
  var g:int;
  var d:{ a:int, b:int, c:int, d:int } = g_a - 16;
  g_a = d;
  d.d = c;
  d.c = b;
  d.a = (b = a[6]:int);
  d.b = (b = a[5]:int - b);
  var e:int = 2;
  var f:int = b + c;
  if (f == (g = writev(a[14]:int, d, 2))) goto B_b;
  b = d;
  loop L_c {
    if (g > -1) goto B_d;
    g = 0;
    a[6]:int = 0;
    a[2]:long = 0L;
    a[0]:int = a[0]:int | 32;
    if (e == 2) goto B_a;
    g = c - b[1];
    goto B_a;
    label B_d:
    var j:int_ptr = b + ((i = g > (h = b[1])) << 3);
    j[0] = j[0] + (h = g - select_if(h, 0, i));
    j = b + select_if(12, 4, i);
    j[0] = j[0] - h;
    f = f - g;
    if (
      f != (g = writev(a[14]:int, b = select_if(b + 8, b, i), e = e - i))) continue L_c;
  }
  label B_b:
  a[6]:int = (b = a[10]:int);
  a[5]:int = b;
  a[4]:int = b + a[11]:int;
  g = c;
  label B_a:
  g_a = d + 16;
  return g;
}

function lseek(a:int, b:long, c:int):long {
  var d:long_ptr = g_a - 16;
  g_a = d;
  a = wasi_fd_seek(a, b, c & 255, d + 8);
  if (eqz(a)) goto B_b;
  0[19722]:int = select_if(70, a, a == 76);
  b = -1L;
  goto B_a;
  label B_b:
  b = d[1];
  label B_a:
  g_a = d + 16;
  return b;
}

function stdio_seek(a:int_ptr, b:long, c:int):long {
  return lseek(a[14], b, c)
}

function towrite(a:int):int {
  var b:int;
  a[15]:int = (b = a[15]:int) + -1 | b;
  b = a[0]:int;
  if (eqz(b & 8)) goto B_a;
  a[0]:int = b | 32;
  return -1;
  label B_a:
  a[1]:long@4 = 0L;
  a[6]:int = (b = a[10]:int);
  a[5]:int = b;
  a[4]:int = b + a[11]:int;
  return 0;
}

function fwritex(a:int, b:int, c:int_ptr):int {
  var d:int;
  var f:int;
  var d:int;
  var d:int;
  var e:int;
  var e:int;
  var d:int;
  var e:int;
  var i:int;
  var d:int;
  var f:int;
  var e:int;
  d = c[4];
  if (d) goto B_b;
  e = 0;
  if (towrite(c)) goto B_a;
  d = c[4];
  label B_b:
  if (d - (f = c[5]) >= b) goto B_c;
  return call_indirect(c, a, b, c[8]);
  label B_c:
  var g:int = 0;
  if (c[16] < 0) goto B_d;
  g = 0;
  e = a;
  d = 0;
  loop L_e {
    if (b == d) goto B_d;
    d = d + 1;
    var h:int = e + b;
    i = e + -1;
    e = i;
    if ((h + -1)[0]:ubyte != 10) continue L_e;
  }
  e = call_indirect(c, a, g = b - d + 1, c[8]);
  if (e < g) goto B_a;
  a = i + b + 1;
  f = c[5];
  b = d + -1;
  label B_d:
  memcpy(f, a, b);
  c[5] = c[5] + b;
  e = g + b;
  label B_a:
  return e;
}

function fwrite(a:int, b:int, c:int, d:int_ptr):int {
  var f:int;
  var g:int;
  var f:int;
  var f:int;
  var f:int;
  var k:int;
  var f:int;
  var k:int;
  var k:int;
  var g:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var e:int = c * b;
  f = d[4];
  if (f) goto B_b;
  f = 0;
  if (towrite(d)) goto B_a;
  f = d[4];
  label B_b:
  if (f - (g = d[5]) >= e) goto B_c;
  f = call_indirect(d, a, e, d[8]);
  goto B_a;
  label B_c:
  var h:int = 0;
  if (d[16] >= 0) goto B_e;
  f = e;
  goto B_d;
  label B_e:
  var i:int = a + e;
  h = 0;
  f = 0;
  loop L_f {
    if (e + f) goto B_g;
    f = e;
    goto B_d;
    label B_g:
    var j:int = i + f;
    k = f + -1;
    f = k;
    if ((j + -1)[0]:ubyte != 10) continue L_f;
  }
  f = call_indirect(d, a, h = e + k + 1, d[8]);
  if (f < h) goto B_a;
  f = k ^ -1;
  a = i + k + 1;
  g = d[5];
  label B_d:
  memcpy(g, a, f);
  d[5] = d[5] + f;
  f = h + f;
  label B_a:
  if (f != e) goto B_h;
  return select_if(c, 0, b);
  label B_h:
  return f / b;
}

function dummy(a:int, b:int):int {
  return a
}

function lctrans(a:int, b:int):int {
  return dummy(a, b)
}

function strerror(a:int):int {
  var e:int;
  var e:int;
  var d:int;
  var d:int;
  var e:int;
  var c:int_ptr;
  var b:ubyte_ptr = 0;
  c = 0[19731]:int;
  if (c) goto B_a;
  c = 78900;
  0[19731]:int = 78900;
  label B_a:
  loop L_e {
    if ((b + 65552)[0]:ubyte == a) goto B_d;
    d = 77;
    b = b + 1;
    if (b != 77) continue L_e;
    goto B_c;
  }
  label B_d:
  d = b;
  if (b) goto B_c;
  e = 65632;
  goto B_b;
  label B_c:
  b = 65632;
  loop L_f {
    a = b[0];
    e = b + 1;
    b = e;
    if (a) continue L_f;
    b = e;
    d = d + -1;
    if (d) continue L_f;
  }
  label B_b:
  return lctrans(e, c[5]);
}

function memchr(a:int, b:int, c:int):int {
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var d:int = c != 0;
  if (c) goto B_d;
  e = c;
  goto B_c;
  label B_d:
  if (a & 3) goto B_e;
  e = c;
  goto B_c;
  label B_e:
  var f:int = b & 255;
  loop L_f {
    if (a[0]:ubyte != f) goto B_g;
    e = c;
    goto B_b;
    label B_g:
    d = c != 1;
    e = c + -1;
    a = a + 1;
    if (c == 1) goto B_c;
    c = e;
    if (a & 3) continue L_f;
  }
  label B_c:
  if (eqz(d)) goto B_a;
  label B_b:
  if (a[0]:ubyte == (b & 255)) goto B_h;
  if (e < 4) goto B_h;
  d = (b & 255) * 16843009;
  loop L_i {
    c = a[0]:int ^ d;
    if (((c ^ -1) & c + -16843009) & -2139062144) goto B_h;
    a = a + 4;
    e = e + -4;
    if (e > 3) continue L_i;
  }
  label B_h:
  if (eqz(e)) goto B_a;
  c = b & 255;
  loop L_j {
    if (a[0]:ubyte != c) goto B_k;
    return a;
    label B_k:
    a = a + 1;
    e = e + -1;
    if (e) continue L_j;
  }
  label B_a:
  return 0;
}

function strnlen(a:int, b:int):int {
  var c:int = memchr(a, 0, b);
  return select_if(c - a, b, c);
}

function wcrtomb(a:{ a:byte, b:byte, c:byte, d:byte }, b:int, c:int):int {
  var d:int = 1;
  if (eqz(a)) goto B_a;
  if (b > 127) goto B_b;
  a.a = b;
  return 1;
  label B_b:
  if (0[19725]:int) goto B_d;
  if ((b & -128) == 57216) goto B_e;
  0[19722]:int = 25;
  goto B_c;
  label B_e:
  a.a = b;
  return 1;
  label B_d:
  if (b > 2047) goto B_f;
  a.b = (b & 63) | 128;
  a.a = b >> 6 | 192;
  return 2;
  label B_f:
  if (b < 55296) goto B_h;
  if ((b & -8192) != 57344) goto B_g;
  label B_h:
  a.c = (b & 63) | 128;
  a.a = b >> 12 | 224;
  a.b = (b >> 6 & 63) | 128;
  return 3;
  label B_g:
  if (b + -65536 > 1048575) goto B_i;
  a.d = (b & 63) | 128;
  a.a = b >> 18 | 240;
  a.c = (b >> 6 & 63) | 128;
  a.b = (b >> 12 & 63) | 128;
  return 4;
  label B_i:
  0[19722]:int = 25;
  label B_c:
  d = -1;
  label B_a:
  return d;
}

function wctomb(a:int, b:int):int {
  if (a) goto B_a;
  return 0;
  label B_a:
  return wcrtomb(a, b, 0);
}

function frexp(a:double, b:int_ptr):double {
  var c:long = i64_reinterpret_f64(a);
  var d:int = i32_wrap_i64(c >> 52L) & 2047;
  if (d == 2047) goto B_a;
  if (d) goto B_b;
  if (a != 0.0) goto B_c;
  b[0] = 0;
  return a;
  label B_c:
  a = frexp(a * 18446744073709551616.0, b);
  b[0] = b[0] + -64;
  return a;
  label B_b:
  b[0] = d + -1022;
  a = f64_reinterpret_i64(
        (c & -9218868437227405313L) | 4602678819172646912L);
  label B_a:
  return a;
}

function strlen(a:ubyte_ptr):int {
  var c:int;
  var c:int;
  var c:int;
  var d:int;
  var c:int;
  var d:int;
  var d:int;
  var b:int = a;
  if (eqz(a & 3)) goto B_c;
  if (a[0]) goto B_d;
  return a - a;
  label B_d:
  b = a + 1;
  loop L_e {
    if (eqz(b & 3)) goto B_c;
    c = b[0]:ubyte;
    d = b + 1;
    b = d;
    if (eqz(c)) goto B_b;
    continue L_e;
  }
  label B_c:
  b = b + -4;
  loop L_f {
    b = b + 4;
    c = b[0]:int;
    if (eqz(((c ^ -1) & c + -16843009) & -2139062144)) continue L_f;
  }
  if (c & 255) goto B_g;
  return b - a;
  label B_g:
  loop L_h {
    c = b[1]:ubyte;
    d = b + 1;
    b = d;
    if (c) continue L_h;
    goto B_a;
  }
  label B_b:
  d = d + -1;
  label B_a:
  return d - a;
}

function fputs(a:int, b:int):int {
  var c:int = strlen(a);
  return select_if(-1, 0, c != fwrite(a, 1, c, b));
}

function abort() {
  unreachable;
  unreachable;
}

function vfprintf(a:int, b:int, c:int):int {
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var d:int = g_a - 208;
  g_a = d;
  d[51]:int = c;
  (d + 160 + 32)[0]:long = 0L;
  (d + 184)[0]:long = 0L;
  (d + 176)[0]:long = 0L;
  d[21]:long = 0L;
  d[20]:long = 0L;
  d[50]:int = c;
  if (printf_core(0, b, d + 200, d + 80, d + 160) >= 0) goto B_b;
  a = -1;
  goto B_a;
  label B_b:
  var e:int = a[0]:int;
  if (a[15]:int > 0) goto B_c;
  a[0]:int = e & -33;
  label B_c:
  if (a[11]:int) goto B_g;
  a[11]:int = 80;
  a[6]:int = 0;
  a[2]:long = 0L;
  f = a[10]:int;
  a[10]:int = d;
  goto B_f;
  label B_g:
  f = 0;
  if (a[4]:int) goto B_e;
  label B_f:
  c = -1;
  if (towrite(a)) goto B_d;
  label B_e:
  c = printf_core(a, b, d + 200, d + 80, d + 160);
  label B_d:
  b = e & 32;
  if (eqz(f)) goto B_h;
  call_indirect(a, 0, 0, a[8]:int);
  a[11]:int = 0;
  a[10]:int = f;
  a[6]:int = 0;
  a[4]:int = 0;
  f = a[5]:int;
  a[5]:int = 0;
  c = select_if(c, -1, f);
  label B_h:
  a[0]:int = (f = a[0]:int) | b;
  a = select_if(-1, c, f & 32);
  label B_a:
  g_a = d + 208;
  return a;
}

function printf_core(a:int, b:int, c:int_ptr, d:int, e:int_ptr):int {
  var t:int_ptr;
  var w:int;
  var t:int_ptr;
  var t:int_ptr;
  var t:int_ptr;
  var v:int_ptr;
  var w:int;
  var w:int;
  var t:int_ptr;
  var v:int_ptr;
  var w:int;
  var w:int;
  var w:int;
  var v:int_ptr;
  var y:int;
  var y:int;
  var t:int_ptr;
  var v:int_ptr;
  var y:int;
  var y:int;
  var w:int;
  var w:int;
  var y:int;
  var w:int;
  var w:int;
  var w:int;
  var v:int_ptr;
  var w:int;
  var w:int;
  var w:int;
  var w:int;
  var w:int;
  var w:int;
  var v:int_ptr;
  var w:int;
  var v:int_ptr;
  var aa:int_ptr;
  var aa:int_ptr;
  var w:int;
  var w:int;
  var v:int_ptr;
  var aa:int_ptr;
  var aa:int_ptr;
  var w:int;
  var x:int;
  var x:int;
  var x:int;
  var x:int;
  var t:int_ptr;
  var t:int_ptr;
  var t:int_ptr;
  var w:int;
  var w:int;
  var v:int_ptr;
  var v:int_ptr;
  var x:int;
  var ga:long;
  var da:int;
  var ga:long;
  var ga:long;
  var ga:long;
  var x:int;
  var da:int;
  var ga:long;
  var ga:long;
  var ga:long;
  var ga:long;
  var x:int;
  var v:int_ptr;
  var v:int_ptr;
  var ga:long;
  var ga:long;
  var x:int;
  var x:int;
  var ga:long;
  var ga:long;
  var ga:long;
  var ga:long;
  var ga:long;
  var ha:long;
  var ha:long;
  var t:int_ptr;
  var w:int;
  var z:byte_ptr;
  var v:int_ptr;
  var x:int;
  var x:int;
  var z:byte_ptr;
  var v:int_ptr;
  var ga:long;
  var v:int_ptr;
  var ga:long;
  var v:int_ptr;
  var v:int_ptr;
  var v:int_ptr;
  var v:int_ptr;
  var v:int_ptr;
  var t:int_ptr;
  var u:int;
  var u:int;
  var u:int;
  var w:int;
  var u:int;
  var v:int_ptr;
  var t:int_ptr;
  var v:int_ptr;
  var u:int;
  var w:int;
  var x:int;
  var v:int_ptr;
  var y:int;
  var y:int;
  var t:int_ptr;
  var w:int;
  var ba:int;
  var u:int;
  var w:int;
  var t:int_ptr;
  var t:int_ptr;
  var u:int;
  var t:int_ptr;
  var u:int;
  var u:int;
  var u:int;
  var t:int_ptr;
  var t:int_ptr;
  var u:int;
  var t:int_ptr;
  var v:int_ptr;
  var y:int;
  var y:int;
  var t:int_ptr;
  var w:int;
  var u:int;
  var t:int_ptr;
  var t:int_ptr;
  var u:int;
  var t:int_ptr;
  var y:int;
  var y:int;
  var v:int_ptr;
  var z:byte_ptr;
  var x:int;
  var x:int;
  var ja:int;
  var ja:int;
  var x:int;
  var y:int;
  var y:int;
  var u:int;
  var w:int;
  var t:int_ptr;
  var u:int;
  var t:int_ptr;
  var la:ubyte_ptr;
  var ja:int;
  var da:int;
  var x:int;
  var y:int;
  var y:int;
  var u:int;
  var w:int;
  var t:int_ptr;
  var u:int;
  var t:int_ptr;
  var y:int;
  var y:int;
  var da:int;
  var fa:int;
  var da:int;
  var fa:int;
  var v:int_ptr;
  var v:int_ptr;
  var v:int_ptr;
  var v:int_ptr;
  var ma:byte_ptr;
  var ea:int;
  var u:int;
  var u:int;
  var u:int;
  var ea:int;
  var ea:int;
  var u:int;
  var t:int_ptr;
  var ha:long;
  var ga:long;
  var ga:long;
  var t:int_ptr;
  var ga:long;
  var t:int_ptr;
  var t:int_ptr;
  var u:int;
  var t:int_ptr;
  var u:int;
  var t:int_ptr;
  var t:int_ptr;
  var t:int_ptr;
  var t:int_ptr;
  var v:int_ptr;
  var v:int_ptr;
  var t:int_ptr;
  var u:int;
  var u:int;
  var v:int_ptr;
  var w:int;
  var aa:int_ptr;
  var ba:int;
  var u:int;
  var u:int;
  var t:int_ptr;
  var t:int_ptr;
  var t:int_ptr;
  var v:int_ptr;
  var ea:int;
  var t:int_ptr;
  var fa:int;
  var u:int;
  var z:byte_ptr;
  var u:int;
  var z:byte_ptr;
  var t:int_ptr;
  var ea:int;
  var t:int_ptr;
  var t:int_ptr;
  var w:int;
  var u:int;
  var w:int;
  var u:int;
  var fa:int;
  var fa:int;
  var ea:int;
  var v:int_ptr;
  var v:int_ptr;
  var w:int;
  var v:int_ptr;
  var v:int_ptr;
  var ba:int;
  var aa:int_ptr;
  var v:int_ptr;
  var v:int_ptr;
  var w:int;
  var w:int;
  var aa:int_ptr;
  var fa:int;
  var ba:int;
  var aa:int_ptr;
  var t:int_ptr;
  var w:int;
  var aa:int_ptr;
  var w:int;
  var fa:int;
  var ba:int;
  var ka:int;
  var la:ubyte_ptr;
  var aa:int_ptr;
  var v:int_ptr;
  var aa:int_ptr;
  var w:int;
  var u:int;
  var u:int;
  var u:int;
  var t:int_ptr;
  var t:int_ptr;
  var t:int_ptr;
  var u:int;
  var u:int;
  var u:int;
  var u:int;
  var ea:int;
  var t:int_ptr;
  var t:int_ptr;
  var w:int;
  var u:int;
  var w:int;
  var aa:int_ptr;
  var w:int;
  var t:int_ptr;
  var w:int;
  var z:byte_ptr;
  var x:int;
  var u:int;
  var u:int;
  var u:int;
  var da:int;
  var x:int;
  var aa:int_ptr;
  var fa:int;
  var w:int;
  var v:int_ptr;
  var v:int_ptr;
  var v:int_ptr;
  var w:int;
  var ea:int;
  var da:int;
  var u:int;
  var aa:int_ptr;
  var z:byte_ptr;
  var da:int;
  var u:int;
  var ka:int;
  var u:int;
  var u:int;
  var u:int;
  var u:int;
  var v:int_ptr;
  var ba:int;
  var v:int_ptr;
  var v:int_ptr;
  var da:int;
  var u:int;
  var u:int;
  var ka:int;
  var u:int;
  var ka:int;
  var u:int;
  var ja:int;
  var u:int;
  var ja:int;
  var x:int;
  var x:int;
  var y:int;
  var da:int;
  var y:int;
  var da:int;
  var v:int_ptr;
  var u:int;
  var u:int;
  var la:ubyte_ptr;
  var ja:int;
  var x:int;
  var y:int;
  var da:int;
  var y:int;
  var da:int;
  var v:int_ptr;
  var u:int;
  var u:int;
  var oa:int;
  var ea:int;
  var t:int_ptr;
  var t:int_ptr;
  var ea:int;
  var ba:int;
  var v:int_ptr;
  var t:int_ptr;
  var t:int_ptr;
  var u:int;
  var t:int_ptr;
  var v:int_ptr;
  var ba:int;
  var t:int_ptr;
  var v:int_ptr;
  var ba:int;
  var t:int_ptr;
  var v:int_ptr;
  var v:int_ptr;
  var ea:int;
  var z:byte_ptr;
  var v:int_ptr;
  var w:int;
  var v:int_ptr;
  var t:int_ptr;
  var t:int_ptr;
  var t:int_ptr;
  var t:int_ptr;
  var u:int;
  var v:int_ptr;
  var v:int_ptr;
  var w:int;
  var u:int;
  var t:int_ptr;
  var u:int;
  var t:int_ptr;
  var x:int;
  var v:int_ptr;
  var aa:int_ptr;
  var ba:int;
  var ba:int;
  var aa:int_ptr;
  var x:int;
  var ea:int;
  var ea:int;
  var x:int;
  var v:int_ptr;
  var y:int;
  var y:int;
  var v:int_ptr;
  var u:int;
  var z:byte_ptr;
  var v:int_ptr;
  var y:int;
  var v:int_ptr;
  var t:int_ptr;
  var w:int;
  var u:int;
  var w:int;
  var t:int_ptr;
  var t:int_ptr;
  var u:int;
  var t:int_ptr;
  var fa:int;
  var ea:int;
  var z:byte_ptr;
  var v:int_ptr;
  var y:int;
  var v:int_ptr;
  var t:int_ptr;
  var w:int;
  var u:int;
  var w:int;
  var t:int_ptr;
  var t:int_ptr;
  var u:int;
  var t:int_ptr;
  var aa:int_ptr;
  var ba:int;
  var x:int;
  var aa:int_ptr;
  var t:int_ptr;
  var w:int;
  var ba:int;
  var u:int;
  var w:int;
  var t:int_ptr;
  var t:int_ptr;
  var u:int;
  var t:int_ptr;
  var aa:int_ptr;
  var z:byte_ptr;
  var v:int_ptr;
  var y:int;
  var v:int_ptr;
  var t:int_ptr;
  var w:int;
  var u:int;
  var t:int_ptr;
  var t:int_ptr;
  var u:int;
  var t:int_ptr;
  var w:int;
  var t:int_ptr;
  var fa:int;
  var t:int_ptr;
  var v:int_ptr;
  var u:int;
  var u:int;
  var w:int;
  var u:int;
  var u:int;
  var v:int_ptr;
  var t:int_ptr;
  var aa:int_ptr;
  var v:int_ptr;
  var v:int_ptr;
  var ba:int;
  var t:int_ptr;
  var u:int;
  var t:int_ptr;
  var ma:byte_ptr;
  var ma:byte_ptr;
  var x:int;
  var y:int;
  var da:int;
  var y:int;
  var da:int;
  var u:int;
  var t:int_ptr;
  var u:int;
  var t:int_ptr;
  var y:int;
  var da:int;
  var y:int;
  var da:int;
  var la:ubyte_ptr;
  var la:ubyte_ptr;
  var da:int;
  var v:int_ptr;
  var v:int_ptr;
  var v:int_ptr;
  var na:double;
  var t:int_ptr;
  var t:int_ptr;
  var u:int;
  var na:double;
  var ia:double;
  var na:double;
  var ia:double;
  var na:double;
  var na:double;
  var ba:int;
  var ba:int;
  var t:int_ptr;
  var t:int_ptr;
  var u:int;
  var t:int_ptr;
  var t:int_ptr;
  var u:int;
  var u:int;
  var ja:int;
  var u:int;
  var z:byte_ptr;
  var da:int;
  var u:int;
  var ba:int;
  var x:int;
  var t:int_ptr;
  var ia:double;
  var ia:double;
  var t:int_ptr;
  var w:int;
  var ia:double;
  var t:int_ptr;
  var t:int_ptr;
  var u:int;
  var v:int_ptr;
  var ia:double;
  var ia:double;
  var aa:int_ptr;
  var z:byte_ptr;
  var v:int_ptr;
  var u:int;
  var v:int_ptr;
  var t:int_ptr;
  var t:int_ptr;
  var v:int_ptr;
  var w:int;
  var v:int_ptr;
  var x:int;
  var v:int_ptr;
  var y:int;
  var y:int;
  var u:int;
  var x:int;
  var t:int_ptr;
  var u:int;
  var t:int_ptr;
  var aa:int_ptr;
  var v:int_ptr;
  var y:int;
  var y:int;
  var u:int;
  var aa:int_ptr;
  var t:int_ptr;
  var u:int;
  var t:int_ptr;
  var w:int;
  var ea:int;
  var w:int;
  var u:int;
  var w:int;
  var t:int_ptr;
  var u:int;
  var t:int_ptr;
  var z:byte_ptr;
  var ba:int;
  var v:int_ptr;
  var y:int;
  var y:int;
  var u:int;
  var w:int;
  var t:int_ptr;
  var u:int;
  var t:int_ptr;
  var y:int;
  var y:int;
  var f:int = g_a - 880;
  g_a = f;
  var g:int = f + 55;
  var h:int = -2 - f + 336;
  var i:int = f + 336 | 9;
  var j:int = f + 660;
  var k:int = f + 368 | 4;
  var l:int = f + 656;
  var m:int = f + 324 + 12;
  var n:int = 0 - f + 336;
  var o:int = f + 56;
  var p:int = 0;
  var q:int = 0;
  var r:int = 0;
  loop L_d {
    var s:int = b;
    if (r > 2147483647 - q) goto B_c;
    q = r + q;
    r = s[0]:ubyte;
    if (eqz(r)) goto B_k;
    b = s;
    loop L_l {
      r = r & 255;
      if (eqz(r)) goto B_o;
      if (r != 37) goto B_m;
      t = b;
      r = b;
      loop L_p {
        if ((r + 1)[0]:ubyte == 37) goto B_q;
        b = r;
        goto B_n;
        label B_q:
        t = t + 1;
        u = r[2]:ubyte;
        b = r + 2;
        r = b;
        if (u == 37) continue L_p;
        goto B_n;
      }
      label B_o:
      t = b;
      label B_n:
      r = t - s;
      if (r > (u = 2147483647 - q)) goto B_c;
      if (eqz(a)) goto B_r;
      if (a[0]:ubyte & 32) goto B_r;
      fwritex(s, r, a);
      label B_r:
      if (r) continue L_d;
      r = b + 1;
      v = b[1]:byte;
      w = v + -48;
      if (w <= 9) goto B_t;
      x = -1;
      goto B_s;
      label B_t:
      r = select_if(b + 3, r, t = b[2]:ubyte == 36);
      x = select_if(w, -1, t);
      p = select_if(1, p, t);
      v = (b + select_if(3, 1, t))[0]:byte;
      label B_s:
      t = 0;
      b = v + -32;
      if (b <= 31) goto B_v;
      b = r;
      goto B_u;
      label B_v:
      w = 1 << b;
      if (w & 75913) goto B_w;
      b = r;
      goto B_u;
      label B_w:
      t = 0;
      loop L_x {
        b = r + 1;
        t = w | t;
        v = r[1]:byte;
        w = v + -32;
        if (w > 31) goto B_u;
        r = b;
        w = 1 << w;
        if (w & 75913) continue L_x;
      }
      label B_u:
      if (v != 42) goto B_y;
      r = b[1]:byte + -48;
      if (r > 9) goto B_aa;
      if (b[2]:ubyte != 36) goto B_aa;
      e[r]:int = 10;
      w = b + 3;
      y = ((b[1]:byte << 3) + d + -384)[0]:int;
      p = 1;
      goto B_z;
      label B_aa:
      if (p) goto B_i;
      w = b + 1;
      if (a) goto B_ba;
      p = 0;
      y = 0;
      goto B_j;
      label B_ba:
      c[0] = (b = c[0]) + 4;
      y = b[0]:int;
      p = 0;
      label B_z:
      if (y > -1) goto B_j;
      y = 0 - y;
      t = t | 8192;
      goto B_j;
      label B_y:
      y = 0;
      r = v + -48;
      if (r <= 9) goto B_ca;
      w = b;
      goto B_j;
      label B_ca:
      y = 0;
      loop L_da {
        if (y > 214748364) goto B_ea;
        y = select_if(-1, (w = y * 10) + r, r > 2147483647 - w);
        r = b[1]:byte;
        w = b + 1;
        b = w;
        r = r + -48;
        if (r < 10) continue L_da;
        if (y < 0) goto B_c;
        goto B_j;
        label B_ea:
        r = b[1]:byte;
        y = -1;
        b = b + 1;
        r = r + -48;
        if (r < 10) continue L_da;
        goto B_c;
      }
      label B_m:
      r = b[1]:ubyte;
      b = b + 1;
      continue L_l;
    }
    label B_k:
    if (a) goto B_a;
    if (p) goto B_fa;
    q = 0;
    goto B_a;
    label B_fa:
    b = e[1];
    if (b) goto B_ha;
    b = 1;
    goto B_ga;
    label B_ha:
    pop_arg(d + 8, b, c);
    b = e[2];
    if (b) goto B_ia;
    b = 2;
    goto B_ga;
    label B_ia:
    pop_arg(d + 16, b, c);
    b = e[3];
    if (b) goto B_ja;
    b = 3;
    goto B_ga;
    label B_ja:
    pop_arg(d + 24, b, c);
    b = e[4];
    if (b) goto B_ka;
    b = 4;
    goto B_ga;
    label B_ka:
    pop_arg(d + 32, b, c);
    b = e[5];
    if (b) goto B_la;
    b = 5;
    goto B_ga;
    label B_la:
    pop_arg(d + 40, b, c);
    b = e[6];
    if (b) goto B_ma;
    b = 6;
    goto B_ga;
    label B_ma:
    pop_arg(d + 48, b, c);
    b = e[7];
    if (b) goto B_na;
    b = 7;
    goto B_ga;
    label B_na:
    pop_arg(d + 56, b, c);
    b = e[8];
    if (b) goto B_oa;
    b = 8;
    goto B_ga;
    label B_oa:
    pop_arg(d + 64, b, c);
    b = e[9];
    if (b) goto B_pa;
    b = 9;
    goto B_ga;
    label B_pa:
    pop_arg(d + 72, b, c);
    q = 1;
    goto B_a;
    label B_ga:
    b = b << 2;
    loop L_qa {
      if ((e + b)[0]:int) goto B_i;
      b = b + 4;
      if (b != 40) continue L_qa;
    }
    q = 1;
    goto B_a;
    label B_j:
    r = 0;
    v = -1;
    if (w[0]:ubyte == 46) goto B_sa;
    b = w;
    z = 0;
    goto B_ra;
    label B_sa:
    v = w[1]:byte;
    if (v != 42) goto B_ta;
    b = w[2]:byte + -48;
    if (b > 9) goto B_va;
    if (w[3]:ubyte != 36) goto B_va;
    e[b]:int = 10;
    b = w + 4;
    v = ((w[2]:byte << 3) + d + -384)[0]:int;
    goto B_ua;
    label B_va:
    if (p) goto B_i;
    b = w + 2;
    if (a) goto B_wa;
    v = 0;
    goto B_ua;
    label B_wa:
    c[0] = (w = c[0]) + 4;
    v = w[0]:int;
    label B_ua:
    z = (v ^ -1) >> 31;
    goto B_ra;
    label B_ta:
    b = w + 1;
    aa = v + -48;
    if (aa <= 9) goto B_xa;
    z = 1;
    v = 0;
    goto B_ra;
    label B_xa:
    ba = 0;
    w = b;
    loop L_ya {
      v = -1;
      if (ba > 214748364) goto B_za;
      v = select_if(-1, (b = ba * 10) + aa, aa > 2147483647 - b);
      label B_za:
      z = 1;
      aa = w[1]:byte;
      b = w + 1;
      w = b;
      ba = v;
      aa = aa + -48;
      if (aa < 10) continue L_ya;
    }
    label B_ra:
    loop L_ab {
      w = r;
      r = b[0]:byte + -65;
      if (r > 57) goto B_i;
      b = b + 1;
      r = (w * 58 + r + 67232)[0]:ubyte;
      if (r + -1 < 8) continue L_ab;
    }
    if (eqz(r)) goto B_i;
    if (r != 27) goto B_h;
    if (x <= -1) goto B_g;
    label B_i:
    0[19722]:int = 28;
    goto B_b;
    label B_h:
    if (x < 0) goto B_f;
    e[x]:int = r;
    f[7]:long = d[x]:long;
    label B_g:
    r = 0;
    if (eqz(a)) continue L_d;
    goto B_e;
    label B_f:
    if (a) goto B_bb;
    q = 0;
    goto B_a;
    label B_bb:
    pop_arg(f + 56, r, c);
    label B_e:
    var ca:ubyte_ptr = t & -65537;
    x = select_if(ca, t, t & 8192);
    r = (b + -1)[0]:byte;
    da = select_if(select_if(r & -33, r, (r & 15) == 3), r, w);
    br_table[B_ib, B_hb, B_lb, B_hb, B_ib, B_ib, B_ib, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_mb, B_hb, B_hb, B_hb, B_hb, B_vb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_ib, B_hb, B_qb, B_tb, B_ib, B_ib, B_ib, B_hb, B_tb, B_hb, B_hb, B_hb, B_pb, B_xb, B_ub, B_wb, B_hb, B_hb, B_ob, B_hb, B_yb, B_hb, B_hb, B_vb, ..B_hb](
      da + -65);
    label B_yb:
    ea = 0;
    fa = 67206;
    ga = f[7]:long;
    goto B_sb;
    label B_xb:
    r = 0;
    br_table[B_fc, B_ec, B_dc, B_cc, B_bc, L_d, B_ac, B_zb, ..L_d](
      w & 255)
    label B_fc:
    (f[14]:int)[0]:int = q;
    continue L_d;
    label B_ec:
    (f[14]:int)[0]:int = q;
    continue L_d;
    label B_dc:
    (f[14]:int)[0]:long = i64_extend_i32_s(q);
    continue L_d;
    label B_cc:
    (f[14]:int)[0]:short = q;
    continue L_d;
    label B_bc:
    (f[14]:int)[0]:byte = q;
    continue L_d;
    label B_ac:
    (f[14]:int)[0]:int = q;
    continue L_d;
    label B_zb:
    (f[14]:int)[0]:long = i64_extend_i32_s(q);
    continue L_d;
    label B_wb:
    v = select_if(v, 8, v > 8);
    x = x | 8;
    da = 120;
    label B_vb:
    ea = 0;
    fa = 67206;
    ga = f[7]:long;
    if (eqz(eqz(ga))) goto B_gc;
    s = o;
    goto B_rb;
    label B_gc:
    r = da & 32;
    s = o;
    loop L_hc {
      s = s + -1;
      s[0]:byte = ((i32_wrap_i64(ga) & 15) + 67840)[0]:ubyte | r;
      ga = ga >> 4L;
      if (ga != 0L) continue L_hc;
    }
    if (eqz(x & 8)) goto B_rb;
    if (eqz(f[7]:long)) goto B_rb;
    fa = (da >> 4) + 67206;
    ea = 2;
    goto B_rb;
    label B_ub:
    s = o;
    ga = f[7]:long;
    if (eqz(ga)) goto B_ic;
    s = o;
    loop L_jc {
      s = s + -1;
      s[0]:byte = (i32_wrap_i64(ga) & 7) | 48;
      ga = ga >> 3L;
      if (ga != 0L) continue L_jc;
    }
    label B_ic:
    ea = 0;
    fa = 67206;
    if (eqz(x & 8)) goto B_rb;
    v = select_if(v, (r = o - s) + 1, v > r);
    goto B_rb;
    label B_tb:
    ga = f[7]:long;
    if (ga > -1L) goto B_kc;
    f[7]:long = (ga = 0L - ga);
    ea = 1;
    fa = 67206;
    goto B_sb;
    label B_kc:
    if (eqz(x & 2048)) goto B_lc;
    ea = 1;
    fa = 67207;
    goto B_sb;
    label B_lc:
    fa = select_if(67208, 67206, ea = x & 1);
    label B_sb:
    if (ga >= 4294967296L) goto B_nc;
    ha = ga;
    s = o;
    goto B_mc;
    label B_nc:
    s = o;
    loop L_oc {
      s = s + -1;
      s[0]:byte = i32_wrap_i64(ga - (ha = ga / 10L) * 10L) | 48;
      r = ga > 42949672959L;
      ga = ha;
      if (r) continue L_oc;
    }
    label B_mc:
    r = i32_wrap_i64(ha);
    if (eqz(r)) goto B_rb;
    loop L_pc {
      s = s + -1;
      s[0]:byte = r - (t = r / 10) * 10 | 48;
      w = r > 9;
      r = t;
      if (w) continue L_pc;
    }
    label B_rb:
    if (eqz(z)) goto B_qc;
    if (v < 0) goto B_c;
    label B_qc:
    ca = select_if(x & -65537, x, z);
    ga = f[7]:long;
    if (v) goto B_rc;
    ba = 0;
    if (eqz(eqz(ga))) goto B_rc;
    s = o;
    r = o;
    goto B_gb;
    label B_rc:
    ba = select_if(v, r = o - s + eqz(ga), v > r);
    r = o;
    goto B_gb;
    label B_qb:
    f[55]:byte = f[7]:long;
    ea = 0;
    fa = 67206;
    ba = 1;
    s = g;
    r = o;
    goto B_gb;
    label B_pb:
    s = strerror(0[19722]:int);
    goto B_nb;
    label B_ob:
    r = f[14]:int;
    s = select_if(r, 67216, r);
    label B_nb:
    ea = 0;
    r = s + (ba = strnlen(s, select_if(2147483647, v, v < 0)));
    fa = 67206;
    if (v > -1) goto B_gb;
    if (eqz(r[0]:ubyte)) goto B_gb;
    goto B_c;
    label B_mb:
    s = f[14]:int;
    if (v) goto B_kb;
    r = 0;
    goto B_jb;
    label B_lb:
    f[3]:int = 0;
    f[2]:int = f[7]:long;
    f[14]:int = f + 8;
    v = -1;
    s = f + 8;
    label B_kb:
    r = 0;
    t = s;
    loop L_tc {
      u = t[0];
      if (eqz(u)) goto B_sc;
      u = wctomb(f + 4, u);
      w = u < 0;
      if (w) goto B_uc;
      if (u > v - r) goto B_uc;
      t = t + 4;
      if (v > (r = u + r)) continue L_tc;
      goto B_sc;
      label B_uc:
    }
    if (w) goto B_b;
    label B_sc:
    if (r < 0) goto B_c;
    label B_jb:
    v = x & 73728;
    if (v) goto B_vc;
    if (y <= r) goto B_vc;
    memset(f + 64, 32, select_if(t = y - r, 256, ba = t < 256));
    w = a[0]:int;
    u = eqz(w & 32);
    if (ba) goto B_wc;
    loop L_xc {
      if (eqz(u & 1)) goto B_yc;
      fwritex(f + 64, 256, a);
      w = a[0]:int;
      label B_yc:
      u = eqz(w & 32);
      t = t + -256;
      if (t > 255) continue L_xc;
    }
    label B_wc:
    if (eqz(u)) goto B_vc;
    fwritex(f + 64, t, a);
    label B_vc:
    if (eqz(r)) goto B_zc;
    t = 0;
    loop L_ad {
      u = s[0]:int;
      if (eqz(u)) goto B_zc;
      u = wctomb(f + 4, u);
      t = u + t;
      if (t > r) goto B_zc;
      if (a[0]:ubyte & 32) goto B_bd;
      fwritex(f + 4, u, a);
      label B_bd:
      s = s + 4;
      if (t < r) continue L_ad;
    }
    label B_zc:
    if (v != 8192) goto B_cd;
    if (y <= r) goto B_cd;
    memset(f + 64, 32, select_if(t = y - r, 256, w = t < 256));
    s = a[0]:int;
    u = eqz(s & 32);
    if (w) goto B_dd;
    loop L_ed {
      if (eqz(u & 1)) goto B_fd;
      fwritex(f + 64, 256, a);
      s = a[0]:int;
      label B_fd:
      u = eqz(s & 32);
      t = t + -256;
      if (t > 255) continue L_ed;
    }
    label B_dd:
    if (eqz(u)) goto B_cd;
    fwritex(f + 64, t, a);
    label B_cd:
    r = select_if(y, r, y > r);
    continue L_d;
    label B_ib:
    if (v > -1) goto B_gd;
    if (z) goto B_c;
    label B_gd:
    ia = f[7]:double;
    f[91]:int = 0;
    if (i64_reinterpret_f64(ia) > -1L) goto B_id;
    ia = -(ia);
    ja = 1;
    ka = 0;
    la = 67856;
    goto B_hd;
    label B_id:
    if (eqz(x & 2048)) goto B_jd;
    ja = 1;
    ka = 0;
    la = 67859;
    goto B_hd;
    label B_jd:
    la = select_if(67862, 67857, ja = x & 1);
    ka = eqz(ja);
    label B_hd:
    if (abs(ia) < inf) goto B_kd;
    s = ja + 3;
    if (x & 8192) goto B_ld;
    if (y <= s) goto B_ld;
    memset(f + 64, 32, select_if(r = y - s, 256, w = r < 256));
    u = a[0]:int;
    t = eqz(u & 32);
    if (w) goto B_md;
    loop L_nd {
      if (eqz(t & 1)) goto B_od;
      fwritex(f + 64, 256, a);
      u = a[0]:int;
      label B_od:
      t = eqz(u & 32);
      r = r + -256;
      if (r > 255) continue L_nd;
    }
    label B_md:
    if (eqz(t)) goto B_ld;
    fwritex(f + 64, r, a);
    label B_ld:
    r = a[0]:int;
    if (r & 32) goto B_pd;
    fwritex(la, ja, a);
    r = a[0]:int;
    label B_pd:
    if (r & 32) goto B_qd;
    fwritex(select_if(select_if(67883, 67887, r = da & 32),
                      select_if(67875, 67879, r),
                      ia != ia),
            3,
            a);
    label B_qd:
    if ((x & 73728) != 8192) goto B_rd;
    if (y <= s) goto B_rd;
    memset(f + 64, 32, select_if(r = y - s, 256, w = r < 256));
    u = a[0]:int;
    t = eqz(u & 32);
    if (w) goto B_sd;
    loop L_td {
      if (eqz(t & 1)) goto B_ud;
      fwritex(f + 64, 256, a);
      u = a[0]:int;
      label B_ud:
      t = eqz(u & 32);
      r = r + -256;
      if (r > 255) continue L_td;
    }
    label B_sd:
    if (eqz(t)) goto B_rd;
    fwritex(f + 64, r, a);
    label B_rd:
    r = select_if(y, s, y > s);
    goto B_cb;
    label B_kd:
    ia = frexp(ia, f + 364);
    ia = ia + ia;
    if (ia == 0.0) goto B_xd;
    f[91]:int = (r = f[91]:int) + -1;
    fa = da | 32;
    if (fa != 97) goto B_wd;
    goto B_db;
    label B_xd:
    fa = da | 32;
    if (fa == 97) goto B_db;
    ca = select_if(6, v, v < 0);
    s = f[91]:int;
    goto B_vd;
    label B_wd:
    f[91]:int = (s = r + -29);
    ca = select_if(6, v, v < 0);
    ia = ia * 268435456.0;
    label B_vd:
    ea = select_if(f + 368, l, ma = s < 0);
    u = ea;
    loop L_yd {
      if (eqz(ia < 4294967296.0 & ia >= 0.0)) goto B_ae;
      r = i32_trunc_f64_u(ia);
      goto B_zd;
      label B_ae:
      r = 0;
      label B_zd:
      u[0]:int = r;
      u = u + 4;
      ia = (ia - f64_convert_i32_u(r)) * 1000000000.0;
      if (ia != 0.0) continue L_yd;
    }
    if (s >= 1) goto B_ce;
    r = u;
    t = ea;
    goto B_be;
    label B_ce:
    t = ea;
    loop L_de {
      s = select_if(s, 29, s < 29);
      r = u + -4;
      if (r < t) goto B_ee;
      ha = i64_extend_i32_u(s);
      ga = 0L;
      loop L_fe {
        r[0]:int = 
          (ga = (r[0]:uint << ha) + (ga & 4294967295L)) - 
          (ga = ga / 1000000000L) * 1000000000L;
        r = r + -4;
        if (r >= t) continue L_fe;
      }
      r = i32_wrap_i64(ga);
      if (eqz(r)) goto B_ee;
      t = t + -4;
      t[0] = r;
      label B_ee:
      loop L_he {
        r = u;
        if (r <= t) goto B_ge;
        u = r + -4;
        if (eqz(u[0]:int)) continue L_he;
      }
      label B_ge:
      f[91]:int = (s = f[91]:int - s);
      u = r;
      if (s > 0) continue L_de;
    }
    label B_be:
    if (s > -1) goto B_ie;
    z = (ca + 25) / 9 + 1;
    loop L_je {
      v = select_if(9, 0 - s, s < -9);
      if (t < r) goto B_le;
      t = select_if(t, t + 4, t[0]);
      goto B_ke;
      label B_le:
      ba = 1000000000 >> v;
      aa = -1 << v ^ -1;
      s = 0;
      u = t;
      loop L_me {
        u[0]:int = ((w = u[0]:int) >> v) + s;
        s = (w & aa) * ba;
        u = u + 4;
        if (u < r) continue L_me;
      }
      t = select_if(t, t + 4, t[0]);
      if (eqz(s)) goto B_ke;
      r[0]:int = s;
      r = r + 4;
      label B_ke:
      f[91]:int = (s = f[91]:int + v);
      u = select_if(ea, t, fa == 102);
      r = select_if(u + (z << 2), r, r - u >> 2 > z);
      if (s < 0) continue L_je;
    }
    label B_ie:
    u = 0;
    if (t >= r) goto B_ne;
    u = (ea - t >> 2) * 9;
    w = t[0];
    if (w < 10) goto B_ne;
    s = 10;
    loop L_oe {
      u = u + 1;
      if (w >= (s = s * 10)) continue L_oe;
    }
    label B_ne:
    s = ca - select_if(0, u, fa == 102) - (ca != 0 & (z = fa == 103));
    if (s >= (r - ea >> 2) * 9 + -9) goto B_pe;
    s = s + 9216;
    v = s / 9;
    ma = (v << 2) + select_if(k, j, ma);
    aa = ma + -4096;
    w = 10;
    s = s - v * 9;
    if (s > 7) goto B_qe;
    s = s + -8;
    w = 10;
    loop L_re {
      w = w * 10;
      v = s + 1;
      ba = v >= s;
      s = v;
      if (ba) continue L_re;
    }
    label B_qe:
    v = aa[0];
    s = v - (ba = v / w) * w;
    fa = aa + 4;
    if (fa != r) goto B_te;
    if (eqz(s)) goto B_se;
    label B_te:
    if (ba & 1) goto B_ve;
    ia = 9007199254740992.0;
    if (aa <= t) goto B_ue;
    if (w != 1000000000) goto B_ue;
    if (eqz((aa + -4)[0]:ubyte & 1)) goto B_ue;
    label B_ve:
    ia = 9007199254740994.0;
    label B_ue:
    na = 
      select_if(
        0.5,
        select_if(select_if(1.0, 1.5, s == (ba = w >> 1)), 1.5, fa == r),
        s < ba);
    if (ka) goto B_we;
    if (la[0] != 45) goto B_we;
    na = -(na);
    ia = -(ia);
    label B_we:
    aa[0] = (s = v - s);
    if (ia + na == ia) goto B_se;
    aa[0] = (u = s + w);
    if (u < 1000000000) goto B_xe;
    u = ma + -4100;
    loop L_ye {
      (u + 4)[0]:int = 0;
      if (u >= t) goto B_ze;
      t = t + -4;
      t[0] = 0;
      label B_ze:
      u[0]:int = (s = u[0]:int + 1);
      u = u + -4;
      if (s > 999999999) continue L_ye;
    }
    aa = u + 4;
    label B_xe:
    u = (ea - t >> 2) * 9;
    w = t[0];
    if (w < 10) goto B_se;
    s = 10;
    loop L_af {
      u = u + 1;
      if (w >= (s = s * 10)) continue L_af;
    }
    label B_se:
    s = aa + 4;
    r = select_if(s, r, r > s);
    label B_pe:
    loop L_cf {
      w = r;
      if (w > t) goto B_df;
      fa = 0;
      goto B_bf;
      label B_df:
      r = w + -4;
      if (eqz(r[0]:int)) continue L_cf;
    }
    fa = 1;
    label B_bf:
    if (z) goto B_ff;
    aa = x & 8;
    goto B_ef;
    label B_ff:
    ca = 
      select_if(u ^ -1, -1, s = (r = select_if(ca, 1, ca)) > u & u > -5) + 
      r;
    da = select_if(-1, -2, s) + da;
    aa = x & 8;
    if (aa) goto B_ef;
    r = 9;
    if (eqz(fa)) goto B_gf;
    v = (w + -4)[0]:int;
    if (eqz(v)) goto B_gf;
    r = 0;
    if (v % 10) goto B_gf;
    s = 10;
    r = 0;
    loop L_hf {
      r = r + 1;
      if (eqz(v % (s = s * 10))) continue L_hf;
    }
    label B_gf:
    s = (w - ea >> 2) * 9 + -9;
    if ((da & -33) != 70) goto B_if;
    aa = 0;
    ca = select_if(ca, r = select_if(r = s - r, 0, r > 0), ca < r);
    goto B_ef;
    label B_if:
    aa = 0;
    ca = select_if(ca, r = select_if(r = s + u - r, 0, r > 0), ca < r);
    label B_ef:
    r = -1;
    if (ca > select_if(2147483645, 2147483646, z = ca | aa)) goto B_cb;
    ka = ca + (z != 0) + 1;
    oa = (da & -33) != 70;
    if (oa) goto B_kf;
    if (u > 2147483647 - ka) goto B_cb;
    u = select_if(u, 0, u > 0);
    goto B_jf;
    label B_kf:
    s = m;
    r = u + (r = u >> 31) ^ r;
    if (eqz(r)) goto B_lf;
    loop L_mf {
      s = s + -1;
      s[0]:byte = r - (v = r / 10) * 10 | 48;
      ba = r > 9;
      r = v;
      if (ba) continue L_mf;
    }
    label B_lf:
    if (m - s > 1) goto B_nf;
    r = s + -1;
    loop L_of {
      r[0]:byte = 48;
      s = m - r;
      v = r + -1;
      r = v;
      if (s < 2) continue L_of;
    }
    s = v + 1;
    label B_nf:
    ma = s + -2;
    ma[0] = da;
    r = -1;
    (s + -1)[0]:byte = select_if(45, 43, u < 0);
    u = m - ma;
    if (u > 2147483647 - ka) goto B_cb;
    label B_jf:
    r = -1;
    u = u + ka;
    if (u > (ja ^ 2147483647)) goto B_cb;
    da = u + ja;
    x = x & 73728;
    if (x) goto B_pf;
    if (y <= da) goto B_pf;
    memset(f + 64, 32, select_if(r = y - da, 256, v = r < 256));
    s = a[0]:int;
    u = eqz(s & 32);
    if (v) goto B_qf;
    loop L_rf {
      if (eqz(u & 1)) goto B_sf;
      fwritex(f + 64, 256, a);
      s = a[0]:int;
      label B_sf:
      u = eqz(s & 32);
      r = r + -256;
      if (r > 255) continue L_rf;
    }
    label B_qf:
    if (eqz(u)) goto B_pf;
    fwritex(f + 64, r, a);
    label B_pf:
    if (a[0]:ubyte & 32) goto B_tf;
    fwritex(la, ja, a);
    label B_tf:
    if (x != 65536) goto B_uf;
    if (y <= da) goto B_uf;
    memset(f + 64, 48, select_if(r = y - da, 256, v = r < 256));
    s = a[0]:int;
    u = eqz(s & 32);
    if (v) goto B_vf;
    loop L_wf {
      if (eqz(u & 1)) goto B_xf;
      fwritex(f + 64, 256, a);
      s = a[0]:int;
      label B_xf:
      u = eqz(s & 32);
      r = r + -256;
      if (r > 255) continue L_wf;
    }
    label B_vf:
    if (eqz(u)) goto B_uf;
    fwritex(f + 64, r, a);
    label B_uf:
    if (oa) goto B_fb;
    ba = select_if(ea, t, t > ea);
    v = ba;
    loop L_yf {
      r = v[0];
      if (eqz(r)) goto B_cg;
      t = 0;
      loop L_dg {
        (f + 336 + t + 8)[0]:byte = r - (u = r / 10) * 10 | 48;
        t = t + -1;
        s = r > 9;
        r = u;
        if (s) continue L_dg;
      }
      r = f + 336 + t + 9;
      if (v == ba) goto B_eg;
      if (r <= f + 336) goto B_zf;
      goto B_ag;
      label B_eg:
      if (t) goto B_zf;
      goto B_bg;
      label B_cg:
      t = 0;
      r = i;
      if (v != ba) goto B_ag;
      label B_bg:
      r = r + -1;
      r[0]:byte = 48;
      goto B_zf;
      label B_ag:
      memset(f + 336, 48, t + 9);
      r = f + 336;
      label B_zf:
      if (a[0]:ubyte & 32) goto B_fg;
      fwritex(r, i - r, a);
      label B_fg:
      v = v + 4;
      if (v <= ea) continue L_yf;
    }
    if (eqz(z)) goto B_gg;
    if (a[0]:ubyte & 32) goto B_gg;
    fwritex(67891, 1, a);
    label B_gg:
    if (ca >= 1) goto B_ig;
    r = ca;
    goto B_hg;
    label B_ig:
    if (v < w) goto B_jg;
    r = ca;
    goto B_hg;
    label B_jg:
    loop L_kg {
      r = i;
      t = v[0];
      if (eqz(t)) goto B_mg;
      r = i;
      loop L_ng {
        r = r + -1;
        r[0]:byte = t - (u = t / 10) * 10 | 48;
        s = t > 9;
        t = u;
        if (s) continue L_ng;
      }
      if (r <= f + 336) goto B_lg;
      label B_mg:
      memset(f + 336, 48, r + n);
      loop L_og {
        r = r + -1;
        if (r > f + 336) continue L_og;
      }
      label B_lg:
      if (a[0]:ubyte & 32) goto B_pg;
      fwritex(r, select_if(ca, 9, ca < 9), a);
      label B_pg:
      r = ca + -9;
      if (ca < 10) goto B_hg;
      ca = r;
      v = v + 4;
      if (v < w) continue L_kg;
    }
    label B_hg:
    if (r < 1) goto B_eb;
    memset(f + 64, 48, select_if(r, 256, s = r < 256));
    u = a[0]:int;
    t = eqz(u & 32);
    if (s) goto B_qg;
    loop L_rg {
      if (eqz(t & 1)) goto B_sg;
      fwritex(f + 64, 256, a);
      u = a[0]:int;
      label B_sg:
      t = eqz(u & 32);
      r = r + -256;
      if (r > 255) continue L_rg;
    }
    label B_qg:
    if (eqz(t)) goto B_eb;
    fwritex(f + 64, r, a);
    goto B_eb;
    label B_hb:
    ea = 0;
    fa = 67206;
    r = o;
    ca = x;
    ba = v;
    label B_gb:
    aa = r - s;
    x = select_if(aa, ba, ba < aa);
    if (x > 2147483647 - ea) goto B_c;
    v = ea + x;
    r = select_if(v, y, y < v);
    if (r > u) goto B_c;
    z = ca & 73728;
    if (z) goto B_tg;
    if (v >= y) goto B_tg;
    memset(f + 64, 32, select_if(t = r - v, 256, ca = t < 256));
    w = a[0]:int;
    u = eqz(w & 32);
    if (ca) goto B_ug;
    loop L_vg {
      if (eqz(u & 1)) goto B_wg;
      fwritex(f + 64, 256, a);
      w = a[0]:int;
      label B_wg:
      u = eqz(w & 32);
      t = t + -256;
      if (t > 255) continue L_vg;
    }
    label B_ug:
    if (eqz(u)) goto B_tg;
    fwritex(f + 64, t, a);
    label B_tg:
    if (a[0]:ubyte & 32) goto B_xg;
    fwritex(fa, ea, a);
    label B_xg:
    if (z != 65536) goto B_yg;
    if (v >= y) goto B_yg;
    memset(f + 64, 48, select_if(t = r - v, 256, ca = t < 256));
    w = a[0]:int;
    u = eqz(w & 32);
    if (ca) goto B_zg;
    loop L_ah {
      if (eqz(u & 1)) goto B_bh;
      fwritex(f + 64, 256, a);
      w = a[0]:int;
      label B_bh:
      u = eqz(w & 32);
      t = t + -256;
      if (t > 255) continue L_ah;
    }
    label B_zg:
    if (eqz(u)) goto B_yg;
    fwritex(f + 64, t, a);
    label B_yg:
    if (aa >= ba) goto B_ch;
    memset(f + 64, 48, select_if(t = x - aa, 256, ba = t < 256));
    w = a[0]:int;
    u = eqz(w & 32);
    if (ba) goto B_dh;
    loop L_eh {
      if (eqz(u & 1)) goto B_fh;
      fwritex(f + 64, 256, a);
      w = a[0]:int;
      label B_fh:
      u = eqz(w & 32);
      t = t + -256;
      if (t > 255) continue L_eh;
    }
    label B_dh:
    if (eqz(u)) goto B_ch;
    fwritex(f + 64, t, a);
    label B_ch:
    if (a[0]:ubyte & 32) goto B_gh;
    fwritex(s, aa, a);
    label B_gh:
    if (z != 8192) continue L_d;
    if (v >= y) continue L_d;
    memset(f + 64, 32, select_if(t = r - v, 256, w = t < 256));
    s = a[0]:int;
    u = eqz(s & 32);
    if (w) goto B_hh;
    loop L_ih {
      if (eqz(u & 1)) goto B_jh;
      fwritex(f + 64, 256, a);
      s = a[0]:int;
      label B_jh:
      u = eqz(s & 32);
      t = t + -256;
      if (t > 255) continue L_ih;
    }
    label B_hh:
    if (eqz(u)) continue L_d;
    fwritex(f + 64, t, a);
    continue L_d;
    label B_fb:
    if (ca < 0) goto B_kh;
    ba = select_if(w, t + 4, fa);
    v = t;
    loop L_lh {
      s = i;
      r = v[0];
      if (eqz(r)) goto B_nh;
      u = 0;
      loop L_oh {
        (f + 336 + u + 8)[0]:byte = r - (s = r / 10) * 10 | 48;
        u = u + -1;
        w = r > 9;
        r = s;
        if (w) continue L_oh;
      }
      s = f + 336 + u + 9;
      if (u) goto B_mh;
      label B_nh:
      s = s + -1;
      s[0]:byte = 48;
      label B_mh:
      if (v == t) goto B_qh;
      if (s <= f + 336) goto B_ph;
      memset(f + 336, 48, s + n);
      loop L_rh {
        s = s + -1;
        if (s > f + 336) continue L_rh;
        goto B_ph;
      }
      label B_qh:
      if (a[0]:ubyte & 32) goto B_sh;
      fwritex(s, 1, a);
      label B_sh:
      s = s + 1;
      if (aa) goto B_th;
      if (ca < 1) goto B_ph;
      label B_th:
      if (a[0]:ubyte & 32) goto B_ph;
      fwritex(67891, 1, a);
      label B_ph:
      r = i - s;
      if (a[0]:ubyte & 32) goto B_uh;
      fwritex(s, select_if(r, ca, ca > r), a);
      label B_uh:
      ca = ca - r;
      v = v + 4;
      if (v >= ba) goto B_vh;
      if (ca > -1) continue L_lh;
      label B_vh:
    }
    if (ca < 1) goto B_kh;
    memset(f + 64, 48, select_if(ca, 256, u = ca < 256));
    t = a[0]:int;
    r = eqz(t & 32);
    if (u) goto B_wh;
    loop L_xh {
      if (eqz(r & 1)) goto B_yh;
      fwritex(f + 64, 256, a);
      t = a[0]:int;
      label B_yh:
      r = eqz(t & 32);
      ca = ca + -256;
      if (ca > 255) continue L_xh;
    }
    label B_wh:
    if (eqz(r)) goto B_kh;
    fwritex(f + 64, ca, a);
    label B_kh:
    if (a[0]:ubyte & 32) goto B_eb;
    fwritex(ma, m - ma, a);
    label B_eb:
    if (x != 8192) goto B_zh;
    if (y <= da) goto B_zh;
    memset(f + 64, 32, select_if(r = y - da, 256, s = r < 256));
    u = a[0]:int;
    t = eqz(u & 32);
    if (s) goto B_ai;
    loop L_bi {
      if (eqz(t & 1)) goto B_ci;
      fwritex(f + 64, 256, a);
      u = a[0]:int;
      label B_ci:
      t = eqz(u & 32);
      r = r + -256;
      if (r > 255) continue L_bi;
    }
    label B_ai:
    if (eqz(t)) goto B_zh;
    fwritex(f + 64, r, a);
    label B_zh:
    r = select_if(y, da, y > da);
    goto B_cb;
    label B_db:
    ca = select_if(la + 9, la, w = da & 32);
    if (v > 11) goto B_di;
    if (eqz(12 - v)) goto B_di;
    r = v + -12;
    na = 16.0;
    loop L_ei {
      na = na * 16.0;
      t = r + 1;
      u = t >= r;
      r = t;
      if (u) continue L_ei;
    }
    if (ca[0] != 45) goto B_fi;
    ia = -(na + -(ia) - na);
    goto B_di;
    label B_fi:
    ia = ia + na - na;
    label B_di:
    u = m;
    ba = f[91]:int;
    r = ba + (r = ba >> 31) ^ r;
    if (eqz(r)) goto B_hi;
    t = 0;
    loop L_ii {
      (f + 324 + t + 11)[0]:byte = r - (u = r / 10) * 10 | 48;
      t = t + -1;
      s = r > 9;
      r = u;
      if (s) continue L_ii;
    }
    u = f + 324 + t + 12;
    if (t) goto B_gi;
    label B_hi:
    u = u + -1;
    u[0]:byte = 48;
    label B_gi:
    aa = ja | 2;
    z = u + -2;
    z[0] = da + 15;
    (u + -1)[0]:byte = select_if(45, 43, ba < 0);
    u = x & 8;
    t = f + 336;
    loop L_ji {
      r = t;
      if (eqz(abs(ia) < 2147483648.0)) goto B_li;
      t = i32_trunc_f64_s(ia);
      goto B_ki;
      label B_li:
      t = -2147483648;
      label B_ki:
      r[0]:byte = (t + 67840)[0]:ubyte | w;
      ia = (ia - f64_convert_i32_s(t)) * 16.0;
      t = r + 1;
      if (t - f + 336 != 1) goto B_mi;
      if (u) goto B_ni;
      if (v > 0) goto B_ni;
      if (ia == 0.0) goto B_mi;
      label B_ni:
      r[1]:byte = 46;
      t = r + 2;
      label B_mi:
      if (ia != 0.0) continue L_ji;
    }
    r = -1;
    if (2147483645 - (u = aa + (ba = m - z)) < v) goto B_cb;
    s = 
      u + 
      (ea = select_if(select_if(v + 2, w = t - f + 336, h + t < v), w, v));
    v = x & 73728;
    if (v) goto B_oi;
    if (y <= s) goto B_oi;
    memset(f + 64, 32, select_if(r = y - s, 256, x = r < 256));
    u = a[0]:int;
    t = eqz(u & 32);
    if (x) goto B_pi;
    loop L_qi {
      if (eqz(t & 1)) goto B_ri;
      fwritex(f + 64, 256, a);
      u = a[0]:int;
      label B_ri:
      t = eqz(u & 32);
      r = r + -256;
      if (r > 255) continue L_qi;
    }
    label B_pi:
    if (eqz(t)) goto B_oi;
    fwritex(f + 64, r, a);
    label B_oi:
    if (a[0]:ubyte & 32) goto B_si;
    fwritex(ca, aa, a);
    label B_si:
    if (v != 65536) goto B_ti;
    if (y <= s) goto B_ti;
    memset(f + 64, 48, select_if(r = y - s, 256, aa = r < 256));
    u = a[0]:int;
    t = eqz(u & 32);
    if (aa) goto B_ui;
    loop L_vi {
      if (eqz(t & 1)) goto B_wi;
      fwritex(f + 64, 256, a);
      u = a[0]:int;
      label B_wi:
      t = eqz(u & 32);
      r = r + -256;
      if (r > 255) continue L_vi;
    }
    label B_ui:
    if (eqz(t)) goto B_ti;
    fwritex(f + 64, r, a);
    label B_ti:
    if (a[0]:ubyte & 32) goto B_xi;
    fwritex(f + 336, w, a);
    label B_xi:
    r = ea - w;
    if (r < 1) goto B_yi;
    memset(f + 64, 48, select_if(r, 256, w = r < 256));
    u = a[0]:int;
    t = eqz(u & 32);
    if (w) goto B_zi;
    loop L_aj {
      if (eqz(t & 1)) goto B_bj;
      fwritex(f + 64, 256, a);
      u = a[0]:int;
      label B_bj:
      t = eqz(u & 32);
      r = r + -256;
      if (r > 255) continue L_aj;
    }
    label B_zi:
    if (eqz(t)) goto B_yi;
    fwritex(f + 64, r, a);
    label B_yi:
    if (a[0]:ubyte & 32) goto B_cj;
    fwritex(z, ba, a);
    label B_cj:
    if (v != 8192) goto B_dj;
    if (y <= s) goto B_dj;
    memset(f + 64, 32, select_if(r = y - s, 256, w = r < 256));
    u = a[0]:int;
    t = eqz(u & 32);
    if (w) goto B_ej;
    loop L_fj {
      if (eqz(t & 1)) goto B_gj;
      fwritex(f + 64, 256, a);
      u = a[0]:int;
      label B_gj:
      t = eqz(u & 32);
      r = r + -256;
      if (r > 255) continue L_fj;
    }
    label B_ej:
    if (eqz(t)) goto B_dj;
    fwritex(f + 64, r, a);
    label B_dj:
    r = select_if(y, s, y > s);
    label B_cb:
    if (r >= 0) continue L_d;
  }
  label B_c:
  0[19722]:int = 61;
  label B_b:
  q = -1;
  label B_a:
  g_a = f + 880;
  return q;
}

function pop_arg(a:int, b:int, c:int_ptr) {
  br_table[B_b, B_s, B_r, B_o, B_q, B_p, B_n, B_m, B_l, B_k, B_j, B_i, B_h, B_g, B_f, B_e, B_d, B_c, ..B_a](
    b + -9)
  label B_s:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:int;
  return ;
  label B_r:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:uint;
  return ;
  label B_q:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:int;
  return ;
  label B_p:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:uint;
  return ;
  label B_o:
  c[0] = (b = c[0] + 7 & -8) + 8;
  a[0]:long = b[0]:long;
  return ;
  label B_n:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:short;
  return ;
  label B_m:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:ushort;
  return ;
  label B_l:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:byte;
  return ;
  label B_k:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:ubyte;
  return ;
  label B_j:
  c[0] = (b = c[0] + 7 & -8) + 8;
  a[0]:long = b[0]:long;
  return ;
  label B_i:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:uint;
  return ;
  label B_h:
  c[0] = (b = c[0] + 7 & -8) + 8;
  a[0]:long = b[0]:long;
  return ;
  label B_g:
  c[0] = (b = c[0] + 7 & -8) + 8;
  a[0]:long = b[0]:long;
  return ;
  label B_f:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:int;
  return ;
  label B_e:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:uint;
  return ;
  label B_d:
  c[0] = (b = c[0] + 7 & -8) + 8;
  a[0]:long = b[0]:long;
  return ;
  label B_c:
  long_double_not_supported();
  unreachable;
  label B_b:
  c[0] = (b = c[0]) + 4;
  a[0]:int = b[0]:int;
  label B_a:
}

function long_double_not_supported() {
  fputs(67696, 74768);
  abort();
  unreachable;
}

function fprintf(a:int, b:int, c:int):int {
  var d:int_ptr = g_a - 16;
  g_a = d;
  d[3] = c;
  c = vfprintf(a, b, c);
  g_a = d + 16;
  return c;
}

function sbrk(a:int):int {
  if (a) goto B_a;
  return memory_size() << 16;
  label B_a:
  if (a & 65535) goto B_b;
  if (a <= -1) goto B_b;
  a = memory_grow(a >> 16);
  if (a != -1) goto B_c;
  0[19722]:int = 48;
  return -1;
  label B_c:
  return a << 16;
  label B_b:
  abort();
  return unreachable;
}

function malloc(a:int):int {
  return dlmalloc(a)
}

function dlmalloc(a:int):int {
  var d:{ a:int, b:int, c:int }
  var e:int;
  var g:int;
  var g:int;
  var g:int;
  var g:int;
  var d:{ a:int, b:int, c:int }
  var h:int;
  var e:int;
  var e:int;
  var e:int;
  var g:int;
  var e:int;
  var g:int;
  var e:int;
  var e:int;
  var e:int;
  var g:int;
  var f:int;
  var e:int;
  var f:int;
  var c:int_ptr;
  var g:int;
  var f:int;
  var f:int;
  var e:int;
  var e:int;
  var d:{ a:int, b:int, c:int }
  var e:int;
  var g:int;
  var g:int;
  var d:{ a:int, b:int, c:int }
  var e:int;
  var d:{ a:int, b:int, c:int }
  var f:int;
  var g:int;
  var c:int_ptr;
  var c:int_ptr;
  var d:{ a:int, b:int, c:int }
  var d:{ a:int, b:int, c:int }
  var e:int;
  var d:{ a:int, b:int, c:int }
  var e:int;
  var e:int;
  var d:{ a:int, b:int, c:int }
  var e:int;
  var f:int;
  var g:int;
  var e:int;
  var g:int;
  var e:int;
  var g:int;
  var e:int;
  var e:int;
  var e:int;
  var f:int;
  var d:{ a:int, b:int, c:int }
  var f:int;
  var g:int;
  var g:int;
  var d:{ a:int, b:int, c:int }
  var g:int;
  var e:int;
  var g:int;
  var e:int;
  var f:int;
  var g:int;
  var f:int;
  var f:int;
  var i:int;
  var f:int;
  var f:int;
  var f:int;
  var i:int;
  var i:int;
  var f:int;
  var g:int;
  var f:int;
  var f:int;
  var g:int;
  var i:int;
  var g:int;
  var i:int;
  var i:int;
  var l:int_ptr;
  var h:int;
  var d:{ a:int, b:int, c:int }
  var g:int;
  var g:int;
  var e:int;
  var g:int;
  var d:{ a:int, b:int, c:int }
  var d:{ a:int, b:int, c:int }
  var l:int_ptr;
  var e:int;
  var d:{ a:int, b:int, c:int }
  var l:int_ptr;
  var l:int_ptr;
  var e:int;
  var d:{ a:int, b:int, c:int }
  var c:int_ptr;
  var g:int;
  var c:int_ptr;
  var e:int;
  var c:int_ptr;
  var e:int;
  var e:int;
  var e:int;
  var c:int_ptr;
  var e:int;
  var f:int;
  var c:int_ptr;
  var f:int;
  var e:int;
  var e:int;
  var i:int;
  var l:int_ptr;
  var h:int;
  var e:int;
  var f:int;
  var e:int;
  var f:int;
  var e:int;
  var e:int;
  var e:int;
  var d:{ a:int, b:int, c:int }
  var c:int_ptr;
  var g:int;
  var e:int;
  var c:int_ptr;
  var g:int;
  var f:int;
  var i:int;
  var f:int;
  var e:int;
  var e:int;
  var i:int;
  var g:int;
  var d:{ a:int, b:int, c:int }
  var i:int;
  var i:int;
  var f:int;
  var i:int;
  var i:int;
  var i:int;
  var f:int;
  var f:int;
  var i:int;
  var e:int;
  var i:int;
  var i:int;
  var e:int;
  var f:int;
  var e:int;
  var f:int;
  var f:int;
  var c:int_ptr;
  var d:{ a:int, b:int, c:int }
  var d:{ a:int, b:int, c:int }
  var g:int;
  var e:int;
  var d:{ a:int, b:int, c:int }
  var f:int;
  var g:int;
  var g:int;
  var f:int;
  var e:int;
  var g:int;
  var e:int;
  var d:{ a:int, b:int, c:int }
  var e:int;
  var e:int;
  var e:int;
  var f:int;
  var d:{ a:int, b:int, c:int }
  var d:{ a:int, b:int, c:int }
  var e:int;
  var f:int;
  var d:{ a:int, b:int, c:int }
  var g:int;
  var e:int;
  var d:{ a:int, b:int, c:int }
  var e:int;
  var d:{ a:int, b:int, c:int }
  var c:int_ptr;
  var e:int;
  var i:int;
  var d:{ a:int, b:int, c:int }
  var e:int;
  var i:int;
  var g:int;
  var e:int;
  var g:int;
  var e:int;
  var g:int;
  var e:int;
  var g:int;
  var e:int;
  var f:int;
  var i:int;
  var e:int;
  var f:int;
  var i:int;
  var f:int;
  var e:int;
  var f:int;
  var c:int_ptr;
  var d:{ a:int, b:int, c:int }
  var c:int_ptr;
  var e:int;
  var c:int_ptr;
  var g:int;
  var e:int;
  var g:int;
  var c:int_ptr;
  var f:int;
  var c:int_ptr;
  var f:int;
  var l:int_ptr;
  var c:int_ptr;
  var c:int_ptr;
  var f:int;
  var f:int;
  var d:{ a:int, b:int, c:int }
  var c:int_ptr;
  var h:int;
  var c:int_ptr;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var c:int_ptr;
  var c:int_ptr;
  var f:int;
  var i:int;
  var i:int;
  var f:int;
  var f:int;
  var f:int;
  var c:int_ptr;
  var d:{ a:int, b:int, c:int }
  var c:int_ptr;
  var e:int;
  var f:int;
  var f:int;
  var f:int;
  var c:int_ptr;
  var f:int;
  var e:int;
  var f:int;
  var f:int;
  var f:int;
  var e:int;
  var c:int_ptr;
  var e:int;
  var f:int;
  var g:int;
  var f:int;
  var e:int;
  var g:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var f:int;
  var c:int_ptr;
  var g:int;
  var i:int;
  var c:int_ptr;
  var g:int;
  var f:int;
  var e:int;
  var l:int_ptr;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var c:int_ptr;
  var g:int;
  var g:int;
  var e:int;
  var g:int;
  var g:int;
  var e:int;
  var f:int;
  var c:int_ptr;
  var f:int;
  var f:int;
  var f:int;
  var l:int_ptr;
  var d:{ a:int, b:int, c:int }
  var g:int;
  var g:int;
  var g:int;
  var f:int;
  var l:int_ptr;
  var d:{ a:int, b:int, c:int }
  var l:int_ptr;
  var d:{ a:int, b:int, c:int }
  var e:int;
  var f:int;
  var g:int;
  var g:int;
  var f:int;
  var g:int;
  var g:int;
  var g:int;
  var f:int;
  var e:int;
  var e:int;
  var e:int;
  var f:int;
  var f:int;
  var c:int_ptr;
  var e:int;
  var i:int;
  var c:int_ptr;
  var d:{ a:int, b:int, c:int }
  var c:int_ptr;
  var j:int_ptr;
  var d:{ a:int, b:int, c:int }
  var e:int;
  var i:int;
  var d:{ a:int, b:int, c:int }
  var d:{ a:int, b:int, c:int }
  var c:int_ptr;
  var c:int_ptr;
  var d:{ a:int, b:int, c:int }
  var f:int;
  var f:int;
  var c:int_ptr;
  var f:int;
  var i:int;
  var f:int;
  var e:int;
  var f:int;
  var c:int_ptr;
  var e:int;
  var e:int;
  var c:int_ptr;
  var f:int;
  var e:int;
  var d:{ a:int, b:int, c:int }
  var f:int;
  var e:int;
  var d:{ a:int, b:int, c:int }
  var e:int;
  var d:{ a:int, b:int, c:int }
  var c:int_ptr;
  var e:int;
  var d:{ a:int, b:int, c:int }
  var c:int_ptr;
  var c:int_ptr;
  var d:{ a:int, b:int, c:int }
  var i:int;
  var j:int_ptr;
  var f:int;
  var d:{ a:int, b:int, c:int }
  var e:int;
  var f:int;
  var e:int;
  var c:int_ptr;
  var c:int_ptr;
  var d:{ a:int, b:int, c:int }
  var j:int_ptr;
  var j:int_ptr;
  var f:int;
  var c:int_ptr;
  var c:int_ptr;
  var c:int_ptr;
  var j:int_ptr;
  var f:int;
  var e:int;
  var c:int_ptr;
  var e:int;
  var e:int;
  var c:int_ptr;
  var f:int;
  var e:int;
  var c:int_ptr;
  var e:int;
  var e:int;
  var c:int_ptr;
  var h:int;
  var f:int;
  var h:int;
  var f:int;
  var f:int;
  var g:int;
  var g:int;
  var e:int;
  var d:{ a:int, b:int, c:int }
  var e:int;
  var d:{ a:int, b:int, c:int }
  var e:int;
  var e:int;
  var g:int;
  var g:int;
  var g:int;
  var g:int;
  var e:int;
  var d:{ a:int, b:int, c:int }
  var d:{ a:int, b:int, c:int }
  var d:{ a:int, b:int, c:int }
  var d:{ a:int, b:int, c:int }
  var d:{ a:int, b:int, c:int }
  var f:int;
  var f:int;
  var d:{ a:int, b:int, c:int }
  var e:int;
  var f:int;
  var e:int;
  var e:int;
  var g:int;
  var e:int;
  var g:int;
  var e:int;
  var f:int;
  var e:int;
  var d:{ a:int, b:int, c:int }
  var g:int;
  var f:int;
  var i:int;
  var g:int;
  var d:{ a:int, b:int, c:int }
  var g:int;
  var g:int;
  var g:int;
  var g:int;
  var e:int;
  var e:int;
  var d:{ a:int, b:int, c:int }
  var f:int;
  var d:{ a:int, b:int, c:int }
  var e:int;
  var e:int;
  var d:{ a:int, b:int, c:int }
  var f:int;
  var i:int;
  var f:int;
  var i:int;
  var g:int;
  var g:int;
  var d:{ a:int, b:int, c:int }
  var g:int;
  var g:int;
  var g:int;
  var g:int;
  var f:int;
  var f:int;
  var f:int;
  var l:int_ptr;
  var c:int_ptr;
  var f:int;
  var i:int;
  var e:int;
  var g:int;
  var g:int;
  var g:int;
  var i:int;
  var e:int;
  var i:int;
  var l:int_ptr;
  var i:int;
  var i:int;
  var i:int;
  var c:int_ptr;
  var f:int;
  var i:int;
  var g:int;
  var i:int;
  var e:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var e:int;
  var e:int;
  var c:int_ptr;
  var c:int_ptr;
  var c:int_ptr;
  var g:int;
  var f:int;
  var g:int;
  var f:int;
  var g:int;
  var g:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var g:int;
  var c:int_ptr;
  var g:int;
  var c:int_ptr;
  var g:int;
  var g:int;
  var g:int;
  var g:int;
  var f:int;
  var f:int;
  var g:int;
  var f:int;
  var c:int_ptr;
  var e:int;
  var e:int;
  var f:int;
  var g:int;
  var e:int;
  var f:int;
  var i:int;
  var e:int;
  var g:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var c:int_ptr;
  var g:int;
  var f:int;
  var g:int;
  var c:int_ptr;
  var g:int;
  var f:int;
  var i:int;
  var f:int;
  var i:int;
  var e:int;
  var e:int;
  var g:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var d:{ a:int, b:int, c:int }
  var d:{ a:int, b:int, c:int }
  var g:int;
  var g:int;
  var g:int;
  var g:int;
  var g:int;
  var d:{ a:int, b:int, c:int }
  var l:int_ptr;
  var g:int;
  var g:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var g:int;
  var d:{ a:int, b:int, c:int }
  var e:int;
  var d:{ a:int, b:int, c:int }
  var g:int;
  var d:{ a:int, b:int, c:int }
  var g:int;
  var e:int;
  var d:{ a:int, b:int, c:int }
  var e:int;
  var l:int_ptr;
  var i:int;
  var i:int;
  var f:int;
  var f:int;
  var h:int;
  var e:int;
  var l:int_ptr;
  var l:int_ptr;
  var i:int;
  var f:int;
  var f:int;
  var f:int;
  var l:int_ptr;
  var i:int;
  var f:int;
  var f:int;
  var i:int;
  var f:int;
  var f:int;
  var g:int;
  var i:int;
  var g:int;
  var d:{ a:int, b:int, c:int }
  var i:int;
  var i:int;
  var d:{ a:int, b:int, c:int }
  var f:int;
  var g:int;
  var i:int;
  var d:{ a:int, b:int, c:int }
  var f:int;
  var g:int;
  var g:int;
  var g:int;
  var g:int;
  var e:int;
  var g:int;
  var e:int;
  var g:int;
  var e:int;
  var e:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var e:int;
  var g:int;
  var e:int;
  var g:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var d:{ a:int, b:int, c:int }
  var d:{ a:int, b:int, c:int }
  var e:int;
  var d:{ a:int, b:int, c:int }
  var g:int;
  var f:int;
  var f:int;
  var h:int;
  var e:int;
  var f:int;
  var h:int;
  var d:{ a:int, b:int, c:int }
  var f:int;
  var e:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var g:int;
  var e:int;
  var d:{ a:int, b:int, c:int }
  var e:int;
  var g:int;
  var e:int;
  var d:{ a:int, b:int, c:int }
  var c:int_ptr;
  var d:{ a:int, b:int, c:int }
  var c:int_ptr;
  var f:int;
  var f:int;
  var e:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var e:int;
  var e:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var e:int;
  var i:int;
  var k:int_ptr;
  var f:int;
  var f:int;
  var i:int;
  var i:int;
  var j:int_ptr;
  var g:int;
  var k:int_ptr;
  var k:int_ptr;
  var f:int;
  var i:int;
  var i:int;
  var i:int;
  var k:int_ptr;
  var f:int;
  var i:int;
  var i:int;
  var f:int;
  var i:int;
  var i:int;
  var e:int;
  var f:int;
  var e:int;
  var d:{ a:int, b:int, c:int }
  var f:int;
  var f:int;
  var d:{ a:int, b:int, c:int }
  var g:int;
  var e:int;
  var f:int;
  var d:{ a:int, b:int, c:int }
  var g:int;
  var e:int;
  var e:int;
  var h:int;
  var h:int;
  var i:int;
  var i:int;
  var i:int;
  var c:int_ptr;
  var i:int;
  var c:int_ptr;
  var d:{ a:int, b:int, c:int }
  var d:{ a:int, b:int, c:int }
  var i:int;
  var d:{ a:int, b:int, c:int }
  var d:{ a:int, b:int, c:int }
  var i:int;
  var g:int;
  var e:int;
  var f:int;
  var b:int = g_a - 16;
  g_a = b;
  if (a > 236) goto B_l;
  c = 0[19732]:int;
  a = c >> (e = (d = select_if(16, a + 19 & -16, a < 11)) >> 3);
  if (eqz(a & 3)) goto B_m;
  d = ((a & 1) | e) ^ 1;
  f = d << 3;
  e = (f + 78976)[0]:int;
  a = e + 8;
  g = e[2]:int;
  if (g != (f = f + 78968)) goto B_o;
  0[19732]:int = c & -2 << d;
  goto B_n;
  label B_o:
  0[19736]:int > g;
  f[2]:int = g;
  g[3]:int = f;
  label B_n:
  e[1]:int = (g = d << 3) | 3;
  e = e + g;
  e[1]:int = e[1]:int | 1;
  goto B_a;
  label B_m:
  if (d <= (h = 0[19734]:int)) goto B_k;
  if (eqz(a)) goto B_p;
  a = a << e & ((a = 2 << e) | 0 - a);
  a = (a & 0 - a) + -1;
  e = a >> (a = a >> 12 & 16);
  g = e >> 5 & 8;
  g = 
    ((((g | a) | (e = (a = e >> g) >> 2 & 4)) | (e = (a = a >> e) >> 1 & 2)) | 
     (e = (a = a >> e) >> 1 & 1)) + 
    (a >> e);
  f = g << 3;
  e = (f + 78976)[0]:int;
  a = e[2]:int;
  if (a != (f = f + 78968)) goto B_r;
  0[19732]:int = (c = c & -2 << g);
  goto B_q;
  label B_r:
  0[19736]:int > a;
  f[2]:int = a;
  a[3]:int = f;
  label B_q:
  a = e + 8;
  e[1]:int = d | 3;
  (e + (g = g << 3))[0]:int = (g = g - d);
  f = e + d;
  f[1]:int = g | 1;
  if (eqz(h)) goto B_s;
  i = h >> 3;
  d = (i << 3) + 78968;
  e = 0[19737]:int;
  if (c & (i = 1 << i)) goto B_u;
  0[19732]:int = c | i;
  i = d;
  goto B_t;
  label B_u:
  i = d.c;
  label B_t:
  i[3]:int = e;
  d.c = e;
  e[3]:int = d;
  e[2]:int = i;
  label B_s:
  0[19737]:int = f;
  0[19734]:int = g;
  goto B_a;
  label B_p:
  j = 0[19733]:int;
  if (eqz(j)) goto B_k;
  a = (j & 0 - j) + -1;
  e = a >> (a = a >> 12 & 16);
  g = e >> 5 & 8;
  f = 
    ((((((g | a) | (e = (a = e >> g) >> 2 & 4)) | (e = (a = a >> e) >> 1 & 2)) | 
       (e = (a = a >> e) >> 1 & 1)) + 
      (a >> e) << 
      2) + 
     79232)[0]:int;
  e = (f[1]:int & -8) - d;
  g = f;
  loop L_w {
    a = g[4]:int;
    if (a) goto B_x;
    a = (g + 20)[0]:int;
    if (eqz(a)) goto B_v;
    label B_x:
    g = (a[1]:int & -8) - d;
    e = select_if(g, e, g = g < e);
    f = select_if(a, f, g);
    g = a;
    continue L_w;
  }
  label B_v:
  k = f[6]:int;
  i = f[3]:int;
  if (i == f) goto B_y;
  if (0[19736]:int > (a = f[2]:int)) goto B_z;
  a[3]:int != f;
  label B_z:
  i[2]:int = a;
  a[3]:int = i;
  goto B_b;
  label B_y:
  g = f + 20;
  a = g[0]:int;
  if (a) goto B_aa;
  a = f[4]:int;
  if (eqz(a)) goto B_j;
  g = f + 16;
  label B_aa:
  loop L_ba {
    l = g;
    i = a;
    g = i + 20;
    a = g[0]:int;
    if (a) continue L_ba;
    g = i + 16;
    a = i[4]:int;
    if (a) continue L_ba;
  }
  l[0] = 0;
  goto B_b;
  label B_l:
  d = -1;
  if (a > -65) goto B_k;
  a = a + 19;
  d = a & -16;
  h = 0[19733]:int;
  if (eqz(h)) goto B_k;
  l = 0;
  a = a >> 8;
  if (eqz(a)) goto B_ca;
  l = 31;
  if (d > 16777215) goto B_ca;
  a = a << (e = a + 1048320 >> 16 & 8);
  g = a << (a = a + 520192 >> 16 & 4);
  a = ((g << (g = g + 245760 >> 16 & 2)) >> 15) - ((a | e) | g);
  l = (a << 1 | (d >> a + 21 & 1)) + 28;
  label B_ca:
  g = 0 - d;
  e = ((l << 2) + 79232)[0]:int;
  if (e) goto B_ga;
  a = 0;
  i = 0;
  goto B_fa;
  label B_ga:
  f = d << select_if(0, 25 - (l >> 1), l == 31);
  a = 0;
  i = 0;
  loop L_ha {
    c = (e[1]:int & -8) - d;
    if (c >= g) goto B_ia;
    g = c;
    i = e;
    if (c) goto B_ia;
    g = 0;
    i = e;
    a = e;
    goto B_ea;
    label B_ia:
    a = select_if(select_if(a,
                            c = (e + 20)[0]:int,
                            c == (e = (e + (f >> 29 & 4) + 16)[0]:int)),
                  a,
                  c);
    f = f << (e != 0);
    if (e) continue L_ha;
  }
  label B_fa:
  if (a | i) goto B_ja;
  a = 2 << l;
  a = (a | 0 - a) & h;
  if (eqz(a)) goto B_k;
  a = (a & 0 - a) + -1;
  e = a >> (a = a >> 12 & 16);
  f = e >> 5 & 8;
  a = 
    ((((((f | a) | (e = (a = e >> f) >> 2 & 4)) | (e = (a = a >> e) >> 1 & 2)) | 
       (e = (a = a >> e) >> 1 & 1)) + 
      (a >> e) << 
      2) + 
     79232)[0]:int;
  label B_ja:
  if (eqz(a)) goto B_da;
  label B_ea:
  loop L_ka {
    c = (a[1]:int & -8) - d;
    f = c < g;
    e = a[4]:int;
    if (e) goto B_la;
    e = (a + 20)[0]:int;
    label B_la:
    g = select_if(c, g, f);
    i = select_if(a, i, f);
    a = e;
    if (e) continue L_ka;
  }
  label B_da:
  if (eqz(i)) goto B_k;
  if (g >= 0[19734]:int - d) goto B_k;
  l = i[6]:int;
  f = i[3]:int;
  if (f == i) goto B_ma;
  if (0[19736]:int > (a = i[2]:int)) goto B_na;
  a[3]:int != i;
  label B_na:
  f[2]:int = a;
  a[3]:int = f;
  goto B_c;
  label B_ma:
  e = i + 20;
  a = e[0]:int;
  if (a) goto B_oa;
  a = i[4]:int;
  if (eqz(a)) goto B_i;
  e = i + 16;
  label B_oa:
  loop L_pa {
    c = e;
    f = a;
    e = f + 20;
    a = e[0]:int;
    if (a) continue L_pa;
    e = f + 16;
    a = f[4]:int;
    if (a) continue L_pa;
  }
  c[0] = 0;
  goto B_c;
  label B_k:
  a = 0[19734]:int;
  if (a < d) goto B_qa;
  e = 0[19737]:int;
  g = a - d;
  if (g < 16) goto B_sa;
  f = e + d;
  f[1]:int = g | 1;
  0[19734]:int = g;
  0[19737]:int = f;
  (e + a)[0]:int = g;
  e[1]:int = d | 3;
  goto B_ra;
  label B_sa:
  e[1]:int = a | 3;
  a = e + a;
  a[1]:int = a[1]:int | 1;
  0[19737]:int = 0;
  0[19734]:int = 0;
  label B_ra:
  a = e + 8;
  goto B_a;
  label B_qa:
  f = 0[19735]:int;
  if (f <= d) goto B_ta;
  a = 0[19738]:int;
  e = a + d;
  e[1]:int = (g = f - d) | 1;
  0[19735]:int = g;
  0[19738]:int = e;
  a[1]:int = d | 3;
  a = a + 8;
  goto B_a;
  label B_ta:
  if (eqz(0[19850]:int)) goto B_va;
  e = 0[19852]:int;
  goto B_ua;
  label B_va:
  0[19853]:long@4 = -1L;
  0[19851]:long@4 = 281474976776192L;
  0[19850]:int = (b + 12 & -16) ^ 1431655768;
  0[19855]:int = 0;
  0[19843]:int = 0;
  e = 65536;
  label B_ua:
  a = 0;
  c = e + (h = d + 71);
  i = c & (l = 0 - e);
  if (i > d) goto B_wa;
  0[19722]:int = 48;
  goto B_a;
  label B_wa:
  a = 0[19842]:int;
  if (eqz(a)) goto B_xa;
  e = 0[19840]:int;
  g = e + i;
  if (g <= e) goto B_ya;
  if (g <= a) goto B_xa;
  label B_ya:
  a = 0;
  0[19722]:int = 48;
  goto B_a;
  label B_xa:
  if (0[79372]:ubyte & 4) goto B_f;
  e = 0[19738]:int;
  if (eqz(e)) goto B_bb;
  a = 79376;
  loop L_cb {
    g = a[0]:int;
    if (g > e) goto B_db;
    if (g + a[1]:int > e) goto B_ab;
    label B_db:
    a = a[2]:int;
    if (a) continue L_cb;
  }
  label B_bb:
  f = sbrk(0);
  if (f == -1) goto B_g;
  c = i;
  a = 0[19851]:int;
  e = a + -1;
  if (eqz(e & f)) goto B_eb;
  c = i - f + (e + f & 0 - a);
  label B_eb:
  if (c <= d) goto B_g;
  if (c > 2147483646) goto B_g;
  a = 0[19842]:int;
  if (eqz(a)) goto B_fb;
  e = 0[19840]:int;
  g = e + c;
  if (g <= e) goto B_g;
  if (g > a) goto B_g;
  label B_fb:
  a = sbrk(c);
  if (a != f) goto B_za;
  goto B_e;
  label B_ab:
  c = c - f & l;
  if (c > 2147483646) goto B_g;
  f = sbrk(c);
  if (f == a[0]:int + a[1]:int) goto B_h;
  a = f;
  label B_za:
  if (d + 72 <= c) goto B_gb;
  if (a == -1) goto B_gb;
  e = h - c + (e = 0[19852]:int) & 0 - e;
  if (e <= 2147483646) goto B_hb;
  f = a;
  goto B_e;
  label B_hb:
  if (sbrk(e) == -1) goto B_ib;
  c = e + c;
  f = a;
  goto B_e;
  label B_ib:
  sbrk(0 - c);
  goto B_g;
  label B_gb:
  f = a;
  if (a != -1) goto B_e;
  goto B_g;
  label B_j:
  i = 0;
  goto B_b;
  label B_i:
  f = 0;
  goto B_c;
  label B_h:
  if (f != -1) goto B_e;
  label B_g:
  0[19843]:int = 0[19843]:int | 4;
  label B_f:
  if (i > 2147483646) goto B_d;
  f = sbrk(i);
  if (f >= (a = sbrk(0))) goto B_d;
  if (f == -1) goto B_d;
  if (a == -1) goto B_d;
  c = a - f;
  if (c <= d + 56) goto B_d;
  label B_e:
  0[19840]:int = (a = 0[19840]:int + c);
  if (a <= 0[19841]:int) goto B_jb;
  0[19841]:int = a;
  label B_jb:
  e = 0[19738]:int;
  if (eqz(e)) goto B_nb;
  a = 79376;
  loop L_ob {
    if (f == (g = a[0]:int) + (i = a[1]:int)) goto B_mb;
    a = a[2]:int;
    if (a) continue L_ob;
    goto B_lb;
  }
  label B_nb:
  a = 0[19736]:int;
  if (eqz(a)) goto B_qb;
  if (f >= a) goto B_pb;
  label B_qb:
  0[19736]:int = f;
  label B_pb:
  a = 0;
  0[19845]:int = c;
  0[19844]:int = f;
  0[19740]:int = -1;
  0[19741]:int = 0[19850]:int;
  0[19847]:int = 0;
  loop L_rb {
    (a + 78976)[0]:int = (e = a + 78968);
    (a + 78980)[0]:int = e;
    a = a + 8;
    if (a != 256) continue L_rb;
  }
  e = f + (a = select_if(-8 - f & 15, 0, f + 8 & 15));
  e[1]:int = (a = (g = c + -56) - a) | 1;
  0[19739]:int = 0[19854]:int;
  0[19735]:int = a;
  0[19738]:int = e;
  (f + g)[1]:int = 56;
  goto B_kb;
  label B_mb:
  if (a[12]:ubyte & 8) goto B_lb;
  if (f <= e) goto B_lb;
  if (g > e) goto B_lb;
  f = e + (g = select_if(-8 - e & 15, 0, e + 8 & 15));
  f[1]:int = (g = (l = 0[19735]:int + c) - g) | 1;
  a[1]:int = i + c;
  0[19739]:int = 0[19854]:int;
  0[19735]:int = g;
  0[19738]:int = f;
  (e + l)[1]:int = 56;
  goto B_kb;
  label B_lb:
  if (f >= (i = 0[19736]:int)) goto B_sb;
  0[19736]:int = f;
  i = f;
  label B_sb:
  g = f + c;
  a = 79376;
  loop L_ac {
    if (a[0]:int == g) goto B_zb;
    a = a[2]:int;
    if (a) continue L_ac;
    goto B_yb;
  }
  label B_zb:
  if (eqz(a[12]:ubyte & 8)) goto B_xb;
  label B_yb:
  a = 79376;
  loop L_bc {
    g = a[0]:int;
    if (g > e) goto B_cc;
    g = g + a[1]:int;
    if (g > e) goto B_wb;
    label B_cc:
    a = a[2]:int;
    continue L_bc;
  }
  label B_xb:
  a[0]:int = f;
  a[1]:int = a[1]:int + c;
  l = f + select_if(-8 - f & 15, 0, f + 8 & 15);
  l[1] = d | 3;
  f = g + select_if(-8 - g & 15, 0, g + 8 & 15);
  a = f - l - d;
  g = l + d;
  if (e != f) goto B_dc;
  0[19738]:int = g;
  0[19735]:int = (a = 0[19735]:int + a);
  g[1]:int = a | 1;
  goto B_ub;
  label B_dc:
  if (0[19737]:int != f) goto B_ec;
  0[19737]:int = g;
  0[19734]:int = (a = 0[19734]:int + a);
  g[1]:int = a | 1;
  (g + a)[0]:int = a;
  goto B_ub;
  label B_ec:
  e = f[1]:int;
  if ((e & 3) != 1) goto B_fc;
  h = e & -8;
  if (e > 255) goto B_hc;
  d = f[3]:int;
  c = f[2]:int;
  if (c == (e = ((j = e >> 3) << 3) + 78968)) goto B_ic;
  i > c;
  label B_ic:
  if (d != c) goto B_jc;
  0[19732]:int = 0[19732]:int & -2 << j;
  goto B_gc;
  label B_jc:
  if (d == e) goto B_kc;
  i > d;
  label B_kc:
  d.c = c;
  c[3] = d;
  goto B_gc;
  label B_hc:
  j = f[6]:int;
  c = f[3]:int;
  if (c == f) goto B_mc;
  if (i > (e = f[2]:int)) goto B_nc;
  e[3]:int != f;
  label B_nc:
  c[2] = e;
  e[3]:int = c;
  goto B_lc;
  label B_mc:
  e = f + 20;
  d = e[0]:int;
  if (d) goto B_oc;
  e = f + 16;
  d = e[0]:int;
  if (d) goto B_oc;
  c = 0;
  goto B_lc;
  label B_oc:
  loop L_pc {
    i = e;
    c = d;
    e = c + 20;
    d = e[0]:int;
    if (d) continue L_pc;
    e = c + 16;
    d = c[4];
    if (d) continue L_pc;
  }
  i[0]:int = 0;
  label B_lc:
  if (eqz(j)) goto B_gc;
  d = f[7]:int;
  e = (d << 2) + 79232;
  if (e[0]:int != f) goto B_rc;
  e[0]:int = c;
  if (c) goto B_qc;
  0[19733]:int = 0[19733]:int & -2 << d;
  goto B_gc;
  label B_rc:
  (j + select_if(16, 20, j[4] == f))[0]:int = c;
  if (eqz(c)) goto B_gc;
  label B_qc:
  c[6] = j;
  e = f[4]:int;
  if (eqz(e)) goto B_sc;
  c[4] = e;
  e[6]:int = c;
  label B_sc:
  e = f[5]:int;
  if (eqz(e)) goto B_gc;
  (c + 20)[0]:int = e;
  e[6]:int = c;
  label B_gc:
  a = h + a;
  f = f + h;
  label B_fc:
  f[1]:int = f[1]:int & -2;
  (g + a)[0]:int = a;
  g[1]:int = a | 1;
  if (a > 255) goto B_tc;
  e = a >> 3;
  a = (e << 3) + 78968;
  d = 0[19732]:int;
  if (d & (e = 1 << e)) goto B_vc;
  0[19732]:int = d | e;
  e = a;
  goto B_uc;
  label B_vc:
  e = a[2]:int;
  label B_uc:
  e[3]:int = g;
  a[2]:int = g;
  g[3]:int = a;
  g[2]:int = e;
  goto B_ub;
  label B_tc:
  e = 0;
  d = a >> 8;
  if (eqz(d)) goto B_wc;
  e = 31;
  if (a > 16777215) goto B_wc;
  d = d << (e = d + 1048320 >> 16 & 8);
  f = d << (d = d + 520192 >> 16 & 4);
  e = ((f << (f = f + 245760 >> 16 & 2)) >> 15) - ((d | e) | f);
  e = (e << 1 | (a >> e + 21 & 1)) + 28;
  label B_wc:
  g[7]:int = e;
  g[4]:long@4 = 0L;
  d = (e << 2) + 79232;
  f = 0[19733]:int;
  if (f & (i = 1 << e)) goto B_xc;
  d.a = g;
  0[19733]:int = f | i;
  g[6]:int = d;
  g[2]:int = g;
  g[3]:int = g;
  goto B_ub;
  label B_xc:
  e = a << select_if(0, 25 - (e >> 1), e == 31);
  f = d.a;
  loop L_yc {
    d = f;
    if ((d.b & -8) == a) goto B_vb;
    f = e >> 29;
    e = e << 1;
    i = d + (f & 4) + 16;
    f = i[0]:int;
    if (f) continue L_yc;
  }
  i[0]:int = g;
  g[6]:int = d;
  g[3]:int = g;
  g[2]:int = g;
  goto B_ub;
  label B_wb:
  l = f + (a = select_if(-8 - f & 15, 0, f + 8 & 15));
  l[1] = (a = (i = c + -56) - a) | 1;
  (f + i)[1]:int = 56;
  i = select_if(e,
                i = g + select_if(55 - g & 15, 0, g + -55 & 15) + -63,
                i < e + 16);
  i[1]:int = 35;
  0[19739]:int = 0[19854]:int;
  0[19735]:int = a;
  0[19738]:int = l;
  (i + 16)[0]:long@4 = 0[19846]:long@4;
  i[2]:long@4 = 0[19844]:long@4;
  0[19846]:int = i + 8;
  0[19845]:int = c;
  0[19844]:int = f;
  0[19847]:int = 0;
  a = i + 36;
  loop L_zc {
    a[0]:int = 7;
    if (g > (a = a + 4)) continue L_zc;
  }
  if (i == e) goto B_kb;
  i[1]:int = i[1]:int & -2;
  i[0]:int = (c = i - e);
  e[1]:int = c | 1;
  if (c > 255) goto B_ad;
  g = c >> 3;
  a = (g << 3) + 78968;
  f = 0[19732]:int;
  if (f & (g = 1 << g)) goto B_cd;
  0[19732]:int = f | g;
  g = a;
  goto B_bd;
  label B_cd:
  g = a[2]:int;
  label B_bd:
  g[3]:int = e;
  a[2]:int = e;
  e[3]:int = a;
  e[2]:int = g;
  goto B_kb;
  label B_ad:
  a = 0;
  g = c >> 8;
  if (eqz(g)) goto B_dd;
  a = 31;
  if (c > 16777215) goto B_dd;
  g = g << (a = g + 1048320 >> 16 & 8);
  f = g << (g = g + 520192 >> 16 & 4);
  a = ((f << (f = f + 245760 >> 16 & 2)) >> 15) - ((g | a) | f);
  a = (a << 1 | (c >> a + 21 & 1)) + 28;
  label B_dd:
  e[4]:long@4 = 0L;
  (e + 28)[0]:int = a;
  g = (a << 2) + 79232;
  f = 0[19733]:int;
  if (f & (i = 1 << a)) goto B_ed;
  g[0]:int = e;
  0[19733]:int = f | i;
  (e + 24)[0]:int = g;
  e[2]:int = e;
  e[3]:int = e;
  goto B_kb;
  label B_ed:
  a = c << select_if(0, 25 - (a >> 1), a == 31);
  f = g[0]:int;
  loop L_fd {
    g = f;
    if ((g[1]:int & -8) == c) goto B_tb;
    f = a >> 29;
    a = a << 1;
    i = g + (f & 4) + 16;
    f = i[0]:int;
    if (f) continue L_fd;
  }
  i[0]:int = e;
  (e + 24)[0]:int = g;
  e[3]:int = e;
  e[2]:int = e;
  goto B_kb;
  label B_vb:
  a = d.c;
  d.c = g;
  a[3]:int = g;
  g[6]:int = 0;
  g[2]:int = a;
  g[3]:int = d;
  label B_ub:
  a = l + 8;
  goto B_a;
  label B_tb:
  a = g[2]:int;
  g[2]:int = e;
  a[3]:int = e;
  (e + 24)[0]:int = 0;
  e[2]:int = a;
  e[3]:int = g;
  label B_kb:
  a = 0[19735]:int;
  if (a <= d) goto B_d;
  e = 0[19738]:int;
  g = e + d;
  g[1]:int = (a = a - d) | 1;
  0[19735]:int = a;
  0[19738]:int = g;
  e[1]:int = d | 3;
  a = e + 8;
  goto B_a;
  label B_d:
  a = 0;
  0[19722]:int = 48;
  goto B_a;
  label B_c:
  if (eqz(l)) goto B_gd;
  if (i != (a = ((e = i[7]:int) << 2) + 79232)[0]:int) goto B_id;
  a[0]:int = f;
  if (f) goto B_hd;
  0[19733]:int = (h = h & -2 << e);
  goto B_gd;
  label B_id:
  (l + select_if(16, 20, l[4] == i))[0]:int = f;
  if (eqz(f)) goto B_gd;
  label B_hd:
  f[6]:int = l;
  a = i[4]:int;
  if (eqz(a)) goto B_jd;
  f[4]:int = a;
  a[6]:int = f;
  label B_jd:
  a = (i + 20)[0]:int;
  if (eqz(a)) goto B_gd;
  (f + 20)[0]:int = a;
  a[6]:int = f;
  label B_gd:
  if (g > 15) goto B_ld;
  i[1]:int = (a = g + d) | 3;
  a = i + a;
  a[1]:int = a[1]:int | 1;
  goto B_kd;
  label B_ld:
  f = i + d;
  f[1]:int = g | 1;
  i[1]:int = d | 3;
  (f + g)[0]:int = g;
  if (g > 255) goto B_md;
  e = g >> 3;
  a = (e << 3) + 78968;
  g = 0[19732]:int;
  if (g & (e = 1 << e)) goto B_od;
  0[19732]:int = g | e;
  e = a;
  goto B_nd;
  label B_od:
  e = a[2]:int;
  label B_nd:
  e[3]:int = f;
  a[2]:int = f;
  f[3]:int = a;
  f[2]:int = e;
  goto B_kd;
  label B_md:
  e = g >> 8;
  if (e) goto B_qd;
  a = 0;
  goto B_pd;
  label B_qd:
  a = 31;
  if (g > 16777215) goto B_pd;
  e = e << (a = e + 1048320 >> 16 & 8);
  d = e << (e = e + 520192 >> 16 & 4);
  a = ((d << (d = d + 245760 >> 16 & 2)) >> 15) - ((e | a) | d);
  a = (a << 1 | (g >> a + 21 & 1)) + 28;
  label B_pd:
  f[7]:int = a;
  f[4]:long@4 = 0L;
  e = (a << 2) + 79232;
  if (h & (d = 1 << a)) goto B_rd;
  e[0]:int = f;
  0[19733]:int = h | d;
  f[6]:int = e;
  f[2]:int = f;
  f[3]:int = f;
  goto B_kd;
  label B_rd:
  a = g << select_if(0, 25 - (a >> 1), a == 31);
  d = e[0]:int;
  loop L_td {
    e = d;
    if ((e[1]:int & -8) == g) goto B_sd;
    d = a >> 29;
    a = a << 1;
    c = e + (d & 4) + 16;
    d = c[0];
    if (d) continue L_td;
  }
  c[0] = f;
  f[6]:int = e;
  f[3]:int = f;
  f[2]:int = f;
  goto B_kd;
  label B_sd:
  a = e[2]:int;
  e[2]:int = f;
  a[3]:int = f;
  f[6]:int = 0;
  f[2]:int = a;
  f[3]:int = e;
  label B_kd:
  a = i + 8;
  goto B_a;
  label B_b:
  if (eqz(k)) goto B_ud;
  if (f != (a = ((g = f[7]:int) << 2) + 79232)[0]:int) goto B_wd;
  a[0]:int = i;
  if (i) goto B_vd;
  0[19733]:int = j & -2 << g;
  goto B_ud;
  label B_wd:
  (k + select_if(16, 20, k[4] == f))[0]:int = i;
  if (eqz(i)) goto B_ud;
  label B_vd:
  i[6]:int = k;
  a = f[4]:int;
  if (eqz(a)) goto B_xd;
  i[4]:int = a;
  a[6]:int = i;
  label B_xd:
  a = (f + 20)[0]:int;
  if (eqz(a)) goto B_ud;
  (i + 20)[0]:int = a;
  a[6]:int = i;
  label B_ud:
  if (e > 15) goto B_zd;
  f[1]:int = (a = e + d) | 3;
  a = f + a;
  a[1]:int = a[1]:int | 1;
  goto B_yd;
  label B_zd:
  g = f + d;
  g[1]:int = e | 1;
  f[1]:int = d | 3;
  (g + e)[0]:int = e;
  if (eqz(h)) goto B_ae;
  i = h >> 3;
  d = (i << 3) + 78968;
  a = 0[19737]:int;
  i = 1 << i;
  if (i & c) goto B_ce;
  0[19732]:int = i | c;
  i = d;
  goto B_be;
  label B_ce:
  i = d.c;
  label B_be:
  i[3]:int = a;
  d.c = a;
  a[3]:int = d;
  a[2]:int = i;
  label B_ae:
  0[19737]:int = g;
  0[19734]:int = e;
  label B_yd:
  a = f + 8;
  label B_a:
  g_a = b + 16;
  return a;
}

function free(a:int) {
  dlfree(a)
}

function dlfree(a:int_ptr) {
  var c:int_ptr;
  var e:{ a:int, b:int, c:int }
  var h:int_ptr;
  var g:int_ptr;
  var h:int_ptr;
  var g:int_ptr;
  var g:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var g:int_ptr;
  var h:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var h:int_ptr;
  var h:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var h:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var e:{ a:int, b:int, c:int }
  var f:int_ptr;
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var f:int_ptr;
  var f:int_ptr;
  var e:{ a:int, b:int, c:int }
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var f:int_ptr;
  var e:{ a:int, b:int, c:int }
  var f:int_ptr;
  var f:int_ptr;
  var e:{ a:int, b:int, c:int }
  var g:int_ptr;
  var h:int_ptr;
  var e:{ a:int, b:int, c:int }
  var f:int_ptr;
  var f:int_ptr;
  var e:{ a:int, b:int, c:int }
  var h:int_ptr;
  var h:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var h:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var f:int_ptr;
  var f:int_ptr;
  var e:{ a:int, b:int, c:int }
  var f:int_ptr;
  var f:int_ptr;
  var e:{ a:int, b:int, c:int }
  var f:int_ptr;
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var f:int_ptr;
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var f:int_ptr;
  var f:int_ptr;
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  if (eqz(a)) goto B_a;
  var b:int = a + -8;
  var d:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int } = 
    b + (a = (c = (a + -4)[0]:int) & -8);
  if (c & 1) goto B_b;
  if (eqz(c & 3)) goto B_a;
  b = b - (c = b[0]:int);
  if (b < (e = 0[19736]:int)) goto B_a;
  a = c + a;
  if (0[19737]:int == b) goto B_c;
  if (c > 255) goto B_d;
  f = b[3]:int;
  g = b[2]:int;
  if (g == (c = ((h = c >> 3) << 3) + 78968)) goto B_e;
  e > g;
  label B_e:
  if (f != g) goto B_f;
  0[19732]:int = 0[19732]:int & -2 << h;
  goto B_b;
  label B_f:
  if (f == c) goto B_g;
  e > f;
  label B_g:
  f[2] = g;
  g[3] = f;
  goto B_b;
  label B_d:
  h = b[6]:int;
  f = b[3]:int;
  if (f == b) goto B_i;
  if (e > (c = b[2]:int)) goto B_j;
  c[3] != b;
  label B_j:
  f[2] = c;
  c[3] = f;
  goto B_h;
  label B_i:
  c = b + 20;
  e = c[0];
  if (e) goto B_k;
  c = b + 16;
  e = c[0];
  if (e) goto B_k;
  f = 0;
  goto B_h;
  label B_k:
  loop L_l {
    g = c;
    f = e;
    c = f + 20;
    e = c[0];
    if (e) continue L_l;
    c = f + 16;
    e = f[4];
    if (e) continue L_l;
  }
  g[0] = 0;
  label B_h:
  if (eqz(h)) goto B_b;
  e = b[7]:int;
  c = (e << 2) + 79232;
  if (c[0] != b) goto B_n;
  c[0] = f;
  if (f) goto B_m;
  0[19733]:int = 0[19733]:int & -2 << e;
  goto B_b;
  label B_n:
  (h + select_if(16, 20, h[4] == b))[0]:int = f;
  if (eqz(f)) goto B_b;
  label B_m:
  f[6] = h;
  c = b[4]:int;
  if (eqz(c)) goto B_o;
  f[4] = c;
  c[6] = f;
  label B_o:
  c = b[5]:int;
  if (eqz(c)) goto B_b;
  (f + 20)[0]:int = c;
  c[6] = f;
  goto B_b;
  label B_c:
  c = d.b;
  if ((c & 3) != 3) goto B_b;
  d.b = c & -2;
  0[19734]:int = a;
  (b + a)[0]:int = a;
  b[1]:int = a | 1;
  return ;
  label B_b:
  if (d <= b) goto B_a;
  c = d.b;
  if (eqz(c & 1)) goto B_a;
  if (c & 2) goto B_q;
  if (0[19738]:int != d) goto B_r;
  0[19738]:int = b;
  0[19735]:int = (a = 0[19735]:int + a);
  b[1]:int = a | 1;
  if (b != 0[19737]:int) goto B_a;
  0[19734]:int = 0;
  0[19737]:int = 0;
  return ;
  label B_r:
  if (0[19737]:int != d) goto B_s;
  0[19737]:int = b;
  0[19734]:int = (a = 0[19734]:int + a);
  b[1]:int = a | 1;
  (b + a)[0]:int = a;
  return ;
  label B_s:
  a = (c & -8) + a;
  if (c > 255) goto B_u;
  e = d.d;
  f = d.c;
  if (f == (c = ((d = c >> 3) << 3) + 78968)) goto B_v;
  0[19736]:int > f;
  label B_v:
  if (e != f) goto B_w;
  0[19732]:int = 0[19732]:int & -2 << d;
  goto B_t;
  label B_w:
  if (e == c) goto B_x;
  0[19736]:int > e;
  label B_x:
  e.c = f;
  f[3] = e;
  goto B_t;
  label B_u:
  h = d.g;
  f = d.d;
  if (f == d) goto B_z;
  if (0[19736]:int > (c = d.c)) goto B_aa;
  c[3] != d;
  label B_aa:
  f[2] = c;
  c[3] = f;
  goto B_y;
  label B_z:
  c = d + 20;
  e = c[0];
  if (e) goto B_ba;
  c = d + 16;
  e = c[0];
  if (e) goto B_ba;
  f = 0;
  goto B_y;
  label B_ba:
  loop L_ca {
    g = c;
    f = e;
    c = f + 20;
    e = c[0];
    if (e) continue L_ca;
    c = f + 16;
    e = f[4];
    if (e) continue L_ca;
  }
  g[0] = 0;
  label B_y:
  if (eqz(h)) goto B_t;
  e = d.h;
  c = (e << 2) + 79232;
  if (c[0] != d) goto B_ea;
  c[0] = f;
  if (f) goto B_da;
  0[19733]:int = 0[19733]:int & -2 << e;
  goto B_t;
  label B_ea:
  (h + select_if(16, 20, h[4] == d))[0]:int = f;
  if (eqz(f)) goto B_t;
  label B_da:
  f[6] = h;
  c = d.e;
  if (eqz(c)) goto B_fa;
  f[4] = c;
  c[6] = f;
  label B_fa:
  c = d.f;
  if (eqz(c)) goto B_t;
  (f + 20)[0]:int = c;
  c[6] = f;
  label B_t:
  (b + a)[0]:int = a;
  b[1]:int = a | 1;
  if (b != 0[19737]:int) goto B_p;
  0[19734]:int = a;
  return ;
  label B_q:
  d.b = c & -2;
  (b + a)[0]:int = a;
  b[1]:int = a | 1;
  label B_p:
  if (a > 255) goto B_ga;
  c = a >> 3;
  a = (c << 3) + 78968;
  e = 0[19732]:int;
  if (e & (c = 1 << c)) goto B_ia;
  0[19732]:int = e | c;
  c = a;
  goto B_ha;
  label B_ia:
  c = a[2];
  label B_ha:
  c[3] = b;
  a[2] = b;
  b[3]:int = a;
  b[2]:int = c;
  return ;
  label B_ga:
  c = 0;
  e = a >> 8;
  if (eqz(e)) goto B_ja;
  c = 31;
  if (a > 16777215) goto B_ja;
  e = e << (c = e + 1048320 >> 16 & 8);
  f = e << (e = e + 520192 >> 16 & 4);
  c = ((f << (f = f + 245760 >> 16 & 2)) >> 15) - ((e | c) | f);
  c = (c << 1 | (a >> c + 21 & 1)) + 28;
  label B_ja:
  b[4]:long@4 = 0L;
  (b + 28)[0]:int = c;
  e = (c << 2) + 79232;
  f = 0[19733]:int;
  if (f & (d = 1 << c)) goto B_la;
  e.a = b;
  0[19733]:int = f | d;
  (b + 24)[0]:int = e;
  b[2]:int = b;
  b[3]:int = b;
  goto B_ka;
  label B_la:
  c = a << select_if(0, 25 - (c >> 1), c == 31);
  f = e.a;
  loop L_na {
    e = f;
    if ((e.b & -8) == a) goto B_ma;
    f = c >> 29;
    c = c << 1;
    d = e + (f & 4) + 16;
    f = d.a;
    if (f) continue L_na;
  }
  d.a = b;
  (b + 24)[0]:int = e;
  b[3]:int = b;
  b[2]:int = b;
  goto B_ka;
  label B_ma:
  a = e.c;
  e.c = b;
  a[3] = b;
  (b + 24)[0]:int = 0;
  b[2]:int = a;
  b[3]:int = e;
  label B_ka:
  0[19740]:int = (b = 0[19740]:int + -1);
  if (b) goto B_a;
  b = 79384;
  loop L_oa {
    a = b[0]:int;
    b = a + 8;
    if (a) continue L_oa;
  }
  0[19740]:int = -1;
  label B_a:
}

function secp256k1_context_preallocated_size(a:int):int {
  var b:int_ptr = g_a - 16;
  g_a = b;
  if ((a & 255) == 1) goto B_a;
  b[0] = 68096;
  fprintf(d_DG30FKE7I6J841A9C2B5HLSucces[0]:int, 68495, b);
  abort();
  unreachable;
  label B_a:
  g_a = b + 16;
  return select_if(65728, 192, a & 512) | (a << 12 & 1048576);
}

function secp256k1_context_preallocated_create(a:int, b:int):int {
  var j:int;
  var c:int = g_a - 213664;
  g_a = c;
  var d:int = c + 328;
  d[0]:long = d_DG30FKE7I6J841A9C2B5HLSucces[2812]:long@1;
  var e:int = c + 336;
  e[0]:long = d_DG30FKE7I6J841A9C2B5HLSucces[2820]:long@1;
  var f:int = c + 288 + 56;
  f[0]:long = d_DG30FKE7I6J841A9C2B5HLSucces[2828]:long@1;
  var g:long_ptr = c + 288 + 64;
  g[0] = d_DG30FKE7I6J841A9C2B5HLSucces[2836]:long@1;
  var h:int = c + 360;
  h[0]:long = d_DG30FKE7I6J841A9C2B5HLSucces[2844]:long@1;
  var i:int = c + 368;
  i[0]:long = d_DG30FKE7I6J841A9C2B5HLSucces[2852]:long@1;
  (c + 375)[0]:long@1 = d_DG30FKE7I6J841A9C2B5HLSucces[2859]:long@1;
  c[39]:long = 6620516960021240235L;
  c[38]:long = -7276294671082564993L;
  c[37]:long = -6534734903820487822L;
  c[36]:long = -4942790177982912921L;
  c[40]:long = d_DG30FKE7I6J841A9C2B5HLSucces[2804]:long@1;
  (c + 383)[0]:byte = 128;
  c[96]:int = 120;
  c[31818]:long@4 = -576179277326712832L;
  secp256k1_sha256_transform(c + 288, j = c + 320);
  i[0]:long = d_DG30FKE7I6J841A9C2B5HLSucces[3105]:long@1;
  h[0]:long = d_DG30FKE7I6J841A9C2B5HLSucces[3097]:long@1;
  g[0] = d_DG30FKE7I6J841A9C2B5HLSucces[3089]:long@1;
  f[0]:long = d_DG30FKE7I6J841A9C2B5HLSucces[3081]:long@1;
  e[0]:long = d_DG30FKE7I6J841A9C2B5HLSucces[3073]:long@1;
  d[0]:long = d_DG30FKE7I6J841A9C2B5HLSucces[3065]:long@1;
  c[40]:long = d_DG30FKE7I6J841A9C2B5HLSucces[3057]:long@1;
  e = 8;
  c[96]:int = (f = c[96]:int) + 8;
  d = c + 127272;
  f = f & 63;
  if (f < 56) goto B_b;
  memcpy(j + f, c + 127272, d = 64 - f);
  secp256k1_sha256_transform(c + 288, j);
  d = c + 127272 + d;
  e = f + -56;
  if (e < 64) goto B_c;
  loop L_d {
    j[0]:long@1 = d[0]:long@1;
    (j + 56)[0]:long@1 = (d + 56)[0]:long@1;
    (j + 48)[0]:long@1 = (d + 48)[0]:long@1;
    (j + 40)[0]:long@1 = (d + 40)[0]:long@1;
    (j + 32)[0]:long@1 = (d + 32)[0]:long@1;
    (j + 24)[0]:long@1 = (d + 24)[0]:long@1;
    (j + 16)[0]:long@1 = (d + 16)[0]:long@1;
    (j + 8)[0]:long@1 = (d + 8)[0]:long@1;
    secp256k1_sha256_transform(c + 288, j);
    d = d + 64;
    e = e + -64;
    if (e > 63) continue L_d;
  }
  label B_c:
  f = 0;
  if (eqz(e)) goto B_a;
  label B_b:
  memcpy(j + f, d, e);
  label B_a:
  d = c[72]:int;
  j = c[73]:int;
  c[36]:long = 0L;
  e = c[74]:int;
  f = c[75]:int;
  c[37]:long = 0L;
  g = c[76]:int;
  h = c[77]:int;
  c[38]:long = 0L;
  i = c[78]:int;
  var k:int_ptr = c[79]:int;
  c[39]:long = 0L;
  c[31887]:int = 
    (k << 24 | (k << 8 & 16711680)) | ((k >> 8 & 65280) | k >> 24);
  c[31886]:int = 
    (i << 24 | (i << 8 & 16711680)) | ((i >> 8 & 65280) | i >> 24);
  c[31885]:int = 
    (h << 24 | (h << 8 & 16711680)) | ((h >> 8 & 65280) | h >> 24);
  c[31884]:int = 
    (g << 24 | (g << 8 & 16711680)) | ((g >> 8 & 65280) | g >> 24);
  c[31883]:int = 
    (f << 24 | (f << 8 & 16711680)) | ((f >> 8 & 65280) | f >> 24);
  c[31882]:int = 
    (e << 24 | (e << 8 & 16711680)) | ((e >> 8 & 65280) | e >> 24);
  c[31881]:int = 
    (j << 24 | (j << 8 & 16711680)) | ((j >> 8 & 65280) | j >> 24);
  c[31880]:int = 
    (d = (d << 24 | (d << 8 & 16711680)) | ((d >> 8 & 65280) | d >> 24));
  j = (d & 255) + -240;
  if (j) goto B_e;
  d = 1;
  loop L_f {
    j = (c + 127520 + d)[0]:ubyte - (d + 68416)[0]:ubyte;
    if (d == 31) goto B_e;
    d = d + 1;
    if (eqz(j)) continue L_f;
  }
  label B_e:
  if (j) goto B_g;
  if ((b & 255) != 1) goto B_h;
  a[2]:int = 0;
  a[0]:long@4 = 0L;
  a[44]:long@4 = d_DG30FKE7I6J841A9C2B5HLSucces[322]:long;
  a[42]:long@4 = d_DG30FKE7I6J841A9C2B5HLSucces[319]:long;
  k = a + 192;
  if (eqz(b & 512)) goto B_i;
  a[2]:int = k;
  (c + 127440 + 8)[0]:long = d_DG30FKE7I6J841A9C2B5HLSucces[682]:long@4;
  (c + 127440 + 16)[0]:long = 
    d_DG30FKE7I6J841A9C2B5HLSucces[684]:long@4;
  (c + 127440 + 24)[0]:long = 
    d_DG30FKE7I6J841A9C2B5HLSucces[686]:long@4;
  (c + 127440 + 32)[0]:long = 
    d_DG30FKE7I6J841A9C2B5HLSucces[688]:long@4;
  (c + 127440 + 48)[0]:long = 
    d_DG30FKE7I6J841A9C2B5HLSucces[692]:long@4;
  (c + 127440 + 56)[0]:long = 
    d_DG30FKE7I6J841A9C2B5HLSucces[694]:long@4;
  (c + 127440 + 64)[0]:long = 
    d_DG30FKE7I6J841A9C2B5HLSucces[696]:long@4;
  (c + 127440 + 72)[0]:long = 
    d_DG30FKE7I6J841A9C2B5HLSucces[698]:long@4;
  c[15930]:long = d_DG30FKE7I6J841A9C2B5HLSucces[680]:long@4;
  c[15935]:long = d_DG30FKE7I6J841A9C2B5HLSucces[690]:long@4;
  f = c + 127400 + 32;
  f[0]:int = 0;
  g = c + 127400 + 24;
  g[0] = 0L;
  h = c + 127400 + 16;
  h[0]:long = 0L;
  (c + 127400 + 8)[0]:long = 0L;
  c[15925]:long = 0L;
  secp256k1_fe_set_b32(c + 160, 68448);
  (c + 288 + 8)[0]:long = (c + 160 + 8)[0]:long;
  j = c + 288 + 16;
  j[0]:long = (c + 160 + 16)[0]:long;
  i = c + 288 + 24;
  i[0]:long = (c + 160 + 24)[0]:long;
  var l:long_ptr = c + 288 + 32;
  l[0] = (c + 160 + 32)[0]:long;
  c[36]:long = c[20]:long;
  secp256k1_fe_sqr(c + 127520, c + 160);
  secp256k1_fe_mul(c + 127272, c + 160, c + 127520);
  c[92]:int = 0;
  c[31818]:int = c[31818]:int + 7;
  d = c + 328;
  if (eqz(secp256k1_fe_sqrt(d, c + 127272))) goto B_j;
  secp256k1_fe_normalize_var(d);
  e = c[82]:int;
  if (eqz(e & 1)) goto B_j;
  k = c + 332;
  k[0] = 268435196 - k[0];
  k = c + 336;
  k[0] = 268435452 - k[0];
  k = c + 340;
  k[0] = 268435452 - k[0];
  k = c + 344;
  k[0] = 268435452 - k[0];
  k = c + 348;
  k[0] = 268435452 - k[0];
  k = c + 352;
  k[0] = 268435452 - k[0];
  k = c + 356;
  k[0] = 268435452 - k[0];
  k = c + 360;
  k[0] = 268435452 - k[0];
  k = c + 364;
  k[0] = 16777212 - k[0];
  c[82]:int = 268431548 - e;
  label B_j:
  e = a + 8;
  k = a + 65728;
  (c + 127272 + 8)[0]:long = (c + 288 + 8)[0]:long;
  (c + 127272 + 16)[0]:long = j[0]:long;
  (c + 127272 + 24)[0]:long = i[0]:long;
  (c + 127272 + 32)[0]:long = l[0];
  (c + 127272 + 48)[0]:long = (d + 8)[0]:long@4;
  (c + 127272 + 56)[0]:long = (d + 16)[0]:long@4;
  (c + 127272 + 64)[0]:long = (d + 24)[0]:long@4;
  (c + 127272 + 72)[0]:long = (d + 32)[0]:long@4;
  c[31848]:int = c[92]:int;
  c[15909]:long = c[36]:long;
  c[15914]:long = d[0]:long@4;
  j = 0;
  (c + 127272 + 116)[0]:int = 0;
  (c + 127272 + 108)[0]:long@4 = 0L;
  (c + 127272 + 100)[0]:long@4 = 0L;
  (c + 127272 + 92)[0]:long@4 = 0L;
  (c + 127272 + 84)[0]:long@4 = 0L;
  c[31838]:int = 1;
  secp256k1_gej_add_ge_var(c + 127272, c + 127272, 68256, 0);
  memcpy(c + 160, c + 127440, 80);
  (c + 160 + 84)[0]:long@4 = c[15925]:long;
  (c + 160 + 92)[0]:long@4 = (c + 127400 + 8)[0]:long;
  (c + 160 + 100)[0]:long@4 = h[0]:long;
  (c + 160 + 108)[0]:long@4 = g[0];
  (c + 160 + 116)[0]:int = f[0]:int;
  c[60]:int = 1;
  c[70]:int = 0;
  memcpy(c + 32, c + 127272, 124);
  loop L_k {
    d = memcpy(c + 288 + j, c + 32, 124);
    f = d + 124;
    secp256k1_gej_add_var(f, d, c + 160);
    g = d + 248;
    secp256k1_gej_add_var(g, f, c + 160);
    f = d + 372;
    secp256k1_gej_add_var(f, g, c + 160);
    g = d + 496;
    secp256k1_gej_add_var(g, f, c + 160);
    f = d + 620;
    secp256k1_gej_add_var(f, g, c + 160);
    g = d + 744;
    secp256k1_gej_add_var(g, f, c + 160);
    f = d + 868;
    secp256k1_gej_add_var(f, g, c + 160);
    g = d + 992;
    secp256k1_gej_add_var(g, f, c + 160);
    f = d + 1116;
    secp256k1_gej_add_var(f, g, c + 160);
    g = d + 1240;
    secp256k1_gej_add_var(g, f, c + 160);
    f = d + 1364;
    secp256k1_gej_add_var(f, g, c + 160);
    g = d + 1488;
    secp256k1_gej_add_var(g, f, c + 160);
    f = d + 1612;
    secp256k1_gej_add_var(f, g, c + 160);
    g = d + 1736;
    secp256k1_gej_add_var(g, f, c + 160);
    secp256k1_gej_add_var(d + 1860, g, c + 160);
    if (eqz(c[70]:int)) goto B_m;
    c[70]:int = 1;
    c[70]:int = 1;
    c[70]:int = 1;
    c[70]:int = 1;
    goto B_l;
    label B_m:
    secp256k1_gej_double(c + 160, c + 160);
    if (eqz(c[70]:int)) goto B_n;
    c[70]:int = 1;
    c[70]:int = 1;
    c[70]:int = 1;
    goto B_l;
    label B_n:
    secp256k1_gej_double(c + 160, c + 160);
    if (eqz(c[70]:int)) goto B_o;
    c[70]:int = 1;
    c[70]:int = 1;
    goto B_l;
    label B_o:
    secp256k1_gej_double(c + 160, c + 160);
    if (eqz(c[70]:int)) goto B_p;
    c[70]:int = 1;
    goto B_l;
    label B_p:
    secp256k1_gej_double(c + 160, c + 160);
    label B_l:
    if (eqz(c[38]:int)) goto B_r;
    c[38]:int = 1;
    goto B_q;
    label B_r:
    secp256k1_gej_double(c + 32, c + 32);
    label B_q:
    if (j != 123008) goto B_s;
    c[18]:int = 
      268431548 - 
      ((g = (f = (d = c[27]:int) >> 22) * 977 + c[18]:int) & 67108863);
    c[19]:int = 
      268435196 - ((f = (f << 6) + c[19]:int + (g >> 26)) & 67108863);
    c[20]:int = 268435452 - ((f = (f >> 26) + c[20]:int) & 67108863);
    c[21]:int = 268435452 - ((f = (f >> 26) + c[21]:int) & 67108863);
    c[22]:int = 268435452 - ((f = (f >> 26) + c[22]:int) & 67108863);
    c[23]:int = 268435452 - ((f = (f >> 26) + c[23]:int) & 67108863);
    c[24]:int = 268435452 - ((f = (f >> 26) + c[24]:int) & 67108863);
    c[25]:int = 268435452 - ((f = (f >> 26) + c[25]:int) & 67108863);
    c[26]:int = 268435452 - ((f = (f >> 26) + c[26]:int) & 67108863);
    c[27]:int = 16777212 - (d & 4194303) + (f >> 26);
    secp256k1_gej_add_var(c + 32, c + 32, c + 127272);
    label B_s:
    j = j + 1984;
    if (j != 126976) continue L_k;
  }
  d = c + 368;
  f = 0;
  j = c + 127520;
  g = -1;
  loop L_t {
    if ((d + 40)[0]:int) goto B_u;
    if (g != -1) goto B_w;
    j[0]:long@4 = d[0]:long@4;
    (j + 32)[0]:long@4 = (d + 32)[0]:long@4;
    (j + 24)[0]:long@4 = (d + 24)[0]:long@4;
    (j + 16)[0]:long@4 = (d + 16)[0]:long@4;
    (j + 8)[0]:long@4 = (d + 8)[0]:long@4;
    goto B_v;
    label B_w:
    secp256k1_fe_mul(j, c + 127520 + g * 84, d);
    label B_v:
    g = f;
    label B_u:
    j = j + 84;
    d = d + 124;
    f = f + 1;
    if (f != 1024) continue L_t;
  }
  if (g == -1) goto B_x;
  secp256k1_fe_inv(c + 213544, h = c + 127520 + g * 84);
  j = 0;
  i = 0;
  if (eqz(g)) goto B_y;
  f = g + -1;
  d = c + 288 + g * 124 + -4;
  h = h + -84;
  i = g;
  loop L_z {
    if (d[0]:int) goto B_aa;
    secp256k1_fe_mul(c + 127520 + i * 84, h, c + 213544);
    secp256k1_fe_mul(c + 213544, c + 213544, c + 288 + i * 124 + 80);
    i = f;
    label B_aa:
    d = d + -124;
    h = h + -84;
    f = f + -1;
    if (f != -1) continue L_z;
  }
  label B_y:
  d = c + 127520 + i * 84;
  d[0]:long@4 = c[26693]:long;
  (d + 32)[0]:long@4 = (c + 213544 + 32)[0]:long;
  (d + 24)[0]:long@4 = (c + 213544 + 24)[0]:long;
  (d + 16)[0]:long@4 = (c + 213544 + 16)[0]:long;
  (d + 8)[0]:long@4 = (c + 213544 + 8)[0]:long;
  d = c + 127520;
  loop L_ba {
    h = d + 80;
    h[0]:int = (f = (i = (g = c + 288 + j) + 120)[0]:int);
    if (f) goto B_ca;
    secp256k1_fe_sqr(c + 213624, d);
    secp256k1_fe_mul(c + 213584, c + 213624, d);
    secp256k1_fe_mul(d, g, c + 213624);
    secp256k1_fe_mul(d + 40, g + 40, c + 213584);
    h[0]:int = i[0]:int;
    label B_ca:
    d = d + 84;
    j = j + 124;
    if (j != 126976) continue L_ba;
  }
  label B_x:
  d = c + 128780;
  j = 960;
  loop L_da {
    secp256k1_ge_to_storage(e[0]:int + j + -960, d + -1260);
    secp256k1_ge_to_storage(e[0]:int + j + -896, d + -1176);
    secp256k1_ge_to_storage(e[0]:int + j + -832, d + -1092);
    secp256k1_ge_to_storage(e[0]:int + j + -768, d + -1008);
    secp256k1_ge_to_storage(e[0]:int + j + -704, d + -924);
    secp256k1_ge_to_storage(e[0]:int + j + -640, d + -840);
    secp256k1_ge_to_storage(e[0]:int + j + -576, d + -756);
    secp256k1_ge_to_storage(e[0]:int + j + -512, d + -672);
    secp256k1_ge_to_storage(e[0]:int + j + -448, d + -588);
    secp256k1_ge_to_storage(e[0]:int + j + -384, d + -504);
    secp256k1_ge_to_storage(e[0]:int + j + -320, d + -420);
    secp256k1_ge_to_storage(e[0]:int + j + -256, d + -336);
    secp256k1_ge_to_storage(e[0]:int + j + -192, d + -252);
    secp256k1_ge_to_storage(e[0]:int + j + -128, d + -168);
    secp256k1_ge_to_storage(e[0]:int + j + -64, d + -84);
    secp256k1_ge_to_storage(e[0]:int + j, d);
    d = d + 1344;
    j = j + 1024;
    if (j != 66496) continue L_da;
  }
  secp256k1_ecmult_gen_blind(e, 0);
  label B_i:
  if (eqz(b & 256)) goto B_ea;
  if (a[0]:int) goto B_ea;
  (c + 296)[0]:long = d_DG30FKE7I6J841A9C2B5HLSucces[682]:long@4;
  (c + 304)[0]:long = d_DG30FKE7I6J841A9C2B5HLSucces[684]:long@4;
  (c + 312)[0]:long = d_DG30FKE7I6J841A9C2B5HLSucces[686]:long@4;
  (c + 320)[0]:long = d_DG30FKE7I6J841A9C2B5HLSucces[688]:long@4;
  (c + 336)[0]:long = d_DG30FKE7I6J841A9C2B5HLSucces[692]:long@4;
  (c + 344)[0]:long = d_DG30FKE7I6J841A9C2B5HLSucces[694]:long@4;
  (c + 352)[0]:long = d_DG30FKE7I6J841A9C2B5HLSucces[696]:long@4;
  (c + 360)[0]:long = d_DG30FKE7I6J841A9C2B5HLSucces[698]:long@4;
  c[102]:int = 0;
  c[36]:long = d_DG30FKE7I6J841A9C2B5HLSucces[680]:long@4;
  c[41]:long = d_DG30FKE7I6J841A9C2B5HLSucces[690]:long@4;
  (c + 404)[0]:int = 0;
  (c + 396)[0]:long@4 = 0L;
  (c + 388)[0]:long@4 = 0L;
  (c + 380)[0]:long@4 = 0L;
  (c + 372)[0]:long@4 = 0L;
  a[0]:int = k;
  c[92]:int = 1;
  secp256k1_ecmult_odd_multiples_table_storage_var(k, c + 288);
  a[1]:int = k + 524288;
  memcpy(c + 127520, c + 288, 124);
  d = 128;
  loop L_fa {
    if (eqz(c[31910]:int)) goto B_ha;
    c[31910]:int = 1;
    goto B_ga;
    label B_ha:
    secp256k1_gej_double(c + 127520, c + 127520);
    label B_ga:
    d = d + -1;
    if (d) continue L_fa;
  }
  secp256k1_ecmult_odd_multiples_table_storage_var(a[1]:int, c + 127520);
  label B_ea:
  a[46]:int = b >> 10 & 1;
  g_a = c + 213664;
  return a;
  label B_h:
  c[0]:int = 68096;
  fprintf(d_DG30FKE7I6J841A9C2B5HLSucces[0]:int, 68495, c);
  abort();
  unreachable;
  label B_g:
  c[4]:int = 68120;
  fprintf(d_DG30FKE7I6J841A9C2B5HLSucces[0]:int, 68532, c + 16);
  abort();
  return unreachable;
}

function secp256k1_sha256_transform(a:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }, b:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int, j:int, k:int, l:int, m:int, n:int, o:int, p:int }) {
  var c:int;
  var d:int;
  var e:int;
  var f:int;
  var g:int;
  var h:int;
  var i:int;
  var j:int;
  var k:int;
  var l:int;
  var m:int;
  var n:int;
  var o:int;
  var p:int;
  var q:int;
  var r:int;
  var s:int;
  var t:int;
  var u:int;
  var v:int;
  var w:int;
  var x:int;
  var y:int;
  var z:int;
  var aa:int;
  var ba:int;
  var ca:int;
  var da:int;
  var ea:int;
  var fa:int;
  var ga:int;
  var ha:int;
  var ia:int;
  var ja:int;
  var ka:int;
  var la:int;
  var ma:int;
  var na:int;
  var oa:int;
  var pa:int;
  var qa:int;
  var ra:int;
  var sa:int;
  var ta:int;
  var ua:int;
  var va:int;
  var wa:int;
  var xa:int;
  var ya:int;
  var za:int;
  var ab:int;
  var bb:int;
  var cb:int;
  var db:int;
  var eb:int;
  var fb:int;
  var gb:int;
  var hb:int;
  var ib:int;
  var jb:int;
  var kb:int;
  var lb:int;
  var mb:int;
  var nb:int;
  var ob:int;
  var pb:int;
  var qb:int;
  var rb:int;
  var sb:int;
  a.h = 
    (v = 
       (ba = 
          (hb = 
             (((sa = 
                  (((da = 
                       (((c = ((c = b.p) << 24 | (c << 8 & 16711680)) | 
                              ((c >> 8 & 65280) | c >> 24)) << 
                         14 ^ 
                         c >> 3) ^ 
                        c << 25) + 
                       (d = ((d = b.o) << 24 | (d << 8 & 16711680)) | 
                            ((d >> 8 & 65280) | d >> 24)) + 
                       (u = 
                          (((f = ((e = b.i) << 24 | (e << 8 & 16711680)) | 
                                 ((e >> 8 & 65280) | e >> 24)) << 
                            14 ^ 
                            f >> 3) ^ 
                           f << 25) + 
                          (g = ((e = b.h) << 24 | (e << 8 & 16711680)) | 
                               ((e >> 8 & 65280) | e >> 24)) + 
                          (e = (((h = ((e = b.b) << 24 | (e << 8 & 16711680)) | 
                                      ((e >> 8 & 65280) | e >> 24)) << 
                                 14 ^ 
                                 h >> 3) ^ 
                                h << 25) + 
                               (i = ((e = b.a) << 24 | (e << 8 & 16711680)) | 
                                    ((e >> 8 & 65280) | e >> 24)) + 
                               (j = ((e = b.j) << 24 | (e << 8 & 16711680)) | 
                                    ((e >> 8 & 65280) | e >> 24)) + 
                               ((d << 13 ^ d >> 10) ^ d << 15)) + 
                          (((t = (((l = ((k = b.g) << 24 | (k << 8 & 16711680)) | 
                                        ((k >> 8 & 65280) | k >> 24)) << 
                                   14 ^ 
                                   l >> 3) ^ 
                                  l << 25) + 
                                 (m = ((k = b.f) << 24 | (k << 8 & 16711680)) | 
                                      ((k >> 8 & 65280) | k >> 24)) + 
                                 d + 
                                 (((s = (((n = ((k = b.e) << 24 | (k << 8 & 16711680)) | 
                                               ((k >> 8 & 65280) | k >> 24)) << 
                                          14 ^ 
                                          n >> 3) ^ 
                                         n << 25) + 
                                        (o = ((k = b.d) << 24 | (k << 8 & 16711680)) | 
                                             ((k >> 8 & 65280) | k >> 24)) + 
                                        (p = ((k = b.m) << 24 | (k << 8 & 16711680)) | 
                                             ((k >> 8 & 65280) | k >> 24)) + 
                                        (((k = (((q = ((k = b.c) << 24 | (k << 8 & 16711680)) | 
                                                      ((k >> 8 & 65280) | k >> 24)) << 
                                                 14 ^ 
                                                 q >> 3) ^ 
                                                q << 25) + 
                                               h + 
                                               (r = ((k = b.k) << 24 | (k << 8 & 16711680)) | 
                                                    ((k >> 8 & 65280) | k >> 24)) + 
                                               ((c << 13 ^ c >> 10) ^ c << 15)) << 
                                          13 ^ 
                                          k >> 10) ^ 
                                         k << 15)) << 
                                   13 ^ 
                                   s >> 10) ^ 
                                  s << 15)) << 
                            13 ^ 
                            t >> 10) ^ 
                           t << 15)) + 
                       (((ca = 
                            (((w = ((v = b.n) << 24 | (v << 8 & 16711680)) | 
                                   ((v >> 8 & 65280) | v >> 24)) << 
                              14 ^ 
                              w >> 3) ^ 
                             w << 25) + 
                            p + 
                            t + 
                            (((ba = 
                                 (((x = ((b = b.l) << 24 | (b << 8 & 16711680)) | 
                                        ((b >> 8 & 65280) | b >> 24)) << 
                                   14 ^ 
                                   x >> 3) ^ 
                                  x << 25) + 
                                 r + 
                                 s + 
                                 (((aa = ((j << 14 ^ j >> 3) ^ j << 25) + f + k + 
                                         (((z = ((g << 14 ^ g >> 3) ^ g << 25) + l + c + 
                                                (((y = ((m << 14 ^ m >> 3) ^ m << 25) + n + w + 
                                                       (((v = ((o << 14 ^ o >> 3) ^ o << 25) + q + x + 
                                                              ((e << 13 ^ e >> 10) ^ e << 15)) << 
                                                         13 ^ 
                                                         v >> 10) ^ 
                                                        v << 15)) << 
                                                  13 ^ 
                                                  y >> 10) ^ 
                                                 y << 15)) << 
                                           13 ^ 
                                           z >> 10) ^ 
                                          z << 15)) << 
                                   13 ^ 
                                   aa >> 10) ^ 
                                  aa << 15)) << 
                              13 ^ 
                              ba >> 10) ^ 
                             ba << 15)) << 
                         13 ^ 
                         ca >> 10) ^ 
                        ca << 15)) << 
                    14 ^ 
                    da >> 3) ^ 
                   da << 25) + 
                  (ga = ((d << 14 ^ d >> 3) ^ d << 25) + w + z + 
                        (((fa = ((p << 14 ^ p >> 3) ^ p << 25) + x + y + 
                                (((ea = ((r << 14 ^ r >> 3) ^ r << 25) + j + v + 
                                        ((u << 13 ^ u >> 10) ^ u << 15)) << 
                                  13 ^ 
                                  ea >> 10) ^ 
                                 ea << 15)) << 
                          13 ^ 
                          fa >> 10) ^ 
                         fa << 15)) + 
                  (la = 
                     ((u << 14 ^ u >> 3) ^ u << 25) + z + 
                     (ha = ((e << 14 ^ e >> 3) ^ e << 25) + c + aa + 
                           ((ga << 13 ^ ga >> 10) ^ ga << 15)) + 
                     (((ka = ((t << 14 ^ t >> 3) ^ t << 25) + y + ga + 
                             (((ja = ((s << 14 ^ s >> 3) ^ s << 25) + v + fa + 
                                     (((ia = ((k << 14 ^ k >> 3) ^ k << 25) + e + ea + 
                                             ((da << 13 ^ da >> 10) ^ da << 15)) << 
                                       13 ^ 
                                       ia >> 10) ^ 
                                      ia << 15)) << 
                               13 ^ 
                               ja >> 10) ^ 
                              ja << 15)) << 
                       13 ^ 
                       ka >> 10) ^ 
                      ka << 15)) + 
                  (((ra = 
                       ((ca << 14 ^ ca >> 3) ^ ca << 25) + fa + ka + 
                       (((qa = 
                            ((ba << 14 ^ ba >> 3) ^ ba << 25) + ea + ja + 
                            (((pa = 
                                 ((aa << 14 ^ aa >> 3) ^ aa << 25) + u + ia + 
                                 (((oa = ((z << 14 ^ z >> 3) ^ z << 25) + t + da + 
                                         (((na = ((y << 14 ^ y >> 3) ^ y << 25) + s + ca + 
                                                 (((ma = ((v << 14 ^ v >> 3) ^ v << 25) + k + ba + 
                                                         ((ha << 13 ^ ha >> 10) ^ ha << 15)) << 
                                                   13 ^ 
                                                   ma >> 10) ^ 
                                                  ma << 15)) << 
                                           13 ^ 
                                           na >> 10) ^ 
                                          na << 15)) << 
                                   13 ^ 
                                   oa >> 10) ^ 
                                  oa << 15)) << 
                              13 ^ 
                              pa >> 10) ^ 
                             pa << 15)) << 
                         13 ^ 
                         qa >> 10) ^ 
                        qa << 15)) << 
                    13 ^ 
                    ra >> 10) ^ 
                   ra << 15)) << 
               14 ^ 
               sa >> 3) ^ 
              sa << 25) + 
             (va = ((ga << 14 ^ ga >> 3) ^ ga << 25) + ca + oa + 
                   (((ua = ((fa << 14 ^ fa >> 3) ^ fa << 25) + ba + na + 
                           (((ta = ((ea << 14 ^ ea >> 3) ^ ea << 25) + aa + ma + 
                                   ((la << 13 ^ la >> 10) ^ la << 15)) << 
                             13 ^ 
                             ta >> 10) ^ 
                            ta << 15)) << 
                     13 ^ 
                     ua >> 10) ^ 
                    ua << 15)) + 
             (ab = 
                ((la << 14 ^ la >> 3) ^ la << 25) + oa + 
                (wa = ((ha << 14 ^ ha >> 3) ^ ha << 25) + da + pa + 
                      ((va << 13 ^ va >> 10) ^ va << 15)) + 
                (((za = ((ka << 14 ^ ka >> 3) ^ ka << 25) + na + va + 
                        (((ya = ((ja << 14 ^ ja >> 3) ^ ja << 25) + ma + ua + 
                                (((xa = ((ia << 14 ^ ia >> 3) ^ ia << 25) + ha + ta + 
                                        ((sa << 13 ^ sa >> 10) ^ sa << 15)) << 
                                  13 ^ 
                                  xa >> 10) ^ 
                                 xa << 15)) << 
                          13 ^ 
                          ya >> 10) ^ 
                         ya << 15)) << 
                  13 ^ 
                  za >> 10) ^ 
                 za << 15)) + 
             (((gb = 
                  ((ra << 14 ^ ra >> 3) ^ ra << 25) + ua + za + 
                  (((fb = 
                       ((qa << 14 ^ qa >> 3) ^ qa << 25) + ta + ya + 
                       (((eb = 
                            ((pa << 14 ^ pa >> 3) ^ pa << 25) + la + xa + 
                            (((db = ((oa << 14 ^ oa >> 3) ^ oa << 25) + ka + sa + 
                                    (((cb = ((na << 14 ^ na >> 3) ^ na << 25) + ja + ra + 
                                            (((bb = ((ma << 14 ^ ma >> 3) ^ ma << 25) + ia + qa + 
                                                    ((wa << 13 ^ wa >> 10) ^ wa << 15)) << 
                                              13 ^ 
                                              bb >> 10) ^ 
                                             bb << 15)) << 
                                      13 ^ 
                                      cb >> 10) ^ 
                                     cb << 15)) << 
                              13 ^ 
                              db >> 10) ^ 
                             db << 15)) << 
                         13 ^ 
                         eb >> 10) ^ 
                        eb << 15)) << 
                    13 ^ 
                    fb >> 10) ^ 
                   fb << 15)) << 
               13 ^ 
               gb >> 10) ^ 
              gb << 15)) + 
          (u = 
             (da = 
                fb + 
                (u = 
                   (v = 
                      db + 
                      (u = 
                         (y = 
                            bb + 
                            (u = 
                               (aa = 
                                  va + 
                                  (u = 
                                     (ba = 
                                        ta + 
                                        (u = 
                                           (z = 
                                              ka + 
                                              (u = 
                                                 (v = 
                                                    ia + 
                                                    (u = 
                                                       (y = 
                                                          ca + 
                                                          (u = 
                                                             (aa = 
                                                                aa + 
                                                                (y = 
                                                                   (q = 
                                                                      y + 
                                                                      (q = 
                                                                         (j = 
                                                                            e + 
                                                                            (g = 
                                                                               (x = 
                                                                                  p + 
                                                                                  (g = 
                                                                                     (pb = 
                                                                                        f + 
                                                                                        (i = 
                                                                                           (sb = 
                                                                                              (b = (i = (ib = a.h) + (((jb = a.e) << 26 ^ jb << 21) ^ jb << 7) + 
                                                                                                        ((((kb = a.g) ^ (lb = a.f)) & jb) ^ kb) + 
                                                                                                        i + 
                                                                                                        1116352408) + 
                                                                                                   (mb = a.d)) + 
                                                                                              n + 
                                                                                              (((q = 
                                                                                                   (rb = 
                                                                                                      jb + o + 
                                                                                                      (((o = 
                                                                                                           (pb = 
                                                                                                              lb + q + 
                                                                                                              (((n = 
                                                                                                                   (nb = 
                                                                                                                      kb + h + ((b & (lb ^ jb)) ^ lb) + ((b << 26 ^ b << 21) ^ b << 7) + 
                                                                                                                      1899447441) + 
                                                                                                                   (ob = a.c)) & 
                                                                                                                (b ^ jb)) ^ 
                                                                                                               jb) + 
                                                                                                              ((n << 26 ^ n << 21) ^ n << 7) + 
                                                                                                              -1245643825) + 
                                                                                                           (qb = a.b)) & 
                                                                                                        (n ^ b)) ^ 
                                                                                                       b) + 
                                                                                                      ((o << 26 ^ o << 21) ^ o << 7) + 
                                                                                                      -373957723) + 
                                                                                                   (b = a.a)) & 
                                                                                                (o ^ n)) ^ 
                                                                                               n) + 
                                                                                              ((q << 26 ^ q << 21) ^ q << 7) + 
                                                                                              961987163) + 
                                                                                           (h = 
                                                                                              ((b << 30 ^ b << 19) ^ b << 10) + ((ob & (qb | b)) | (qb & b)) + i)) + 
                                                                                        (((i = 
                                                                                             (nb = 
                                                                                                g + q + 
                                                                                                (((q = 
                                                                                                     (m = 
                                                                                                        l + o + 
                                                                                                        (((f = 
                                                                                                             (l = m + n + ((i & (q ^ o)) ^ o) + ((i << 26 ^ i << 21) ^ i << 7) + 
                                                                                                                  1508970993) + 
                                                                                                             (n = ((h << 30 ^ h << 19) ^ h << 10) + (((h | b) & qb) | (h & b)) + nb)) & 
                                                                                                          (i ^ q)) ^ 
                                                                                                         q) + 
                                                                                                        ((f << 26 ^ f << 21) ^ f << 7) + 
                                                                                                        -1841331548) + 
                                                                                                     (o = ((n << 30 ^ n << 19) ^ n << 10) + (((n | h) & b) | (n & h)) + pb)) & 
                                                                                                  (f ^ i)) ^ 
                                                                                                 i) + 
                                                                                                ((q << 26 ^ q << 21) ^ q << 7) + 
                                                                                                -1424204075) + 
                                                                                             (h = ((o << 30 ^ o << 19) ^ o << 10) + (((o | n) & h) | (o & n)) + rb)) & 
                                                                                          (q ^ f)) ^ 
                                                                                         f) + 
                                                                                        ((i << 26 ^ i << 21) ^ i << 7) + 
                                                                                        -670586216) + 
                                                                                     (n = ((h << 30 ^ h << 19) ^ h << 10) + (((h | o) & n) | (h & o)) + sb)) + 
                                                                                  (((f = 
                                                                                       (r = 
                                                                                          x + i + 
                                                                                          (((i = 
                                                                                               (p = 
                                                                                                  r + q + 
                                                                                                  (((q = 
                                                                                                       (j = j + f + ((g & (i ^ q)) ^ q) + ((g << 26 ^ g << 21) ^ g << 7) + 
                                                                                                            310598401) + 
                                                                                                       (o = ((n << 30 ^ n << 19) ^ n << 10) + (((n | h) & o) | (n & h)) + l)) & 
                                                                                                    (g ^ i)) ^ 
                                                                                                   i) + 
                                                                                                  ((q << 26 ^ q << 21) ^ q << 7) + 
                                                                                                  607225278) + 
                                                                                               (h = ((o << 30 ^ o << 19) ^ o << 10) + (((o | n) & h) | (o & n)) + m)) & 
                                                                                            (q ^ g)) ^ 
                                                                                           g) + 
                                                                                          ((i << 26 ^ i << 21) ^ i << 7) + 
                                                                                          1426881987) + 
                                                                                       (n = ((h << 30 ^ h << 19) ^ h << 10) + (((h | o) & n) | (h & o)) + nb)) & 
                                                                                    (i ^ q)) ^ 
                                                                                   q) + 
                                                                                  ((f << 26 ^ f << 21) ^ f << 7) + 
                                                                                  1925078388) + 
                                                                               (o = ((n << 30 ^ n << 19) ^ n << 10) + (((n | h) & o) | (n & h)) + pb)) + 
                                                                            (((o = 
                                                                                 (g = 
                                                                                    c + f + 
                                                                                    (((n = 
                                                                                         (f = 
                                                                                            d + i + 
                                                                                            (((h = 
                                                                                                 (i = w + q + ((g & (f ^ i)) ^ i) + ((g << 26 ^ g << 21) ^ g << 7) + 
                                                                                                      -2132889090) + 
                                                                                                 (c = ((o << 30 ^ o << 19) ^ o << 10) + (((o | n) & h) | (o & n)) + j)) & 
                                                                                              (g ^ f)) ^ 
                                                                                             f) + 
                                                                                            ((h << 26 ^ h << 21) ^ h << 7) + 
                                                                                            -1680079193) + 
                                                                                         (d = ((c << 30 ^ c << 19) ^ c << 10) + (((c | o) & n) | (c & o)) + p)) & 
                                                                                      (h ^ g)) ^ 
                                                                                     g) + 
                                                                                    ((n << 26 ^ n << 21) ^ n << 7) + 
                                                                                    -1046744716) + 
                                                                                 (e = ((d << 30 ^ d << 19) ^ d << 10) + (((d | c) & o) | (d & c)) + r)) & 
                                                                              (n ^ h)) ^ 
                                                                             h) + 
                                                                            ((o << 26 ^ o << 21) ^ o << 7) + 
                                                                            -459576895) + 
                                                                         (c = ((e << 30 ^ e << 19) ^ e << 10) + (((e | d) & c) | (e & d)) + x)) + 
                                                                      (((v = 
                                                                           (o = 
                                                                              s + o + 
                                                                              (((s = 
                                                                                   (n = 
                                                                                      v + n + 
                                                                                      (((k = 
                                                                                           (h = k + h + ((q & (o ^ n)) ^ n) + ((q << 26 ^ q << 21) ^ q << 7) + 
                                                                                                -272742522) + 
                                                                                           (d = ((c << 30 ^ c << 19) ^ c << 10) + (((c | e) & d) | (c & e)) + i)) & 
                                                                                        (q ^ o)) ^ 
                                                                                       o) + 
                                                                                      ((k << 26 ^ k << 21) ^ k << 7) + 
                                                                                      264347078) + 
                                                                                   (e = ((d << 30 ^ d << 19) ^ d << 10) + (((d | c) & e) | (d & c)) + f)) & 
                                                                                (k ^ q)) ^ 
                                                                               q) + 
                                                                              ((s << 26 ^ s << 21) ^ s << 7) + 
                                                                              604807628) + 
                                                                           (c = ((e << 30 ^ e << 19) ^ e << 10) + (((e | d) & c) | (e & d)) + g)) & 
                                                                        (s ^ k)) ^ 
                                                                       k) + 
                                                                      ((v << 26 ^ v << 21) ^ v << 7) + 
                                                                      770255983) + 
                                                                   (d = ((c << 30 ^ c << 19) ^ c << 10) + (((c | e) & d) | (c & e)) + j)) + 
                                                                (((t = 
                                                                     (y = 
                                                                        u + v + 
                                                                        (((s = 
                                                                             (v = 
                                                                                z + s + 
                                                                                (((k = 
                                                                                     (z = t + k + ((y & (v ^ s)) ^ s) + ((y << 26 ^ y << 21) ^ y << 7) + 
                                                                                          1249150122) + 
                                                                                     (e = ((d << 30 ^ d << 19) ^ d << 10) + (((d | c) & e) | (d & c)) + h)) & 
                                                                                  (y ^ v)) ^ 
                                                                                 v) + 
                                                                                ((k << 26 ^ k << 21) ^ k << 7) + 
                                                                                1555081692) + 
                                                                             (c = ((e << 30 ^ e << 19) ^ e << 10) + (((e | d) & c) | (e & d)) + n)) & 
                                                                          (k ^ y)) ^ 
                                                                         y) + 
                                                                        ((s << 26 ^ s << 21) ^ s << 7) + 
                                                                        1996064986) + 
                                                                     (d = ((c << 30 ^ c << 19) ^ c << 10) + (((c | e) & d) | (c & e)) + o)) & 
                                                                  (s ^ k)) ^ 
                                                                 k) + 
                                                                ((t << 26 ^ t << 21) ^ t << 7) + 
                                                                -1740746414) + 
                                                             (e = ((d << 30 ^ d << 19) ^ d << 10) + (((d | c) & e) | (d & c)) + q)) + 
                                                          (((t = 
                                                               (v = 
                                                                  fa + t + 
                                                                  (((s = 
                                                                       (z = 
                                                                          ba + s + 
                                                                          (((k = 
                                                                               (ba = ea + k + ((u & (t ^ s)) ^ s) + ((u << 26 ^ u << 21) ^ u << 7) + 
                                                                                     -1473132947) + 
                                                                               (c = ((e << 30 ^ e << 19) ^ e << 10) + (((e | d) & c) | (e & d)) + z)) & 
                                                                            (u ^ t)) ^ 
                                                                           t) + 
                                                                          ((k << 26 ^ k << 21) ^ k << 7) + 
                                                                          -1341970488) + 
                                                                       (d = ((c << 30 ^ c << 19) ^ c << 10) + (((c | e) & d) | (c & e)) + v)) & 
                                                                    (k ^ u)) ^ 
                                                                   u) + 
                                                                  ((s << 26 ^ s << 21) ^ s << 7) + 
                                                                  -1084653625) + 
                                                               (e = ((d << 30 ^ d << 19) ^ d << 10) + (((d | c) & e) | (d & c)) + y)) & 
                                                            (s ^ k)) ^ 
                                                           k) + 
                                                          ((t << 26 ^ t << 21) ^ t << 7) + 
                                                          -958395405) + 
                                                       (c = ((e << 30 ^ e << 19) ^ e << 10) + (((e | d) & c) | (e & d)) + aa)) + 
                                                    (((t = 
                                                         (z = 
                                                            ha + t + 
                                                            (((s = 
                                                                 (ba = 
                                                                    da + s + 
                                                                    (((k = 
                                                                         (aa = ga + k + ((u & (t ^ s)) ^ s) + ((u << 26 ^ u << 21) ^ u << 7) + 
                                                                               -710438585) + 
                                                                         (d = ((c << 30 ^ c << 19) ^ c << 10) + (((c | e) & d) | (c & e)) + ba)) & 
                                                                      (u ^ t)) ^ 
                                                                     t) + 
                                                                    ((k << 26 ^ k << 21) ^ k << 7) + 
                                                                    113926993) + 
                                                                 (e = ((d << 30 ^ d << 19) ^ d << 10) + (((d | c) & e) | (d & c)) + z)) & 
                                                              (k ^ u)) ^ 
                                                             u) + 
                                                            ((s << 26 ^ s << 21) ^ s << 7) + 
                                                            338241895) + 
                                                         (c = ((e << 30 ^ e << 19) ^ e << 10) + (((e | d) & c) | (e & d)) + v)) & 
                                                      (s ^ k)) ^ 
                                                     k) + 
                                                    ((t << 26 ^ t << 21) ^ t << 7) + 
                                                    666307205) + 
                                                 (d = ((c << 30 ^ c << 19) ^ c << 10) + (((c | e) & d) | (c & e)) + y)) + 
                                              (((t = 
                                                   (ba = 
                                                      na + t + 
                                                      (((s = 
                                                           (aa = 
                                                              ja + s + 
                                                              (((k = 
                                                                   (y = ma + k + ((u & (t ^ s)) ^ s) + ((u << 26 ^ u << 21) ^ u << 7) + 
                                                                        773529912) + 
                                                                   (e = ((d << 30 ^ d << 19) ^ d << 10) + (((d | c) & e) | (d & c)) + aa)) & 
                                                                (u ^ t)) ^ 
                                                               t) + 
                                                              ((k << 26 ^ k << 21) ^ k << 7) + 
                                                              1294757372) + 
                                                           (c = ((e << 30 ^ e << 19) ^ e << 10) + (((e | d) & c) | (e & d)) + ba)) & 
                                                        (k ^ u)) ^ 
                                                       u) + 
                                                      ((s << 26 ^ s << 21) ^ s << 7) + 
                                                      1396182291) + 
                                                   (d = ((c << 30 ^ c << 19) ^ c << 10) + (((c | e) & d) | (c & e)) + z)) & 
                                                (s ^ k)) ^ 
                                               k) + 
                                              ((t << 26 ^ t << 21) ^ t << 7) + 
                                              1695183700) + 
                                           (e = ((d << 30 ^ d << 19) ^ d << 10) + (((d | c) & e) | (d & c)) + v)) + 
                                        (((t = 
                                             (aa = 
                                                pa + t + 
                                                (((s = 
                                                     (y = 
                                                        la + s + 
                                                        (((k = 
                                                             (v = oa + k + ((u & (t ^ s)) ^ s) + ((u << 26 ^ u << 21) ^ u << 7) + 
                                                                  1986661051) + 
                                                             (c = ((e << 30 ^ e << 19) ^ e << 10) + (((e | d) & c) | (e & d)) + y)) & 
                                                          (u ^ t)) ^ 
                                                         t) + 
                                                        ((k << 26 ^ k << 21) ^ k << 7) + 
                                                        -2117940946) + 
                                                     (d = ((c << 30 ^ c << 19) ^ c << 10) + (((c | e) & d) | (c & e)) + aa)) & 
                                                  (k ^ u)) ^ 
                                                 u) + 
                                                ((s << 26 ^ s << 21) ^ s << 7) + 
                                                -1838011259) + 
                                             (e = ((d << 30 ^ d << 19) ^ d << 10) + (((d | c) & e) | (d & c)) + ba)) & 
                                          (s ^ k)) ^ 
                                         k) + 
                                        ((t << 26 ^ t << 21) ^ t << 7) + 
                                        -1564481375) + 
                                     (c = ((e << 30 ^ e << 19) ^ e << 10) + (((e | d) & c) | (e & d)) + z)) + 
                                  (((t = 
                                       (y = 
                                          ra + t + 
                                          (((s = 
                                               (v = 
                                                  ua + s + 
                                                  (((k = 
                                                       (z = qa + k + ((u & (t ^ s)) ^ s) + ((u << 26 ^ u << 21) ^ u << 7) + 
                                                            -1474664885) + 
                                                       (d = ((c << 30 ^ c << 19) ^ c << 10) + (((c | e) & d) | (c & e)) + v)) & 
                                                    (u ^ t)) ^ 
                                                   t) + 
                                                  ((k << 26 ^ k << 21) ^ k << 7) + 
                                                  -1035236496) + 
                                               (e = ((d << 30 ^ d << 19) ^ d << 10) + (((d | c) & e) | (d & c)) + y)) & 
                                            (k ^ u)) ^ 
                                           u) + 
                                          ((s << 26 ^ s << 21) ^ s << 7) + 
                                          -949202525) + 
                                       (c = ((e << 30 ^ e << 19) ^ e << 10) + (((e | d) & c) | (e & d)) + aa)) & 
                                    (s ^ k)) ^ 
                                   k) + 
                                  ((t << 26 ^ t << 21) ^ t << 7) + 
                                  -778901479) + 
                               (d = ((c << 30 ^ c << 19) ^ c << 10) + (((c | e) & d) | (c & e)) + ba)) + 
                            (((t = 
                                 (v = 
                                    xa + t + 
                                    (((s = 
                                         (z = 
                                            wa + s + 
                                            (((k = 
                                                 (ba = sa + k + ((u & (t ^ s)) ^ s) + ((u << 26 ^ u << 21) ^ u << 7) + 
                                                       -694614492) + 
                                                 (e = ((d << 30 ^ d << 19) ^ d << 10) + (((d | c) & e) | (d & c)) + z)) & 
                                              (u ^ t)) ^ 
                                             t) + 
                                            ((k << 26 ^ k << 21) ^ k << 7) + 
                                            -200395387) + 
                                         (c = ((e << 30 ^ e << 19) ^ e << 10) + (((e | d) & c) | (e & d)) + v)) & 
                                      (k ^ u)) ^ 
                                     u) + 
                                    ((s << 26 ^ s << 21) ^ s << 7) + 
                                    275423344) + 
                                 (d = ((c << 30 ^ c << 19) ^ c << 10) + (((c | e) & d) | (c & e)) + y)) & 
                              (s ^ k)) ^ 
                             k) + 
                            ((t << 26 ^ t << 21) ^ t << 7) + 
                            430227734) + 
                         (e = ((d << 30 ^ d << 19) ^ d << 10) + (((d | c) & e) | (d & c)) + aa)) + 
                      (((t = 
                           (z = 
                              za + t + 
                              (((s = 
                                   (ba = 
                                      cb + s + 
                                      (((k = 
                                           (aa = ya + k + ((u & (t ^ s)) ^ s) + ((u << 26 ^ u << 21) ^ u << 7) + 
                                                 506948616) + 
                                           (c = ((e << 30 ^ e << 19) ^ e << 10) + (((e | d) & c) | (e & d)) + ba)) & 
                                        (u ^ t)) ^ 
                                       t) + 
                                      ((k << 26 ^ k << 21) ^ k << 7) + 
                                      659060556) + 
                                   (d = ((c << 30 ^ c << 19) ^ c << 10) + (((c | e) & d) | (c & e)) + z)) & 
                                (k ^ u)) ^ 
                               u) + 
                              ((s << 26 ^ s << 21) ^ s << 7) + 
                              883997877) + 
                           (e = ((d << 30 ^ d << 19) ^ d << 10) + (((d | c) & e) | (d & c)) + v)) & 
                        (s ^ k)) ^ 
                       k) + 
                      ((t << 26 ^ t << 21) ^ t << 7) + 
                      958139571) + 
                   (c = ((e << 30 ^ e << 19) ^ e << 10) + (((e | d) & c) | (e & d)) + y)) + 
                (((t = 
                     (ba = 
                        (y = ((ta << 14 ^ ta >> 3) ^ ta << 25) + pa + bb + 
                             ((ab << 13 ^ ab >> 10) ^ ab << 15)) + 
                        t + 
                        (((s = 
                             (aa = 
                                eb + s + 
                                (((k = 
                                     (ca = ab + k + ((u & (t ^ s)) ^ s) + ((u << 26 ^ u << 21) ^ u << 7) + 
                                           1322822218) + 
                                     (d = ((c << 30 ^ c << 19) ^ c << 10) + (((c | e) & d) | (c & e)) + aa)) & 
                                  (u ^ t)) ^ 
                                 t) + 
                                ((k << 26 ^ k << 21) ^ k << 7) + 
                                1537002063) + 
                             (e = ((d << 30 ^ d << 19) ^ d << 10) + (((d | c) & e) | (d & c)) + ba)) & 
                          (k ^ u)) ^ 
                         u) + 
                        ((s << 26 ^ s << 21) ^ s << 7) + 
                        1747873779) + 
                     (c = ((e << 30 ^ e << 19) ^ e << 10) + (((e | d) & c) | (e & d)) + z)) & 
                  (s ^ k)) ^ 
                 k) + 
                ((t << 26 ^ t << 21) ^ t << 7) + 
                1955562222) + 
             (d = ((c << 30 ^ c << 19) ^ c << 10) + (((c | e) & d) | (c & e)) + v)) + 
          (((u = 
               (aa = 
                  (z = ((va << 14 ^ va >> 3) ^ va << 25) + ra + db + 
                       (((v = ((ua << 14 ^ ua >> 3) ^ ua << 25) + qa + cb + 
                              ((y << 13 ^ y >> 10) ^ y << 15)) << 
                         13 ^ 
                         v >> 10) ^ 
                        v << 15)) + 
                  t + 
                  (((t = 
                       (ca = 
                          gb + s + 
                          (((s = 
                               (k = v + k + ((u & (t ^ s)) ^ s) + ((u << 26 ^ u << 21) ^ u << 7) + 
                                    2024104815) + 
                               (e = ((d << 30 ^ d << 19) ^ d << 10) + (((d | c) & e) | (d & c)) + ca)) & 
                            (u ^ t)) ^ 
                           t) + 
                          ((s << 26 ^ s << 21) ^ s << 7) + 
                          -2067236844) + 
                       (c = ((e << 30 ^ e << 19) ^ e << 10) + (((e | d) & c) | (e & d)) + aa)) & 
                    (s ^ u)) ^ 
                   u) + 
                  ((t << 26 ^ t << 21) ^ t << 7) + 
                  -1933114872) + 
               (d = ((c << 30 ^ c << 19) ^ c << 10) + (((c | e) & d) | (c & e)) + ba)) & 
            (t ^ s)) ^ 
           s) + 
          ((u << 26 ^ u << 21) ^ u << 7) + 
          -1866530822) + 
       (e = ((d << 30 ^ d << 19) ^ d << 10) + (((d | c) & e) | (d & c)) + da)) + 
    ib;
  a.d = 
    mb + 
    (k = 
       (((e = 
            (((d = 
                 (((c = ((e << 30 ^ e << 19) ^ e << 10) + (((e | d) & c) | (e & d)) + k) << 
                   30 ^ 
                   c << 19) ^ 
                  c << 10) + 
                 (((c | e) & d) | (c & e)) + 
                 ca) << 
              30 ^ 
              d << 19) ^ 
             d << 10) + 
            (((d | c) & e) | (d & c)) + 
            aa) << 
         30 ^ 
         e << 19) ^ 
        e << 10) + 
       (((e | d) & c) | (e & d)) + 
       ba);
  a.g = 
    kb + 
    (s = (aa = (z = ((wa << 14 ^ wa >> 3) ^ wa << 25) + sa + eb + 
                    ((z << 13 ^ z >> 10) ^ z << 15)) + 
               s + 
               ((v & (u ^ t)) ^ t) + 
               ((v << 26 ^ v << 21) ^ v << 7) + 
               -1538233109) + 
         c);
  a.c = 
    ob + 
    (c = ((k << 30 ^ k << 19) ^ k << 10) + (((k | e) & d) | (k & e)) + aa);
  a.f = 
    lb + 
    (t = (y = wa + ((xa << 14 ^ xa >> 3) ^ xa << 25) + y + 
              ((hb << 13 ^ hb >> 10) ^ hb << 15) + 
              t + 
              ((s & (v ^ u)) ^ u) + 
              ((s << 26 ^ s << 21) ^ s << 7) + 
              -1090935817) + 
         d);
  a.b = 
    qb + 
    (d = ((c << 30 ^ c << 19) ^ c << 10) + (((c | k) & e) | (c & k)) + y);
  a.e = 
    e + jb + 
    (e = xa + ((bb << 14 ^ bb >> 3) ^ bb << 25) + fb + 
         ((z << 13 ^ z >> 10) ^ z << 15) + 
         u + 
         ((t & (s ^ v)) ^ v) + 
         ((t << 26 ^ t << 21) ^ t << 7) + 
         -965641998);
  a.a = 
    b + (((d | c) & k) | (d & c)) + ((d << 30 ^ d << 19) ^ d << 10) + e;
}

function secp256k1_fe_set_b32(a:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int, j:int }, b:{ a:ubyte, b:ubyte, c:ubyte, d:ubyte, e:ubyte, f:ubyte, g:ubyte, h:ubyte, i:ubyte, j:ubyte, k:ubyte, l:ubyte, m:ubyte, n:ubyte, o:ubyte, p:ubyte, q:ubyte, r:ubyte, s:ubyte, t:ubyte, u:ubyte, v:ubyte, w:ubyte, x:ubyte, y:ubyte, z:ubyte, aa:ubyte, ba:ubyte, ca:ubyte, da:ubyte, ea:ubyte, fa:ubyte }):int {
  var c:int;
  var d:int;
  var e:int;
  var f:int;
  var g:int;
  var h:int;
  var i:int;
  var j:int;
  var k:int;
  a.a = (c = ((b.ea << 8 | b.fa) | b.da << 16) | (b.ca & 3) << 24);
  a.b = (d = ((b.ba << 6 | b.ca >> 2) | b.aa << 14) | (b.z & 15) << 22);
  a.c = (e = ((b.y << 4 | b.z >> 4) | b.x << 12) | (b.w & 63) << 20);
  a.d = (f = ((b.v << 2 | b.w >> 6) | b.u << 10) | b.t << 18);
  a.e = (g = ((b.r << 8 | b.s) | b.q << 16) | (b.p & 3) << 24);
  a.f = (h = ((b.o << 6 | b.p >> 2) | b.n << 14) | (b.m & 15) << 22);
  a.g = (i = ((b.l << 4 | b.m >> 4) | b.k << 12) | (b.j & 63) << 20);
  a.h = (j = ((b.i << 2 | b.j >> 6) | b.h << 10) | b.g << 18);
  a.i = (k = ((b.e << 8 | b.f) | b.d << 16) | (b.c & 3) << 24);
  a.j = (b = (b.b << 6 | b.c >> 2) | b.a << 14);
  return 
    (c + 977 >> 26 | 64) + d < 67108864 | 
    (b != 4194303 | ((((((f & e) & g) & h) & i) & j) & k) != 67108863);
}

function secp256k1_fe_sqr(a:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int, j:int }, b:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int, j:uint }) {
  var c:int;
  var d:long;
  var e:int;
  var f:long;
  var g:int;
  var h:long;
  var i:int;
  var j:long;
  var k:int;
  var l:long;
  var m:long;
  var n:long;
  var o:long;
  var p:int;
  var q:long;
  var r:int;
  var s:long;
  var t:long;
  var u:long;
  var v:long;
  var w:long;
  var x:long;
  var y:long;
  var z:long;
  var aa:long;
  var ba:long;
  var ca:long;
  var da:long;
  a.d = 
    i32_wrap_i64(
      da = 
        (d = i64_extend_i32_u(c = b.d)) * 
        (f = i64_extend_i32_u((e = b.a) << 1)) + 
        (h = i64_extend_i32_u(g = b.c)) * 
        (j = i64_extend_i32_u((i = b.b) << 1)) + 
        ((aa = 
            (z = 
               (l = i64_extend_i32_u(k = b.g)) * l + 
               (m = i64_extend_i32_u(c << 1)) * (n = b.j) + 
               (o = i64_extend_i32_u((c = b.e) << 1)) * 
               (q = i64_extend_i32_u(p = b.i)) + 
               (s = i64_extend_i32_u((r = b.f) << 1)) * 
               (t = i64_extend_i32_u(b = b.h)) + 
               ((y = 
                   m * q + (u = i64_extend_i32_u(g << 1)) * n + o * t + s * l + 
                   ((x = u * q + j * n + m * t + o * l + (v = i64_extend_i32_u(r)) * v + 
                         ((w = j * q + f * n + u * t + m * l + o * v) >> 26L)) >> 
                    26L)) >> 
                26L)) & 
            67108863L) << 
         10L) + 
        (ca = 
           (z = o * n + (ba = i64_extend_i32_u(k << 1)) * t + s * q + (z >> 26L)) & 
           67108863L) * 
        15632L + 
        ((aa = 
            h * f + (o = i64_extend_i32_u(i)) * o + ((y = y & 67108863L) << 10L) + 
            aa * 15632L + 
            ((y = ((x = x & 67108863L) << 10L) + o * f + 
                  ((x = x * 15632L + (o = i64_extend_i32_u(e)) * o) >> 26L) + 
                  y * 15632L) >> 
             26L)) >> 
         26L)) & 
    67108863;
  a.e = 
    i32_wrap_i64(
      z = 
        d * j + h * h + (o = i64_extend_i32_u(c)) * f + (ca << 10L) + 
        (s = (h = ba * q + t * t + s * n + (z >> 26L)) & 67108863L) * 15632L + 
        (da >> 26L)) & 
    67108863;
  a.f = 
    i32_wrap_i64(
      z = 
        o * j + d * u + v * f + (s << 10L) + 
        (ba = 
           (h = ba * n + (s = i64_extend_i32_u(b << 1)) * q + (h >> 26L)) & 
           67108863L) * 
        15632L + 
        (z >> 26L)) & 
    67108863;
  a.g = 
    i32_wrap_i64(
      s = l * f + d * d + o * u + v * j + (ba << 10L) + 
          (h = (d = s * n + q * q + (h >> 26L)) & 67108863L) * 15632L + 
          (z >> 26L)) & 
    67108863;
  a.h = 
    i32_wrap_i64(
      s = 
        l * j + t * f + o * m + v * u + (h << 10L) + 
        (h = (d = (d >> 26L) + n * i64_extend_i32_u(p << 1)) & 67108863L) * 
        15632L + 
        (s >> 26L)) & 
    67108863;
  a.i = 
    i32_wrap_i64(
      f = t * j + q * f + l * u + o * o + v * m + (h << 10L) + 
          (q = (n = (d >> 26L) + n * n) & 67108863L) * 15632L + 
          (s >> 26L)) & 
    67108863;
  a.j = 
    i32_wrap_i64(
      q = 
        (n = n >> 26L) * 15632L + (w & 67108863L) + (q << 10L) + (f >> 26L)) & 
    4194303;
  a.a = 
    i32_wrap_i64(
      q = (n = (q >> 22L) + (n << 14L)) * 977L + (x & 67108863L)) & 
    67108863;
  a.c = 
    ((n = (n << 6L) + (y & 67108863L) + (q >> 26L)) >> 26L) + 
    (aa & 67108863L);
  a.b = i32_wrap_i64(n) & 67108863;
}

function secp256k1_fe_mul(a:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int, j:int }, b:{ a:uint, b:uint, c:uint, d:uint, e:uint, f:uint, g:uint, h:uint, i:uint, j:uint }, c:{ a:uint, b:uint, c:uint, d:uint, e:uint, f:uint, g:uint, h:uint, i:uint, j:uint }) {
  var d:long;
  var e:long;
  var f:long;
  var g:long;
  var h:long;
  var i:long;
  var j:long;
  var k:long;
  var l:long;
  var m:long;
  var n:long;
  var o:long;
  var p:long;
  var q:long;
  var r:long;
  var s:long;
  var t:long;
  var u:long;
  var v:long;
  var w:long;
  var x:long;
  var y:long;
  var z:long;
  var aa:long;
  var ba:long;
  var ca:long;
  var da:long;
  a.d = 
    i32_wrap_i64(
      da = 
        (d = c.c) * (e = b.b) + (f = c.d) * (g = b.a) + (h = c.b) * (i = b.c) + 
        (j = c.a) * (k = b.d) + 
        ((ba = 
            (aa = 
               (l = b.e) * (m = c.i) + k * (n = c.j) + (o = b.f) * (p = c.h) + 
               (q = b.g) * (r = c.g) + 
               (s = b.h) * (t = c.f) + 
               (u = b.i) * (v = c.e) + 
               (w = b.j) * f + 
               ((z = 
                   k * m + i * n + l * p + o * r + q * t + s * v + u * f + w * d + 
                   ((y = 
                       i * m + e * n + k * p + l * r + o * t + q * v + s * f + u * d + w * h + 
                       ((x = 
                           m * e + n * g + p * i + r * k + t * l + v * o + f * q + d * s + h * u + 
                           j * w) >> 
                        26L)) >> 
                    26L)) >> 
                26L)) & 
            67108863L) << 
         10L) + 
        (ca = 
           (aa = o * m + l * n + q * p + s * r + u * t + w * v + (aa >> 26L)) & 
           67108863L) * 
        15632L + 
        ((ba = 
            h * e + d * g + j * i + ((z = z & 67108863L) << 10L) + ba * 15632L + 
            ((z = j * e + h * g + ((y = y & 67108863L) << 10L) + 
                  ((y = y * 15632L + j * g) >> 26L) + 
                  z * 15632L) >> 
             26L)) >> 
         26L)) & 
    67108863;
  a.e = 
    i32_wrap_i64(
      da = 
        f * e + v * g + d * i + h * k + j * l + (ca << 10L) + 
        (ca = (aa = q * m + o * n + s * p + u * r + w * t + (aa >> 26L)) & 
              67108863L) * 
        15632L + 
        (da >> 26L)) & 
    67108863;
  a.f = 
    i32_wrap_i64(
      da = 
        v * e + t * g + f * i + d * k + h * l + j * o + (ca << 10L) + 
        (ca = (aa = s * m + q * n + u * p + w * r + (aa >> 26L)) & 67108863L) * 
        15632L + 
        (da >> 26L)) & 
    67108863;
  a.g = 
    i32_wrap_i64(
      da = 
        t * e + r * g + v * i + f * k + d * l + h * o + j * q + (ca << 10L) + 
        (ca = (aa = u * m + s * n + w * p + (aa >> 26L)) & 67108863L) * 
        15632L + 
        (da >> 26L)) & 
    67108863;
  a.h = 
    i32_wrap_i64(
      da = 
        r * e + p * g + t * i + v * k + f * l + d * o + h * q + j * s + 
        (ca << 10L) + 
        (ca = (aa = w * m + u * n + (aa >> 26L)) & 67108863L) * 15632L + 
        (da >> 26L)) & 
    67108863;
  a.i = 
    i32_wrap_i64(
      f = 
        p * e + m * g + r * i + t * k + v * l + f * o + d * q + h * s + j * u + 
        (ca << 10L) + 
        (e = (d = (aa >> 26L) + w * n) & 67108863L) * 15632L + 
        (da >> 26L)) & 
    67108863;
  a.j = 
    i32_wrap_i64(
      e = 
        (d = d >> 26L) * 15632L + (x & 67108863L) + (e << 10L) + (f >> 26L)) & 
    4194303;
  a.a = 
    i32_wrap_i64(
      e = (d = (e >> 22L) + (d << 14L)) * 977L + (y & 67108863L)) & 
    67108863;
  a.c = 
    ((d = (d << 6L) + (z & 67108863L) + (e >> 26L)) >> 26L) + 
    (ba & 67108863L);
  a.b = i32_wrap_i64(d) & 67108863;
}

function secp256k1_fe_sqrt(a:int, b:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int, j:int }):int {
  var c:int = g_a - 480;
  g_a = c;
  secp256k1_fe_sqr(c + 440, b);
  secp256k1_fe_mul(c + 440, c + 440, b);
  secp256k1_fe_sqr(c + 400, c + 440);
  secp256k1_fe_mul(c + 400, c + 400, b);
  var d:int = c + 360 + 32;
  d[0]:long = (c + 400 + 32)[0]:long;
  var e:int = c + 360 + 24;
  e[0]:long = (c + 400 + 24)[0]:long;
  var f:int = c + 360 + 16;
  f[0]:long = (c + 400 + 16)[0]:long;
  var g:long_ptr = c + 360 + 8;
  g[0] = (c + 400 + 8)[0]:long;
  c[45]:long = c[50]:long;
  secp256k1_fe_sqr(c + 360, c + 360);
  secp256k1_fe_sqr(c + 360, c + 360);
  secp256k1_fe_sqr(c + 360, c + 360);
  secp256k1_fe_mul(c + 360, c + 360, c + 400);
  var h:int = c + 320 + 32;
  h[0]:long = d[0]:long;
  d = c + 320 + 24;
  d[0]:long = e[0]:long;
  e = c + 320 + 16;
  e[0]:long = f[0]:long;
  f = c + 320 + 8;
  f[0]:long = g[0];
  c[40]:long = c[45]:long;
  secp256k1_fe_sqr(c + 320, c + 320);
  secp256k1_fe_sqr(c + 320, c + 320);
  secp256k1_fe_sqr(c + 320, c + 320);
  secp256k1_fe_mul(c + 320, c + 320, c + 400);
  g = c + 280 + 32;
  g[0] = h[0]:long;
  h = c + 280 + 24;
  h[0]:long = d[0]:long;
  d = c + 280 + 16;
  d[0]:long = e[0]:long;
  e = c + 280 + 8;
  e[0]:long = f[0]:long;
  c[35]:long = c[40]:long;
  secp256k1_fe_sqr(c + 280, c + 280);
  secp256k1_fe_sqr(c + 280, c + 280);
  secp256k1_fe_mul(c + 280, c + 280, c + 440);
  f = c + 240 + 32;
  f[0]:long = g[0];
  g = c + 240 + 24;
  g[0] = h[0]:long;
  h = c + 240 + 16;
  h[0]:long = d[0]:long;
  d = c + 240 + 8;
  d[0]:long = e[0]:long;
  c[30]:long = c[35]:long;
  secp256k1_fe_sqr(c + 240, c + 240);
  secp256k1_fe_sqr(c + 240, c + 240);
  secp256k1_fe_sqr(c + 240, c + 240);
  secp256k1_fe_sqr(c + 240, c + 240);
  secp256k1_fe_sqr(c + 240, c + 240);
  secp256k1_fe_sqr(c + 240, c + 240);
  secp256k1_fe_sqr(c + 240, c + 240);
  secp256k1_fe_sqr(c + 240, c + 240);
  secp256k1_fe_sqr(c + 240, c + 240);
  secp256k1_fe_sqr(c + 240, c + 240);
  secp256k1_fe_sqr(c + 240, c + 240);
  secp256k1_fe_mul(c + 240, c + 240, c + 280);
  e = c + 200 + 32;
  e[0]:long = f[0]:long;
  f = c + 200 + 24;
  f[0]:long = g[0];
  g = c + 200 + 16;
  g[0] = h[0]:long;
  h = c + 200 + 8;
  h[0]:long = d[0]:long;
  c[25]:long = c[30]:long;
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_mul(c + 200, c + 200, c + 240);
  (c + 160 + 32)[0]:long = e[0]:long;
  (c + 160 + 24)[0]:long = f[0]:long;
  (c + 160 + 16)[0]:long = g[0];
  (c + 160 + 8)[0]:long = h[0]:long;
  c[20]:long = c[25]:long;
  d = 44;
  loop L_a {
    secp256k1_fe_sqr(c + 160, c + 160);
    d = d + -1;
    if (d) continue L_a;
  }
  secp256k1_fe_mul(c + 160, c + 160, c + 200);
  (c + 120 + 32)[0]:long = (c + 160 + 32)[0]:long;
  (c + 120 + 24)[0]:long = (c + 160 + 24)[0]:long;
  (c + 120 + 16)[0]:long = (c + 160 + 16)[0]:long;
  (c + 120 + 8)[0]:long = (c + 160 + 8)[0]:long;
  c[15]:long = c[20]:long;
  d = 88;
  loop L_b {
    secp256k1_fe_sqr(c + 120, c + 120);
    d = d + -1;
    if (d) continue L_b;
  }
  secp256k1_fe_mul(c + 120, c + 120, c + 160);
  (c + 80 + 32)[0]:long = (c + 120 + 32)[0]:long;
  (c + 80 + 24)[0]:long = (c + 120 + 24)[0]:long;
  (c + 80 + 16)[0]:long = (c + 120 + 16)[0]:long;
  (c + 80 + 8)[0]:long = (c + 120 + 8)[0]:long;
  c[10]:long = c[15]:long;
  d = 44;
  loop L_c {
    secp256k1_fe_sqr(c + 80, c + 80);
    d = d + -1;
    if (d) continue L_c;
  }
  secp256k1_fe_mul(c + 80, c + 80, c + 200);
  d = c + 40 + 32;
  d[0]:long = (c + 80 + 32)[0]:long;
  e = c + 40 + 24;
  e[0]:long = (c + 80 + 24)[0]:long;
  f = c + 40 + 16;
  f[0]:long = (c + 80 + 16)[0]:long;
  g = c + 40 + 8;
  g[0] = (c + 80 + 8)[0]:long;
  c[5]:long = c[10]:long;
  secp256k1_fe_sqr(c + 40, c + 40);
  secp256k1_fe_sqr(c + 40, c + 40);
  secp256k1_fe_sqr(c + 40, c + 40);
  secp256k1_fe_mul(c + 40, c + 40, c + 400);
  h = c + 32;
  h[0]:long = d[0]:long;
  d = c + 24;
  d[0]:long = e[0]:long;
  e = c + 16;
  e[0]:long = f[0]:long;
  f = c + 8;
  f[0]:long = g[0];
  c[0]:long = c[5]:long;
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_mul(c, c, c + 240);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_mul(c, c, c + 440);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(a, c);
  secp256k1_fe_sqr(c, a);
  a = b.b;
  g = c[1]:int;
  var i:int = b.j;
  var j:int = c[9]:int;
  var k:int = b.a;
  var l:int = c[0]:int;
  f = f[0]:int;
  var m:int = b.c;
  var n:int = b.d;
  var o:int = c[3]:int;
  e = e[0]:int;
  var p:int = b.e;
  var q:int = b.f;
  var r:int = c[5]:int;
  var s:int = d[0]:int;
  var t:int = b.g;
  var u:int = b.h;
  var v:int = c[7]:int;
  var w:int = h[0]:int;
  var x:int = b.i;
  g_a = c + 480;
  d = a - g + ((c = (j = i - j + 16777212) >> 22) << 6) + 
      ((c = k - l + c * 977 + 268431548) >> 26) + 
      268435196;
  return 
    eqz((((((((((d | c) | (b = m - f + (d >> 26) + 268435452)) | 
               (a = n - o + (b >> 26) + 268435452)) | 
              (e = p - e + (a >> 26) + 268435452)) | 
             (f = q - r + (e >> 26) + 268435452)) | 
            (g = t - s + (f >> 26) + 268435452)) | 
           (h = u - v + (g >> 26) + 268435452)) | 
          (i = x - w + (h >> 26) + 268435452)) & 
         67108863) | 
        (j = (i >> 26) + (j & 4194303))) | 
    ((((((((((d ^ 64) & (c ^ 976)) & b) & a) & e) & f) & g) & h) & i) & 
     (j ^ 62914560)) == 
    67108863;
}

function secp256k1_fe_normalize_var(a:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int, j:int }) {
  var d:int;
  var r:int;
  var s:int;
  var b:int = a.j;
  var c:int = b >> 22;
  var e:int = (c << 6) + a.b + ((d = c * 977 + a.a) >> 26);
  var f:int = (e >> 26) + a.c;
  c = f & 67108863;
  var g:int = (f >> 26) + a.d;
  var h:int = g & 67108863;
  var i:int = (g >> 26) + a.e;
  var j:int = i & 67108863;
  var k:int = (i >> 26) + a.f;
  var l:int = k & 67108863;
  var m:int = (k >> 26) + a.g;
  var n:int = (m >> 26) + a.h;
  var o:int = n & 67108863;
  var p:int = (n >> 26) + a.i;
  var q:int = p & 67108863;
  b = (p >> 26) + (b & 4194303);
  g = 
    b >> 22 | 
    ((s = ((r = (d = d & 67108863) + 977) >> 26) + (e = e & 67108863)) > 
     67108799 & 
     (((((((g & f) & i) & k) & (f = m & 67108863)) & n) & p) == 67108863 & 
      b == 4194303));
  if (eqz(g)) goto B_a;
  d = r & 67108863;
  g = s + (g << 6);
  e = g & 67108863;
  g = (g >> 26) + c;
  c = g & 67108863;
  g = (g >> 26) + h;
  h = g & 67108863;
  g = (g >> 26) + j;
  j = g & 67108863;
  g = (g >> 26) + l;
  l = g & 67108863;
  g = (g >> 26) + f;
  f = g & 67108863;
  g = (g >> 26) + o;
  o = g & 67108863;
  g = (g >> 26) + q;
  q = g & 67108863;
  b = (g >> 26) + b & 4194303;
  label B_a:
  a.j = b;
  a.i = q;
  a.h = o;
  a.g = f;
  a.f = l;
  a.e = j;
  a.d = h;
  a.c = c;
  a.b = e;
  a.a = d;
}

function secp256k1_gej_add_ge_var(a:int, b:int, c:int, d:int) {
  var h:long;
  var j:long;
  var l:long;
  var n:long;
  var o:long;
  var p:int;
  var q:int;
  var r:int;
  var s:int;
  var t:int;
  var u:int;
  var v:int;
  var w:int;
  var z:int;
  var aa:int;
  var ba:int;
  var ca:int;
  var da:int;
  var ea:int;
  var fa:int;
  var ga:int;
  var e:int = g_a - 448;
  g_a = e;
  var f:int = c[20]:int;
  if (eqz(b[30]:int)) goto B_b;
  a[30]:int = f;
  a[0]:long@4 = c[0]:long@4;
  (a + 8)[0]:long@4 = (c + 8)[0]:long@4;
  (a + 16)[0]:long@4 = (c + 16)[0]:long@4;
  (a + 24)[0]:long@4 = (c + 24)[0]:long@4;
  (a + 32)[0]:long@4 = (c + 32)[0]:long@4;
  a[10]:long@4 = c[10]:long@4;
  (a + 48)[0]:long@4 = (c + 48)[0]:long@4;
  (a + 56)[0]:long@4 = (c + 56)[0]:long@4;
  (a + 64)[0]:long@4 = (c + 64)[0]:long@4;
  (a + 72)[0]:long@4 = (c + 72)[0]:long@4;
  (a + 84)[0]:long@4 = 0L;
  a[20]:int = 1;
  (a + 92)[0]:long@4 = 0L;
  (a + 100)[0]:long@4 = 0L;
  (a + 108)[0]:long@4 = 0L;
  (a + 116)[0]:int = 0;
  goto B_a;
  label B_b:
  if (eqz(f)) goto B_c;
  if (eqz(d)) goto B_d;
  d[1]:long@4 = 0L;
  d[0]:int = 1;
  (d + 12)[0]:long@4 = 0L;
  (d + 20)[0]:long@4 = 0L;
  (d + 28)[0]:long@4 = 0L;
  (d + 36)[0]:int = 0;
  label B_d:
  memcpy(a, b, 124);
  goto B_a;
  label B_c:
  a[30]:int = 0;
  secp256k1_fe_sqr(e + 408, f = b + 80);
  var g:int = e + 368 + 32;
  g[0]:long = (h = (b + 32)[0]:long@4);
  var i:int = e + 368 + 8;
  i[0]:long = (j = (b + 8)[0]:long@4);
  var k:int = e + 368 + 16;
  k[0]:long = (l = (b + 16)[0]:long@4);
  var m:int = e + 368 + 24;
  m[0]:long = (n = (b + 24)[0]:long@4);
  e[46]:long = (o = b[0]:long@4);
  i[0]:int = 
    (t = (s = ((r = ((q = (p = e[101]:int) >> 22) << 6) + e[93]:int + 
                    ((q = q * 977 + i32_wrap_i64(o)) >> 26)) >> 
               26) + 
              i32_wrap_i64(j)) & 
         67108863);
  k[0]:int = 
    (u = (s = ((i = (s >> 26) + e[95]:int) >> 26) + i32_wrap_i64(l)) & 
         67108863);
  m[0]:int = 
    (v = (s = ((k = (s >> 26) + e[97]:int) >> 26) + i32_wrap_i64(n)) & 
         67108863);
  g[0]:int = 
    (w = (s = ((m = (s >> 26) + e[99]:int) >> 26) + i32_wrap_i64(h)) & 
         67108863);
  e[101]:int = (g = (s >> 26) + (p & 4194303));
  e[99]:int = (m = m & 67108863);
  e[97]:int = (k = k & 67108863);
  e[95]:int = (i = i & 67108863);
  e[93]:int = (p = r & 67108863);
  e[92]:int = (q = q & 67108863);
  secp256k1_fe_mul(e + 328, c, e + 408);
  r = e + 288 + 32;
  r[0]:long = (h = (b + 72)[0]:long@4);
  s = e + 288 + 8;
  s[0]:long = (j = (b + 48)[0]:long@4);
  var x:int = e + 288 + 16;
  x[0]:long = (l = (b + 56)[0]:long@4);
  var y:int = e + 288 + 24;
  y[0]:long = (n = (b + 64)[0]:long@4);
  e[36]:long = (o = b[10]:long@4);
  s[0]:int = 
    (da = (ca = ((ba = ((aa = (z = e[81]:int) >> 22) << 6) + e[73]:int + 
                       ((aa = aa * 977 + i32_wrap_i64(o)) >> 26)) >> 
                 26) + 
                i32_wrap_i64(j)) & 
          67108863);
  x[0]:int = 
    (ea = (ca = ((s = (ca >> 26) + e[75]:int) >> 26) + i32_wrap_i64(l)) & 
          67108863);
  y[0]:int = 
    (fa = (ca = ((x = (ca >> 26) + e[77]:int) >> 26) + i32_wrap_i64(n)) & 
          67108863);
  r[0]:int = 
    (ga = (ca = ((y = (ca >> 26) + e[79]:int) >> 26) + i32_wrap_i64(h)) & 
          67108863);
  e[81]:int = (ca >> 26) + (z & 4194303);
  e[79]:int = (r = y & 67108863);
  e[77]:int = (x = x & 67108863);
  e[75]:int = (s = s & 67108863);
  e[73]:int = (y = ba & 67108863);
  e[72]:int = (z = aa & 67108863);
  secp256k1_fe_mul(e + 248, c + 40, e + 408);
  secp256k1_fe_mul(e + 248, e + 248, f);
  e[52]:int = e[82]:int - q + 268431548;
  e[53]:int = e[83]:int - p + 268435196;
  e[54]:int = e[84]:int - t + 268435452;
  e[55]:int = e[85]:int - i + 268435452;
  e[56]:int = e[86]:int - u + 268435452;
  e[57]:int = e[87]:int - k + 268435452;
  e[58]:int = e[88]:int - v + 268435452;
  e[59]:int = e[89]:int - m + 268435452;
  e[60]:int = e[90]:int - w + 268435452;
  e[61]:int = e[91]:int - g + 16777212;
  e[42]:int = e[62]:int - z + 268431548;
  e[43]:int = e[63]:int - y + 268435196;
  e[44]:int = e[64]:int - da + 268435452;
  e[45]:int = e[65]:int - s + 268435452;
  e[46]:int = e[66]:int - ea + 268435452;
  e[47]:int = e[67]:int - x + 268435452;
  e[48]:int = e[68]:int - fa + 268435452;
  e[49]:int = e[69]:int - r + 268435452;
  c = e[81]:int;
  e[50]:int = e[70]:int - ga + 268435452;
  e[51]:int = e[71]:int - c + 16777212;
  if (eqz(secp256k1_fe_normalizes_to_zero_var(e + 208))) goto B_e;
  if (eqz(secp256k1_fe_normalizes_to_zero_var(e + 168))) goto B_f;
  if (eqz(b[30]:int)) goto B_g;
  a[30]:int = 1;
  if (eqz(d)) goto B_a;
  d[1]:long@4 = 0L;
  d[0]:int = 1;
  (d + 12)[0]:long@4 = 0L;
  (d + 20)[0]:long@4 = 0L;
  (d + 28)[0]:long@4 = 0L;
  (d + 36)[0]:int = 0;
  goto B_a;
  label B_g:
  if (eqz(d)) goto B_h;
  f = d + 32;
  f[0]:long@4 = (h = ((c = b + 40) + 32)[0]:long@4);
  d[0]:long@4 = (j = c[0]:long@4);
  g = d + 8;
  g[0]:long@4 = (l = (c + 8)[0]:long@4);
  i = d + 16;
  i[0]:long@4 = (n = (c + 16)[0]:long@4);
  k = d + 24;
  k[0]:long@4 = (o = (c + 24)[0]:long@4);
  d[0]:int = 
    (p = (m = (c = d[9]:int) >> 22) * 977 + i32_wrap_i64(j)) << 1 & 
    134217726;
  d[1]:int = (m = (m << 6) + d[1]:int + (p >> 26)) << 1 & 134217726;
  g[0]:int = (m = (m >> 26) + i32_wrap_i64(l)) << 1 & 134217726;
  d[3]:int = (g = (m >> 26) + d[3]:int) << 1 & 134217726;
  i[0]:int = (g = (g >> 26) + i32_wrap_i64(n)) << 1 & 134217726;
  d[5]:int = (g = (g >> 26) + d[5]:int) << 1 & 134217726;
  k[0]:int = (g = (g >> 26) + i32_wrap_i64(o)) << 1 & 134217726;
  d[7]:int = (g = (g >> 26) + d[7]:int) << 1 & 134217726;
  f[0]:int = (g = (g >> 26) + i32_wrap_i64(h)) << 1 & 134217726;
  d[9]:int = (g >> 26) + (c & 4194303) << 1;
  label B_h:
  secp256k1_gej_double(a, b);
  goto B_a;
  label B_f:
  if (eqz(d)) goto B_i;
  d[0]:long@4 = 0L;
  (d + 32)[0]:long@4 = 0L;
  (d + 24)[0]:long@4 = 0L;
  (d + 16)[0]:long@4 = 0L;
  (d + 8)[0]:long@4 = 0L;
  label B_i:
  a[30]:int = 1;
  memset(a, 0, 120);
  goto B_a;
  label B_e:
  secp256k1_fe_sqr(e + 128, e + 168);
  secp256k1_fe_sqr(e + 88, e + 208);
  secp256k1_fe_mul(e + 48, e + 208, e + 88);
  if (eqz(d)) goto B_j;
  d[0]:long@4 = e[26]:long;
  (d + 32)[0]:long@4 = (e + 208 + 32)[0]:long;
  (d + 24)[0]:long@4 = (e + 208 + 24)[0]:long;
  (d + 16)[0]:long@4 = (e + 208 + 16)[0]:long;
  (d + 8)[0]:long@4 = (e + 208 + 8)[0]:long;
  label B_j:
  secp256k1_fe_mul(a + 80, f, e + 208);
  secp256k1_fe_mul(e + 8, e + 368, e + 88);
  c = a + 32;
  c[0]:long@4 = (h = (p = e + 8 + 32)[0]:long);
  b = a + 24;
  b[0]:long@4 = (j = (k = e + 8 + 24)[0]:long);
  d = a + 16;
  d[0]:long@4 = (l = (g = e + 8 + 16)[0]:long);
  f = a + 8;
  f[0]:long@4 = (n = (i = e + 8 + 8)[0]:long);
  a[0]:long@4 = (o = e[1]:long);
  m = a[9]:int;
  q = a[7]:int;
  r = a[5]:int;
  s = a[3]:int;
  t = a[1]:int;
  u = e[21]:int;
  v = e[19]:int;
  w = e[17]:int;
  x = e[15]:int;
  y = e[13]:int;
  z = e[20]:int;
  aa = e[18]:int;
  ba = e[16]:int;
  ca = e[14]:int;
  a[0]:int = 
    (da = e[32]:int - e[12]:int + (i32_wrap_i64(o) << 1) + 536863096);
  f[0]:int = (ca = e[34]:int - ca + (i32_wrap_i64(n) << 1) + 536870904);
  d[0]:int = (ba = e[36]:int - ba + (i32_wrap_i64(l) << 1) + 536870904);
  b[0]:int = (aa = e[38]:int - aa + (i32_wrap_i64(j) << 1) + 536870904);
  c[0]:int = (z = e[40]:int - z + (i32_wrap_i64(h) << 1) + 536870904);
  a[1]:int = (b = e[33]:int - y + (t << 1) + 536870392);
  a[3]:int = (f = e[35]:int - x + (s << 1) + 536870904);
  a[5]:int = (r = e[37]:int - w + (r << 1) + 536870904);
  a[7]:int = (q = e[39]:int - v + (q << 1) + 536870904);
  a[9]:int = (s = e[41]:int - u + (m << 1) + 33554424);
  a[10]:int = e[2]:int - da + 805294644;
  c = a + 44;
  c[0]:int = e[3]:int - b + 805305588;
  b = a + 48;
  b[0]:int = i[0]:int - ca + 805306356;
  d = a + 52;
  d[0]:int = e[5]:int - f + 805306356;
  f = a + 56;
  f[0]:int = g[0]:int - ba + 805306356;
  g = a + 60;
  g[0]:int = e[7]:int - r + 805306356;
  i = a + 64;
  i[0]:int = k[0]:int - aa + 805306356;
  k = a + 68;
  k[0]:int = e[9]:int - q + 805306356;
  m = a + 72;
  m[0]:int = p[0]:int - z + 805306356;
  p = a + 76;
  p[0]:int = e[11]:int - s + 50331636;
  q = a + 40;
  secp256k1_fe_mul(q, q, e + 168);
  secp256k1_fe_mul(e + 48, e + 48, e + 288);
  e[21]:int = (q = 16777212 - e[21]:int);
  e[20]:int = (r = 268435452 - e[20]:int);
  e[19]:int = (s = 268435452 - e[19]:int);
  e[18]:int = (t = 268435452 - e[18]:int);
  e[17]:int = (u = 268435452 - e[17]:int);
  e[16]:int = (v = 268435452 - e[16]:int);
  e[15]:int = (w = 268435452 - e[15]:int);
  e[14]:int = (x = 268435452 - e[14]:int);
  e[13]:int = (y = 268435196 - e[13]:int);
  e[12]:int = (z = 268431548 - e[12]:int);
  a[10]:int = a[10]:int + z;
  c[0]:int = c[0]:int + y;
  b[0]:int = b[0]:int + x;
  d[0]:int = d[0]:int + w;
  f[0]:int = f[0]:int + v;
  g[0]:int = g[0]:int + u;
  i[0]:int = i[0]:int + t;
  k[0]:int = k[0]:int + s;
  m[0]:int = m[0]:int + r;
  p[0]:int = p[0]:int + q;
  label B_a:
  g_a = e + 448;
}

function secp256k1_gej_add_var(a:int, b:int, c:int) {
  var e:int;
  var f:int;
  var o:long;
  var p:long;
  var q:long;
  var r:long;
  var s:long;
  var da:int;
  var d:int = g_a - 480;
  g_a = d;
  if (eqz(b[30]:int)) goto B_b;
  memcpy(a, c, 124);
  goto B_a;
  label B_b:
  if (eqz(c[30]:int)) goto B_c;
  memcpy(a, b, 124);
  goto B_a;
  label B_c:
  a[30]:int = 0;
  secp256k1_fe_sqr(d + 440, e = c + 80);
  secp256k1_fe_sqr(d + 400, f = b + 80);
  secp256k1_fe_mul(d + 360, b, d + 440);
  secp256k1_fe_mul(d + 320, c, d + 400);
  secp256k1_fe_mul(d + 280, b + 40, d + 440);
  secp256k1_fe_mul(d + 280, d + 280, e);
  secp256k1_fe_mul(d + 240, c + 40, d + 400);
  secp256k1_fe_mul(d + 240, d + 240, f);
  d[50]:int = d[80]:int - d[90]:int + 268431548;
  d[51]:int = d[81]:int - d[91]:int + 268435196;
  d[52]:int = d[82]:int - d[92]:int + 268435452;
  d[53]:int = d[83]:int - d[93]:int + 268435452;
  c = d[99]:int;
  var g:int = d[98]:int;
  var h:int = d[97]:int;
  var i:int = d[96]:int;
  var j:int_ptr = d[95]:int;
  d[54]:int = d[84]:int - d[94]:int + 268435452;
  d[55]:int = d[85]:int - j + 268435452;
  d[56]:int = d[86]:int - i + 268435452;
  d[57]:int = d[87]:int - h + 268435452;
  d[58]:int = d[88]:int - g + 268435452;
  d[59]:int = d[89]:int - c + 16777212;
  c = d[79]:int;
  g = d[78]:int;
  h = d[77]:int;
  i = d[76]:int;
  j = d[75]:int;
  var k:int = d[74]:int;
  var l:int = d[73]:int;
  var m:int = d[72]:int;
  var n:int = d[71]:int;
  d[40]:int = d[60]:int - d[70]:int + 268431548;
  d[41]:int = d[61]:int - n + 268435196;
  d[42]:int = d[62]:int - m + 268435452;
  d[43]:int = d[63]:int - l + 268435452;
  d[44]:int = d[64]:int - k + 268435452;
  d[45]:int = d[65]:int - j + 268435452;
  d[46]:int = d[66]:int - i + 268435452;
  d[47]:int = d[67]:int - h + 268435452;
  d[48]:int = d[68]:int - g + 268435452;
  d[49]:int = d[69]:int - c + 16777212;
  if (eqz(secp256k1_fe_normalizes_to_zero_var(d + 200))) goto B_d;
  if (eqz(secp256k1_fe_normalizes_to_zero_var(d + 160))) goto B_e;
  if (eqz(b[30]:int)) goto B_f;
  a[30]:int = 1;
  goto B_a;
  label B_f:
  secp256k1_gej_double(a, b);
  goto B_a;
  label B_e:
  a[30]:int = 1;
  memset(a, 0, 120);
  goto B_a;
  label B_d:
  secp256k1_fe_sqr(d + 120, d + 160);
  secp256k1_fe_sqr(d + 80, d + 200);
  secp256k1_fe_mul(d + 40, d + 200, d + 80);
  secp256k1_fe_mul(d + 200, d + 200, e);
  secp256k1_fe_mul(a + 80, f, d + 200);
  secp256k1_fe_mul(d, d + 360, d + 80);
  b = a + 32;
  b[0]:long@4 = (o = (k = d + 32)[0]:long);
  c = a + 24;
  c[0]:long@4 = (p = (i = d + 24)[0]:long);
  e = a + 16;
  e[0]:long@4 = (q = (g = d + 16)[0]:long);
  f = a + 8;
  f[0]:long@4 = (r = (h = d + 8)[0]:long);
  a[0]:long@4 = (s = d[0]:long);
  j = a[9]:int;
  l = a[7]:int;
  m = a[5]:int;
  n = a[3]:int;
  var t:int = a[1]:int;
  var u:int = d[19]:int;
  var v:int = d[17]:int;
  var w:int = d[15]:int;
  var x:int = d[13]:int;
  var y:int = d[11]:int;
  var z:int = d[18]:int;
  var aa:int = d[16]:int;
  var ba:int = d[14]:int;
  var ca:int = d[12]:int;
  a[0]:int = 
    (da = d[30]:int - d[10]:int + (i32_wrap_i64(s) << 1) + 536863096);
  f[0]:int = (ca = d[32]:int - ca + (i32_wrap_i64(r) << 1) + 536870904);
  e[0]:int = (ba = d[34]:int - ba + (i32_wrap_i64(q) << 1) + 536870904);
  c[0]:int = (aa = d[36]:int - aa + (i32_wrap_i64(p) << 1) + 536870904);
  b[0]:int = (z = d[38]:int - z + (i32_wrap_i64(o) << 1) + 536870904);
  a[1]:int = (c = d[31]:int - y + (t << 1) + 536870392);
  a[3]:int = (f = d[33]:int - x + (n << 1) + 536870904);
  a[5]:int = (m = d[35]:int - w + (m << 1) + 536870904);
  a[7]:int = (l = d[37]:int - v + (l << 1) + 536870904);
  a[9]:int = (n = d[39]:int - u + (j << 1) + 33554424);
  a[10]:int = d[0]:int - da + 805294644;
  b = a + 44;
  b[0]:int = d[1]:int - c + 805305588;
  c = a + 48;
  c[0]:int = h[0]:int - ca + 805306356;
  e = a + 52;
  e[0]:int = d[3]:int - f + 805306356;
  f = a + 56;
  f[0]:int = g[0]:int - ba + 805306356;
  g = a + 60;
  g[0]:int = d[5]:int - m + 805306356;
  h = a + 64;
  h[0]:int = i[0]:int - aa + 805306356;
  i = a + 68;
  i[0]:int = d[7]:int - l + 805306356;
  j = a + 72;
  j[0] = k[0]:int - z + 805306356;
  k = a + 76;
  k[0]:int = d[9]:int - n + 50331636;
  l = a + 40;
  secp256k1_fe_mul(l, l, d + 160);
  secp256k1_fe_mul(d + 40, d + 40, d + 280);
  d[19]:int = (l = 16777212 - d[19]:int);
  d[18]:int = (m = 268435452 - d[18]:int);
  d[17]:int = (n = 268435452 - d[17]:int);
  d[16]:int = (t = 268435452 - d[16]:int);
  d[15]:int = (u = 268435452 - d[15]:int);
  d[14]:int = (v = 268435452 - d[14]:int);
  d[13]:int = (w = 268435452 - d[13]:int);
  d[12]:int = (x = 268435452 - d[12]:int);
  d[11]:int = (y = 268435196 - d[11]:int);
  d[10]:int = (z = 268431548 - d[10]:int);
  a[10]:int = a[10]:int + z;
  b[0]:int = b[0]:int + y;
  c[0]:int = c[0]:int + x;
  e[0]:int = e[0]:int + w;
  f[0]:int = f[0]:int + v;
  g[0]:int = g[0]:int + u;
  h[0]:int = h[0]:int + t;
  i[0]:int = i[0]:int + n;
  j[0] = j[0] + m;
  k[0]:int = k[0]:int + l;
  label B_a:
  g_a = d + 480;
}

function secp256k1_gej_double(a:int, b:int) {
  var d:int;
  var f:int;
  var g:int;
  var h:int;
  var i:int;
  var j:int;
  var k:int;
  var l:int;
  var m:long;
  var n:long;
  var p:long;
  var r:long;
  var t:long;
  var u:int;
  var v:int;
  var aa:int;
  var c:int = g_a - 160;
  g_a = c;
  a[30]:int = b[30]:int;
  secp256k1_fe_mul(a + 80, b + 80, d = b + 40);
  a[20]:int = a[20]:int << 1;
  var e:int_ptr = a + 84;
  e[0] = e[0] << 1;
  e = a + 88;
  e[0] = e[0] << 1;
  e = a + 92;
  e[0] = e[0] << 1;
  e = a + 96;
  e[0] = e[0] << 1;
  e = a + 100;
  e[0] = e[0] << 1;
  e = a + 104;
  e[0] = e[0] << 1;
  e = a + 108;
  e[0] = e[0] << 1;
  e = a + 112;
  e[0] = e[0] << 1;
  e = a + 116;
  e[0] = e[0] << 1;
  secp256k1_fe_sqr(c + 120, b);
  c[30]:int = c[30]:int * 3;
  c[31]:int = c[31]:int * 3;
  c[32]:int = c[32]:int * 3;
  c[33]:int = c[33]:int * 3;
  c[34]:int = c[34]:int * 3;
  c[35]:int = c[35]:int * 3;
  c[36]:int = c[36]:int * 3;
  c[37]:int = c[37]:int * 3;
  c[38]:int = c[38]:int * 3;
  c[39]:int = c[39]:int * 3;
  secp256k1_fe_sqr(c + 80, c + 120);
  secp256k1_fe_sqr(c + 40, d);
  c[10]:int = c[10]:int << 1;
  c[11]:int = c[11]:int << 1;
  c[12]:int = c[12]:int << 1;
  c[13]:int = c[13]:int << 1;
  c[14]:int = c[14]:int << 1;
  c[15]:int = c[15]:int << 1;
  c[16]:int = c[16]:int << 1;
  c[17]:int = c[17]:int << 1;
  c[18]:int = c[18]:int << 1;
  c[19]:int = c[19]:int << 1;
  secp256k1_fe_sqr(c, c + 40);
  c[0]:int = c[0]:int << 1;
  c[9]:int = (d = c[9]:int << 1);
  c[8]:int = (e = c[8]:int << 1);
  c[7]:int = (f = c[7]:int << 1);
  c[6]:int = (g = c[6]:int << 1);
  c[5]:int = (h = c[5]:int << 1);
  c[4]:int = (i = c[4]:int << 1);
  c[3]:int = (j = c[3]:int << 1);
  c[2]:int = (k = c[2]:int << 1);
  c[1]:int = (l = c[1]:int << 1);
  secp256k1_fe_mul(c + 40, c + 40, b);
  a[0]:long@4 = (m = c[5]:long);
  b = a + 32;
  b[0]:long@4 = (n = c[9]:long);
  var o:int = a + 24;
  o[0]:long@4 = (p = c[8]:long);
  var q:int = a + 16;
  q[0]:long@4 = (r = c[7]:long);
  var s:int = a + 8;
  s[0]:long@4 = (t = c[6]:long);
  a[0]:int = (u = c[20]:int) - (i32_wrap_i64(m) << 2) + 671078870;
  a[1]:int = (v = c[21]:int) - (a[1]:int << 2) + 671087990;
  var w:int = a[9]:int;
  var x:int = a[7]:int;
  var y:int = a[5]:int;
  var z:int = a[3]:int;
  s[0]:int = (aa = c[22]:int) - (i32_wrap_i64(t) << 2) + 671088630;
  a[3]:int = (s = c[23]:int) - (z << 2) + 671088630;
  q[0]:int = (z = c[24]:int) - (i32_wrap_i64(r) << 2) + 671088630;
  a[5]:int = (q = c[25]:int) - (y << 2) + 671088630;
  o[0]:int = (y = c[26]:int) - (i32_wrap_i64(p) << 2) + 671088630;
  a[7]:int = (o = c[27]:int) - (x << 2) + 671088630;
  b[0]:int = (x = c[28]:int) - (i32_wrap_i64(n) << 2) + 671088630;
  a[9]:int = (b = c[29]:int) - (w << 2) + 41943030;
  w = c[10]:int;
  var ba:int = c[11]:int;
  var ca:int = c[12]:int;
  var da:int = c[13]:int;
  var ea:int = c[14]:int;
  var fa:int = c[15]:int;
  var ga:int = c[16]:int;
  var ha:int = c[17]:int;
  var ia:int = c[18]:int;
  c[19]:int = c[19]:int * 6 - b + 16777212;
  c[18]:int = ia * 6 - x + 268435452;
  c[17]:int = ha * 6 - o + 268435452;
  c[16]:int = ga * 6 - y + 268435452;
  c[15]:int = fa * 6 - q + 268435452;
  c[14]:int = ea * 6 - z + 268435452;
  c[13]:int = da * 6 - s + 268435452;
  c[12]:int = ca * 6 - aa + 268435452;
  c[11]:int = ba * 6 - v + 268435196;
  c[10]:int = w * 6 - u + 268431548;
  secp256k1_fe_mul(a + 40, c + 120, c + 40);
  a[10]:int = a[10]:int - c[0]:int + 402647322;
  b = a + 44;
  b[0]:int = b[0]:int - l + 402652794;
  b = a + 48;
  b[0]:int = b[0]:int - k + 402653178;
  b = a + 52;
  b[0]:int = b[0]:int - j + 402653178;
  b = a + 56;
  b[0]:int = b[0]:int - i + 402653178;
  b = a + 60;
  b[0]:int = b[0]:int - h + 402653178;
  b = a + 64;
  b[0]:int = b[0]:int - g + 402653178;
  b = a + 68;
  b[0]:int = b[0]:int - f + 402653178;
  b = a + 72;
  b[0]:int = b[0]:int - e + 402653178;
  a = a + 76;
  a[0]:int = a[0]:int - d + 25165818;
  g_a = c + 160;
}

function secp256k1_fe_inv(a:int, b:int) {
  var c:long_ptr = g_a - 480;
  g_a = c;
  secp256k1_fe_sqr(c + 440, b);
  secp256k1_fe_mul(c + 440, c + 440, b);
  secp256k1_fe_sqr(c + 400, c + 440);
  secp256k1_fe_mul(c + 400, c + 400, b);
  var d:long_ptr = c + 360 + 32;
  d[0] = (c + 400 + 32)[0]:long;
  var e:long_ptr = c + 360 + 24;
  e[0] = (c + 400 + 24)[0]:long;
  var f:long_ptr = c + 360 + 16;
  f[0] = (c + 400 + 16)[0]:long;
  var g:long_ptr = c + 360 + 8;
  g[0] = (c + 400 + 8)[0]:long;
  c[45] = c[50];
  secp256k1_fe_sqr(c + 360, c + 360);
  secp256k1_fe_sqr(c + 360, c + 360);
  secp256k1_fe_sqr(c + 360, c + 360);
  secp256k1_fe_mul(c + 360, c + 360, c + 400);
  var h:long_ptr = c + 320 + 32;
  h[0] = d[0];
  d = c + 320 + 24;
  d[0] = e[0];
  e = c + 320 + 16;
  e[0] = f[0];
  f = c + 320 + 8;
  f[0] = g[0];
  c[40] = c[45];
  secp256k1_fe_sqr(c + 320, c + 320);
  secp256k1_fe_sqr(c + 320, c + 320);
  secp256k1_fe_sqr(c + 320, c + 320);
  secp256k1_fe_mul(c + 320, c + 320, c + 400);
  g = c + 280 + 32;
  g[0] = h[0];
  h = c + 280 + 24;
  h[0] = d[0];
  d = c + 280 + 16;
  d[0] = e[0];
  e = c + 280 + 8;
  e[0] = f[0];
  c[35] = c[40];
  secp256k1_fe_sqr(c + 280, c + 280);
  secp256k1_fe_sqr(c + 280, c + 280);
  secp256k1_fe_mul(c + 280, c + 280, c + 440);
  f = c + 240 + 32;
  f[0] = g[0];
  g = c + 240 + 24;
  g[0] = h[0];
  h = c + 240 + 16;
  h[0] = d[0];
  d = c + 240 + 8;
  d[0] = e[0];
  c[30] = c[35];
  secp256k1_fe_sqr(c + 240, c + 240);
  secp256k1_fe_sqr(c + 240, c + 240);
  secp256k1_fe_sqr(c + 240, c + 240);
  secp256k1_fe_sqr(c + 240, c + 240);
  secp256k1_fe_sqr(c + 240, c + 240);
  secp256k1_fe_sqr(c + 240, c + 240);
  secp256k1_fe_sqr(c + 240, c + 240);
  secp256k1_fe_sqr(c + 240, c + 240);
  secp256k1_fe_sqr(c + 240, c + 240);
  secp256k1_fe_sqr(c + 240, c + 240);
  secp256k1_fe_sqr(c + 240, c + 240);
  secp256k1_fe_mul(c + 240, c + 240, c + 280);
  e = c + 200 + 32;
  e[0] = f[0];
  f = c + 200 + 24;
  f[0] = g[0];
  g = c + 200 + 16;
  g[0] = h[0];
  h = c + 200 + 8;
  h[0] = d[0];
  c[25] = c[30];
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_sqr(c + 200, c + 200);
  secp256k1_fe_mul(c + 200, c + 200, c + 240);
  (c + 160 + 32)[0]:long = e[0];
  (c + 160 + 24)[0]:long = f[0];
  (c + 160 + 16)[0]:long = g[0];
  (c + 160 + 8)[0]:long = h[0];
  c[20] = c[25];
  d = 44;
  loop L_a {
    secp256k1_fe_sqr(c + 160, c + 160);
    d = d + -1;
    if (d) continue L_a;
  }
  secp256k1_fe_mul(c + 160, c + 160, c + 200);
  (c + 120 + 32)[0]:long = (c + 160 + 32)[0]:long;
  (c + 120 + 24)[0]:long = (c + 160 + 24)[0]:long;
  (c + 120 + 16)[0]:long = (c + 160 + 16)[0]:long;
  (c + 120 + 8)[0]:long = (c + 160 + 8)[0]:long;
  c[15] = c[20];
  d = 88;
  loop L_b {
    secp256k1_fe_sqr(c + 120, c + 120);
    d = d + -1;
    if (d) continue L_b;
  }
  secp256k1_fe_mul(c + 120, c + 120, c + 160);
  (c + 80 + 32)[0]:long = (c + 120 + 32)[0]:long;
  (c + 80 + 24)[0]:long = (c + 120 + 24)[0]:long;
  (c + 80 + 16)[0]:long = (c + 120 + 16)[0]:long;
  (c + 80 + 8)[0]:long = (c + 120 + 8)[0]:long;
  c[10] = c[15];
  d = 44;
  loop L_c {
    secp256k1_fe_sqr(c + 80, c + 80);
    d = d + -1;
    if (d) continue L_c;
  }
  secp256k1_fe_mul(c + 80, c + 80, c + 200);
  d = c + 40 + 32;
  d[0] = (c + 80 + 32)[0]:long;
  e = c + 40 + 24;
  e[0] = (c + 80 + 24)[0]:long;
  f = c + 40 + 16;
  f[0] = (c + 80 + 16)[0]:long;
  g = c + 40 + 8;
  g[0] = (c + 80 + 8)[0]:long;
  c[5] = c[10];
  secp256k1_fe_sqr(c + 40, c + 40);
  secp256k1_fe_sqr(c + 40, c + 40);
  secp256k1_fe_sqr(c + 40, c + 40);
  secp256k1_fe_mul(c + 40, c + 40, c + 400);
  (c + 32)[0]:long = d[0];
  (c + 24)[0]:long = e[0];
  (c + 16)[0]:long = f[0];
  (c + 8)[0]:long = g[0];
  c[0] = c[5];
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_mul(c, c, c + 240);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_mul(c, c, b);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_mul(c, c, c + 440);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_sqr(c, c);
  secp256k1_fe_mul(a, b, c);
  g_a = c + 480;
}

function secp256k1_ge_to_storage(a:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int }, b:long_ptr@4) {
  var c:int = g_a - 80;
  g_a = c;
  var d:int = c + 40 + 8;
  d[0]:long = (b + 8)[0]:long@4;
  var e:int = c + 40 + 16;
  e[0]:long = (b + 16)[0]:long@4;
  var f:int = c + 40 + 24;
  f[0]:long = (b + 24)[0]:long@4;
  var g:int = c + 40 + 32;
  g[0]:long = (b + 32)[0]:long@4;
  c[5]:long = b[0];
  secp256k1_fe_normalize(c + 40);
  var h:int = c + 32;
  h[0]:long = (b + 72)[0]:long@4;
  var i:int = c + 24;
  i[0]:long = (b + 64)[0]:long@4;
  var j:int = c + 16;
  j[0]:long = (b + 56)[0]:long@4;
  var k:int = c + 8;
  k[0]:long = (b + 48)[0]:long@4;
  c[0]:long = b[10];
  secp256k1_fe_normalize(c);
  a.a = (b = c[11]:int) << 26 | c[10]:int;
  a.b = (d = d[0]:int) << 20 | b >> 6;
  a.c = (b = c[13]:int) << 14 | d >> 12;
  a.d = (d = e[0]:int) << 8 | b >> 18;
  a.f = (b = c[17]:int) << 22 | (e = f[0]:int) >> 4;
  a.g = (f = g[0]:int) << 16 | b >> 10;
  a.h = c[19]:int << 10 | f >> 16;
  a.e = (c[15]:int << 2 | d >> 24) | e << 28;
  a.i = (b = c[1]:int) << 26 | c[0]:int;
  (a + 36)[0]:int = (d = k[0]:int) << 20 | b >> 6;
  (a + 40)[0]:int = (b = c[3]:int) << 14 | d >> 12;
  (a + 44)[0]:int = (d = j[0]:int) << 8 | b >> 18;
  (a + 52)[0]:int = (b = c[7]:int) << 22 | (e = i[0]:int) >> 4;
  (a + 56)[0]:int = (f = h[0]:int) << 16 | b >> 10;
  (a + 60)[0]:int = c[9]:int << 10 | f >> 16;
  (a + 48)[0]:int = (c[5]:int << 2 | d >> 24) | e << 28;
  g_a = c + 80;
}

function secp256k1_ecmult_gen_blind(a:int, b:long_ptr@1) {
  var d:long_ptr@4;
  var d:long_ptr@4;
  var d:long_ptr@4;
  var d:long_ptr@4;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var f:long_ptr;
  var f:long_ptr;
  var f:long_ptr;
  var f:long_ptr;
  var g:long_ptr;
  var g:long_ptr;
  var g:long_ptr;
  var g:long_ptr;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var f:long_ptr;
  var d:long_ptr@4;
  var d:long_ptr@4;
  var d:long_ptr@4;
  var d:long_ptr@4;
  var d:long_ptr@4;
  var d:long_ptr@4;
  var g:long_ptr;
  var e:int;
  var g:long_ptr;
  var f:long_ptr;
  var e:int;
  var j:int;
  var k:int;
  var l:int;
  var m:int;
  var n:int;
  var i:int;
  var h:int;
  var f:long_ptr;
  var g:long_ptr;
  var e:int;
  var e:int;
  var e:int;
  var i:int;
  var h:int;
  var f:long_ptr;
  var g:long_ptr;
  var o:long;
  var p:long;
  var q:long;
  var d:long_ptr@4;
  var f:long_ptr;
  var g:long_ptr;
  var d:long_ptr@4;
  var h:int;
  var i:int;
  var d:long_ptr@4;
  var d:long_ptr@4;
  var e:int;
  var c:int = g_a - 384;
  g_a = c;
  (c + 56)[0]:long = 0L;
  (c + 48)[0]:long = 0L;
  (c + 40)[0]:long = 0L;
  (c + 32)[0]:long = 0L;
  (c + 24)[0]:long = 0L;
  (c + 16)[0]:long = 0L;
  c[1]:long = 0L;
  c[0]:long = 0L;
  if (eqz(b)) goto B_b;
  d = (a + 12)[0]:int;
  e = (a + 16)[0]:int;
  f = (a + 20)[0]:int;
  g = (a + 24)[0]:int;
  h = (a + 28)[0]:int;
  i = (a + 32)[0]:int;
  goto B_a;
  label B_b:
  d = 0;
  (a + 68)[0]:long@4 = d_DG30FKE7I6J841A9C2B5HLSucces[688]:long@4;
  (a + 60)[0]:long@4 = d_DG30FKE7I6J841A9C2B5HLSucces[686]:long@4;
  (a + 52)[0]:long@4 = d_DG30FKE7I6J841A9C2B5HLSucces[684]:long@4;
  (a + 44)[0]:long@4 = d_DG30FKE7I6J841A9C2B5HLSucces[682]:long@4;
  a[9]:long@4 = d_DG30FKE7I6J841A9C2B5HLSucces[680]:long@4;
  (a + 120)[0]:long@4 = 0L;
  (a + 116)[0]:int = 1;
  (a + 128)[0]:long@4 = 0L;
  (a + 136)[0]:long@4 = 0L;
  (a + 144)[0]:long@4 = 0L;
  (a + 152)[0]:long@4 = 0L;
  (a + 108)[0]:long@4 = 66974852657502553L;
  (a + 100)[0]:long@4 = 931799296900087868L;
  (a + 92)[0]:long@4 = 899521260483176520L;
  (a + 84)[0]:long@4 = 1071124329443255864L;
  (a + 76)[0]:long@4 = 1012143325948353540L;
  a[1]:int = 1;
  (a + 32)[0]:int = 0;
  (a + 24)[0]:long@4 = 0L;
  (a + 16)[0]:long@4 = 0L;
  (a + 8)[0]:long@4 = 0L;
  e = 0;
  f = 0;
  g = 0;
  h = 0;
  i = 0;
  label B_a:
  c[167]:byte = d;
  c[166]:byte = d >> 8;
  c[165]:byte = d >> 16;
  c[164]:byte = d >> 24;
  c[163]:byte = e;
  c[162]:byte = e >> 8;
  c[161]:byte = e >> 16;
  c[160]:byte = e >> 24;
  c[159]:byte = f;
  c[158]:byte = f >> 8;
  c[157]:byte = f >> 16;
  c[156]:byte = f >> 24;
  c[155]:byte = g;
  c[154]:byte = g >> 8;
  c[153]:byte = g >> 16;
  c[152]:byte = g >> 24;
  c[151]:byte = h;
  c[150]:byte = h >> 8;
  c[149]:byte = h >> 16;
  c[148]:byte = h >> 24;
  c[147]:byte = i;
  c[146]:byte = i >> 8;
  c[145]:byte = i >> 16;
  c[144]:byte = i >> 24;
  f = c + 16;
  f[0] = c[20]:long;
  c[43]:int = 
    ((d = a[1]:int) << 24 | (d << 8 & 16711680)) | 
    ((d >> 8 & 65280) | d >> 24);
  c[42]:int = 
    ((d = (a + 8)[0]:int) << 24 | (d << 8 & 16711680)) | 
    ((d >> 8 & 65280) | d >> 24);
  g = c + 24;
  g[0] = c[21]:long;
  c[0]:long = c[18]:long;
  c[1]:long = c[19]:long;
  d = a + 4;
  e = 32;
  if (eqz(b)) goto B_c;
  (c + 56)[0]:long = (b + 24)[0]:long@1;
  (c + 48)[0]:long = (b + 16)[0]:long@1;
  (c + 40)[0]:long = (b + 8)[0]:long@1;
  c[4]:long = b[0];
  e = 64;
  label B_c:
  secp256k1_rfc6979_hmac_sha256_initialize(c + 72, c, e);
  (c + 56)[0]:long = 0L;
  (c + 48)[0]:long = 0L;
  (c + 40)[0]:long = 0L;
  (c + 32)[0]:long = 0L;
  g[0] = 0L;
  f[0] = 0L;
  c[1]:long = 0L;
  c[0]:long = 0L;
  secp256k1_rfc6979_hmac_sha256_generate(c + 72, c + 144);
  b = secp256k1_fe_set_b32(c + 184, c + 144);
  c[55]:int = 
    (e = c[55]:int) & 
    (b = 
       0 - 
       ((e = 
           eqz(b) | 
           eqz(e | 
               (((((((((f = c[47]:int) | (g = c[46]:int)) | (h = c[48]:int)) | 
                     (i = c[49]:int)) | 
                    (j = c[50]:int)) | 
                   (k = c[51]:int)) | 
                  (l = c[52]:int)) | 
                 (m = c[53]:int)) | 
                (n = c[54]:int)))) ^ 
        1));
  c[54]:int = n & b;
  c[53]:int = m & b;
  c[52]:int = l & b;
  c[51]:int = k & b;
  c[50]:int = j & b;
  c[49]:int = i & b;
  c[48]:int = h & b;
  c[47]:int = f & b;
  c[46]:int = (g & b) | e;
  secp256k1_fe_sqr(c + 224, c + 184);
  e = a + 36;
  secp256k1_fe_mul(e, e, c + 224);
  b = a + 76;
  secp256k1_fe_mul(b, b, c + 224);
  secp256k1_fe_mul(b, b, c + 184);
  b = a + 116;
  secp256k1_fe_mul(b, b, c + 184);
  c[23]:long = 0L;
  c[24]:long = 0L;
  c[25]:long = 0L;
  c[26]:long = 0L;
  c[27]:long = 0L;
  secp256k1_rfc6979_hmac_sha256_generate(c + 72, c + 144);
  secp256k1_scalar_set_b32(c + 352, c + 144, 0);
  (c + 144 + 16)[0]:long = 0L;
  (c + 144 + 24)[0]:long = 0L;
  c[18]:long = 0L;
  c[19]:long = 0L;
  c[95]:int = 
    (b = c[95]:int) & 
    (b = 
       select_if(
         -1,
         0,
         m = b | 
             (((((((f = c[89]:int) | (g = c[88]:int)) | (h = c[90]:int)) | 
                 (i = c[91]:int)) | 
                (j = c[92]:int)) | 
               (k = c[93]:int)) | 
              (l = c[94]:int))));
  c[94]:int = l & b;
  c[93]:int = k & b;
  c[92]:int = j & b;
  c[91]:int = i & b;
  c[90]:int = h & b;
  c[89]:int = f & b;
  c[88]:int = (g & b) | eqz(m);
  secp256k1_ecmult_gen(a, c + 224, c + 352);
  c[89]:int = 
    (o = select_if(
           4294967295L,
           0L,
           (((((((a = c[89]:int) | (b = c[88]:int)) | (f = c[90]:int)) | 
               (g = c[91]:int)) | 
              (h = c[92]:int)) | 
             (i = c[93]:int)) | 
            (j = c[94]:int)) | 
           (k = c[95]:int))) & 
    (q = i64_extend_i32_u(a ^ -1) + 
         ((p = i64_extend_i32_u(b ^ -1) + 3493216578L) >> 32L) + 
         3218235020L);
  c[88]:int = o & p;
  d[0] = c[44]:long;
  c[90]:int = 
    o & (p = i64_extend_i32_u(f ^ -1) + (q >> 32L) + 2940772411L);
  c[91]:int = 
    o & (p = i64_extend_i32_u(g ^ -1) + (p >> 32L) + 3132021990L);
  (d + 8)[0]:long@4 = c[45]:long;
  c[92]:int = 
    (p = i64_extend_i32_u(h ^ -1) + (p >> 32L) + 4294967294L) & o;
  c[93]:int = 
    (p = i64_extend_i32_u(i ^ -1) + (p >> 32L) + 4294967295L) & o;
  (d + 16)[0]:long@4 = c[46]:long;
  c[94]:int = 
    (p = i64_extend_i32_u(j ^ -1) + (p >> 32L) + 4294967295L) & o;
  c[95]:int = i64_extend_i32_u(k ^ -1) + (p >> 32L) + -1L & o;
  (d + 24)[0]:long@4 = c[47]:long;
  memcpy(e, c + 224, 124);
  g_a = c + 384;
}

function secp256k1_ecmult_odd_multiples_table_storage_var(a:int, b:int) {
  var e:int;
  var i:int;
  var j:int;
  var k:int;
  var l:int;
  var i:int;
  var j:int;
  var k:int;
  var l:int;
  var c:int = g_a - 640;
  g_a = c;
  if (eqz(b[30]:int)) goto B_b;
  c[138]:int = 1;
  goto B_a;
  label B_b:
  secp256k1_gej_double(c + 432, b);
  label B_a:
  (c + 344 + 32)[0]:long = (c + 432 + 32)[0]:long;
  (c + 344 + 24)[0]:long = (c + 432 + 24)[0]:long;
  (c + 344 + 16)[0]:long = (c + 432 + 16)[0]:long;
  (c + 344 + 8)[0]:long = (c + 432 + 8)[0]:long;
  (c + 344 + 48)[0]:long = (c + 432 + 48)[0]:long;
  (c + 344 + 56)[0]:long = (c + 432 + 56)[0]:long;
  (c + 344 + 64)[0]:long = (c + 432 + 64)[0]:long;
  (c + 344 + 72)[0]:long = (c + 432 + 72)[0]:long;
  c[43]:long = c[54]:long;
  c[48]:long = c[59]:long;
  var d:int = 0;
  c[106]:int = 0;
  secp256k1_fe_sqr(c + 600, e = c + 432 + 80);
  secp256k1_fe_mul(c + 560, c + 600, e);
  secp256k1_fe_mul(c + 256, b, c + 600);
  var f:int = c + 256 + 40;
  secp256k1_fe_mul(f, b + 40, c + 560);
  (c + 128 + 8)[0]:long = (c + 256 + 8)[0]:long;
  (c + 128 + 16)[0]:long = (c + 256 + 16)[0]:long;
  (c + 128 + 24)[0]:long = (c + 256 + 24)[0]:long;
  (c + 128 + 32)[0]:long = (c + 256 + 32)[0]:long;
  (c + 128 + 48)[0]:long = (c + 256 + 48)[0]:long;
  (c + 128 + 56)[0]:long = (c + 256 + 56)[0]:long;
  (c + 128 + 64)[0]:long = (c + 256 + 64)[0]:long;
  (c + 128 + 72)[0]:long = (c + 256 + 72)[0]:long;
  c[84]:int = b[30]:int;
  c[16]:long = c[32]:long;
  c[21]:long = c[37]:long;
  (c + 128 + 112)[0]:long = (b + 112)[0]:long@4;
  (c + 128 + 104)[0]:long = (b + 104)[0]:long@4;
  (c + 128 + 96)[0]:long = (b + 96)[0]:long@4;
  (c + 128 + 88)[0]:long = (b + 88)[0]:long@4;
  c[62]:int = 0;
  c[26]:long = b[20]:long@4;
  var g:int = c + 128 + 80;
  var h:int = c + 128 + 40;
  loop L_c {
    secp256k1_fe_normalize_var(h);
    b = a + d;
    (b + 32)[0]:int = (i = c[43]:int) << 26 | c[42]:int;
    (b + 36)[0]:int = (j = c[44]:int) << 20 | i >> 6;
    (b + 40)[0]:int = (i = c[45]:int) << 14 | j >> 12;
    (b + 44)[0]:int = (j = c[46]:int) << 8 | i >> 18;
    (b + 52)[0]:int = (i = c[49]:int) << 22 | (k = c[48]:int) >> 4;
    (b + 56)[0]:int = (l = c[50]:int) << 16 | i >> 10;
    (b + 60)[0]:int = c[51]:int << 10 | l >> 16;
    (b + 48)[0]:int = (c[47]:int << 2 | j >> 24) | k << 28;
    secp256k1_gej_add_ge_var(c + 128, c + 128, c + 344, c + 48);
    secp256k1_fe_normalize_var(c + 48);
    b[0]:int = (i = c[13]:int) << 26 | c[12]:int;
    (b + 4)[0]:int = (j = c[14]:int) << 20 | i >> 6;
    (b + 8)[0]:int = (i = c[15]:int) << 14 | j >> 12;
    (b + 12)[0]:int = (j = c[16]:int) << 8 | i >> 18;
    (b + 20)[0]:int = (i = c[19]:int) << 22 | (k = c[18]:int) >> 4;
    (b + 24)[0]:int = (l = c[20]:int) << 16 | i >> 10;
    (b + 28)[0]:int = c[21]:int << 10 | l >> 16;
    (b + 16)[0]:int = (c[17]:int << 2 | j >> 24) | k << 28;
    d = d + 64;
    if (d != 524224) continue L_c;
  }
  secp256k1_fe_mul(c + 88, g, e);
  secp256k1_fe_inv(c + 88, c + 88);
  secp256k1_fe_sqr(c + 600, c + 88);
  secp256k1_fe_mul(c + 560, c + 600, c + 88);
  secp256k1_fe_mul(c + 256, c + 128, c + 600);
  secp256k1_fe_mul(f, h, c + 560);
  c[84]:int = c[62]:int;
  secp256k1_ge_to_storage(a + 524224, c + 256);
  secp256k1_fe_mul(e, c + 88, g);
  secp256k1_fe_sqr(c + 600, e);
  b = a + 524160;
  secp256k1_fe_mul(c + 600, c + 600, c + 432);
  d = 8192;
  i = c[159]:int;
  j = c[158]:int;
  k = c[157]:int;
  l = c[156]:int;
  a = c[155]:int;
  h = c[154]:int;
  e = c[153]:int;
  g = c[152]:int;
  var m:int = c[151]:int;
  var n:int = c[150]:int;
  loop L_d {
    secp256k1_ge_from_storage(c + 256, b);
    secp256k1_fe_mul(c + 88, c + 88, c + 256);
    secp256k1_fe_sqr(c + 560, c + 88);
    secp256k1_fe_mul(c + 8, c + 560, c + 88);
    secp256k1_fe_mul(c + 256, c + 256, c + 560);
    c[73]:int = i - c[73]:int + 16777212;
    c[72]:int = j - c[72]:int + 268435452;
    c[71]:int = k - c[71]:int + 268435452;
    c[70]:int = l - c[70]:int + 268435452;
    c[69]:int = a - c[69]:int + 268435452;
    c[68]:int = h - c[68]:int + 268435452;
    c[67]:int = e - c[67]:int + 268435452;
    c[66]:int = g - c[66]:int + 268435452;
    c[65]:int = m - c[65]:int + 268435196;
    c[64]:int = n - c[64]:int + 268431548;
    secp256k1_fe_mul(f, f, c + 8);
    secp256k1_ge_to_storage(b, c + 256);
    b = b + -64;
    d = d + -1;
    if (d > 1) continue L_d;
  }
  g_a = c + 640;
}

function secp256k1_context_create(a:int):int {
  var b:int_ptr = g_a - 32;
  g_a = b;
  if ((a & 255) != 1) goto B_b;
  var c:int = 
    malloc(select_if(65728, 192, a & 512) | (a << 12 & 1048576));
  if (eqz(c)) goto B_a;
  if (secp256k1_context_preallocated_create(c, a)) goto B_c;
  free(c);
  c = 0;
  label B_c:
  g_a = b + 32;
  return c;
  label B_b:
  b[4] = 68096;
  fprintf(d_DG30FKE7I6J841A9C2B5HLSucces[0]:int, 68495, b + 16);
  abort();
  unreachable;
  label B_a:
  b[0] = 68481;
  fprintf(d_DG30FKE7I6J841A9C2B5HLSucces[0]:int, 68532, b);
  abort();
  return unreachable;
}

function secp256k1_context_clone(a:int_ptr):int {
  var b:int;
  var d:int;
  var e:int_ptr;
  var c:{ a:int, b:int }
  var b:int;
  var c:{ a:int, b:int }
  var e:int_ptr;
  var e:int_ptr;
  var b:int;
  var d:int;
  var c:{ a:int, b:int }
  var c:{ a:int, b:int }
  var d:int;
  var b:int;
  var c:{ a:int, b:int }
  var c:{ a:int, b:int }
  var b:int;
  var c:{ a:int, b:int }
  c = select_if(65728, 192, b = a[2]);
  c = select_if(c | 1048576, c, d = a[0]);
  e = malloc(c);
  if (e) goto B_a;
  call_indirect(68481, (a + 180)[0]:int, a[44]);
  call_indirect(68137, (a + 172)[0]:int, a[42]);
  return 0;
  label B_a:
  c = memcpy(e, a, c);
  if (eqz(b)) goto B_b;
  e = c + 8;
  e[0] = e + b - a + -8;
  label B_b:
  if (eqz(d)) goto B_c;
  c.a = c + d - a;
  label B_c:
  b = a[1];
  if (eqz(b)) goto B_d;
  c.b = c + b - a;
  label B_d:
  return c;
}

function secp256k1_context_preallocated_destroy(a:int_ptr) {
  if (d_4486P0GSn3Ix0MkPsW4wzVYJM0j9[28]:int != a) goto B_c;
  call_indirect(68154, (a + 172)[0]:int, a[42]);
  goto B_b;
  label B_c:
  if (eqz(a)) goto B_a;
  label B_b:
  memset(a, 0, 168);
  label B_a:
}

function secp256k1_context_destroy(a:int_ptr) {
  if (eqz(a)) goto B_a;
  if (d_4486P0GSn3Ix0MkPsW4wzVYJM0j9[28]:int != a) goto B_b;
  call_indirect(68154, (a + 172)[0]:int, a[42]);
  label B_b:
  free(a);
  label B_a:
}

function secp256k1_default_illegal_callback_fn(a:int, b:int) {
  var c:int_ptr = g_a - 16;
  g_a = c;
  c[0] = a;
  fprintf(d_DG30FKE7I6J841A9C2B5HLSucces[0]:int, 68495, c);
  abort();
  unreachable;
}

function secp256k1_default_error_callback_fn(a:int, b:int) {
  var c:int_ptr = g_a - 16;
  g_a = c;
  c[0] = a;
  fprintf(d_DG30FKE7I6J841A9C2B5HLSucces[0]:int, 68532, c);
  abort();
  unreachable;
}

function secp256k1_fe_normalizes_to_zero_var(a:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int, j:int }):int {
  var g:int;
  var g:int;
  var h:int;
  var i:int;
  var j:int;
  var g:int;
  var g:int;
  var b:int = a.j;
  var c:int = b >> 22;
  var d:int = c * 977 + a.a;
  var e:int = d & 67108863;
  var f:int = e ^ 976;
  if (eqz(e)) goto B_b;
  g = 0;
  if (f != 67108863) goto B_a;
  label B_b:
  g = (d >> 26 | c << 6) + a.b;
  g = 
    eqz(
      (((((((((g & 67108863) | e) | ((e = (g >> 26) + a.c) & 67108863)) | 
            ((c = (e >> 26) + a.d) & 67108863)) | 
           ((d = (c >> 26) + a.e) & 67108863)) | 
          ((h = (d >> 26) + a.f) & 67108863)) | 
         ((i = (h >> 26) + a.g) & 67108863)) | 
        ((j = (i >> 26) + a.h) & 67108863)) | 
       ((a = (j >> 26) + a.i) & 67108863)) | 
      (b = (a >> 26) + (b & 4194303))) | 
    ((((((((((g ^ 64) & f) & e) & c) & d) & h) & i) & j) & a) & 
     (b ^ 62914560)) == 
    67108863;
  label B_a:
  return g;
}

function secp256k1_scalar_set_b32(a:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }, b:int_ptr@1, c:int_ptr) {
  var d:int;
  var e:int;
  var f:int;
  var g:int;
  var h:int;
  var i:int;
  var j:int;
  var k:int;
  var l:int;
  var m:long;
  a.a = 
    (e = ((d = b[28]) << 24 | (d << 8 & 16711680)) | 
         ((d >> 8 & 65280) | d >> 24));
  a.b = 
    (d = ((d = b[24]) << 24 | (d << 8 & 16711680)) | 
         ((d >> 8 & 65280) | d >> 24));
  a.c = 
    (f = ((f = b[20]) << 24 | (f << 8 & 16711680)) | 
         ((f >> 8 & 65280) | f >> 24));
  a.d = 
    (g = ((g = b[16]) << 24 | (g << 8 & 16711680)) | 
         ((g >> 8 & 65280) | g >> 24));
  a.e = 
    (h = ((h = b[12]) << 24 | (h << 8 & 16711680)) | 
         ((h >> 8 & 65280) | h >> 24));
  a.f = 
    (j = ((i = b[8]) << 24 | (i << 8 & 16711680)) | 
         ((i >> 8 & 65280) | i >> 24));
  a.g = 
    (i = ((i = b[4]) << 24 | (i << 8 & 16711680)) | 
         ((i >> 8 & 65280) | i >> 24));
  a.a = 
    (m = 
       i64_extend_i32_u(
         (b = 
            (((b = 
                 ((((l = 
                       (((b = 
                            (((l = 
                                 (((b = (((l = ((b = h < -2 | 
                                                     (j & 
                                                      ((k = ((b = b[0]) << 24 | (b << 8 & 16711680)) | 
                                                            ((b >> 8 & 65280) | b >> 24)) & 
                                                       i)) != 
                                                     -1) ^ 
                                                -1) & 
                                               h == -1) ^ 
                                          -1) & 
                                         g < -1162945306) | 
                                        b) ^ 
                                   -1) & 
                                  g > -1162945306) | 
                                 l) ^ 
                              -1) & 
                             f < -1354194885) | 
                            b) ^ 
                         -1) & 
                        f > -1354194885) | 
                       l) ^ 
                    -1) & 
                   d < -1076732276) | 
                  b) ^ 
                 -1) & 
              d > -1076732276) | 
             l) | 
            (b & e > -801750720)) * 
         801750719) + 
       i64_extend_i32_u(e));
  a.b = 
    (m = 
       i64_extend_i32_u(b * 1076732275) + i64_extend_i32_u(d) + (m >> 32L));
  a.c = 
    (m = 
       i64_extend_i32_u(b * 1354194884) + i64_extend_i32_u(f) + (m >> 32L));
  a.d = 
    (m = 
       i64_extend_i32_u(b * 1162945305) + i64_extend_i32_u(g) + (m >> 32L));
  a.e = (m = i64_extend_i32_u(b) + i64_extend_i32_u(h) + (m >> 32L));
  a.f = (m = (m >> 32L) + i64_extend_i32_u(j));
  a.g = (m = (m >> 32L) + i64_extend_i32_u(i));
  a.h = k + i32_wrap_i64(m >> 32L);
  if (eqz(c)) goto B_a;
  c[0] = b;
  label B_a:
}

function secp256k1_rfc6979_hmac_sha256_initialize(a:int, b:int, c:int) {
  var i:int;
  var i:int;
  var j:int;
  var m:int;
  var m:int;
  var j:int;
  var m:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var m:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var m:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var m:int;
  var j:int;
  var m:int;
  var m:int;
  var m:int;
  var m:int;
  var j:int;
  var m:int;
  var m:int;
  var n:int;
  var m:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var m:int;
  var j:int;
  var m:int;
  var m:int;
  var m:int;
  var m:int;
  var j:int;
  var m:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var m:int;
  var j:int;
  var n:int;
  var n:int;
  var n:int;
  var n:int;
  var m:int;
  var m:int;
  var m:int;
  var m:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var m:int;
  var m:int;
  var i:int;
  var m:int;
  var m:int;
  var i:int;
  var j:int;
  var m:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var m:int;
  var j:int;
  var m:int;
  var m:int;
  var m:int;
  var m:int;
  var j:int;
  var m:int;
  var m:int;
  var i:int;
  var m:int;
  var n:int;
  var i:int;
  var n:int;
  var n:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var m:int;
  var j:int;
  var m:int;
  var m:int;
  var i:int;
  var m:int;
  var m:int;
  var i:int;
  var j:int;
  var m:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var m:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var m:int;
  var m:int;
  var m:int;
  var j:int;
  var m:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var m:int;
  var j:int;
  var m:int;
  var m:int;
  var m:int;
  var m:int;
  var j:int;
  var m:int;
  var m:int;
  var m:int;
  var n:int;
  var n:int;
  var n:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var m:int;
  var j:int;
  var m:int;
  var m:int;
  var m:int;
  var m:int;
  var j:int;
  var m:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var m:int;
  var j:int;
  var n:int;
  var n:int;
  var n:int;
  var n:int;
  var m:int;
  var m:int;
  var m:int;
  var m:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var m:int;
  var m:int;
  var i:int;
  var m:int;
  var m:int;
  var i:int;
  var j:int;
  var m:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var m:int;
  var j:int;
  var m:int;
  var m:int;
  var m:int;
  var m:int;
  var j:int;
  var m:int;
  var m:int;
  var i:int;
  var m:int;
  var n:int;
  var i:int;
  var n:int;
  var n:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var m:int;
  var j:int;
  var m:int;
  var m:int;
  var i:int;
  var m:int;
  var m:int;
  var i:int;
  var j:int;
  var m:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var m:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var m:int;
  var m:int;
  var m:int;
  var j:int;
  var m:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var m:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var n:int;
  var n:int;
  var n:int;
  var n:int;
  var m:int;
  var m:int;
  var m:int;
  var m:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var i:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var j:int;
  var i:int;
  var i:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var m:int;
  var m:int;
  var m:int;
  var m:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var i:int;
  var i:int;
  var j:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var j:int;
  var j:int;
  var j:int;
  var i:int;
  var j:int;
  var j:int;
  var i:int;
  var i:int;
  var j:int;
  var j:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var j:int;
  var j:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var i:int;
  var j:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var j:int;
  var j:int;
  var j:int;
  var i:int;
  var j:int;
  var d:int = g_a - 288;
  g_a = d;
  a[0]:long@4 = 72340172838076673L;
  a[8]:long@4 = 0L;
  (a + 24)[0]:long@4 = 72340172838076673L;
  (a + 16)[0]:long@4 = 72340172838076673L;
  (a + 8)[0]:long@4 = 72340172838076673L;
  (a + 40)[0]:long@4 = 0L;
  (a + 48)[0]:long@4 = 0L;
  (a + 56)[0]:long@4 = 0L;
  (d + 132)[0]:long@4 = 6620516960021240235L;
  (d + 124)[0]:long@4 = -7276294671082564993L;
  (d + 116)[0]:long@4 = -6534734903820487822L;
  var e:int = 0;
  (d + 204)[0]:int = 0;
  (d + 208 + 56)[0]:long = 0L;
  (d + 208 + 48)[0]:long = 0L;
  (d + 208 + 40)[0]:long = 0L;
  (d + 208 + 24)[0]:long = 0L;
  (d + 208 + 16)[0]:long = 0L;
  d[27]:long@4 = -4942790177982912921L;
  d[30]:long = 0L;
  d[27]:long = 0L;
  d[26]:long = 0L;
  var f:long_ptr@1 = a + 32;
  var g:int = d + 108;
  var h:long_ptr = d + 208 + 32;
  loop L_a {
    i = d + 208 + e;
    i[0]:byte = i[0]:ubyte ^ 92;
    e = e + 1;
    if (e != 64) continue L_a;
  }
  i = d + 140;
  i[0]:long@4 = d[26]:long;
  (d + 148)[0]:long@4 = d[27]:long;
  (d + 156)[0]:long@4 = (d + 224)[0]:long;
  (d + 164)[0]:long@4 = (d + 232)[0]:long;
  (d + 172)[0]:long@4 = (d + 240)[0]:long;
  (d + 180)[0]:long@4 = (d + 248)[0]:long;
  (d + 188)[0]:long@4 = (d + 256)[0]:long;
  (d + 196)[0]:long@4 = (d + 264)[0]:long;
  d[51]:int = 64;
  secp256k1_sha256_transform(g, i);
  e = 0;
  d[26]:int = 0;
  d[4]:long = 6620516960021240235L;
  d[3]:long = -7276294671082564993L;
  d[2]:long = -6534734903820487822L;
  d[1]:long = -4942790177982912921L;
  loop L_b {
    j = d + 208 + e;
    j[0]:byte = j[0]:ubyte ^ 106;
    e = e + 1;
    if (e != 64) continue L_b;
  }
  (d + 8 + 40)[0]:long = d[27]:long;
  (d + 8 + 48)[0]:long = (d + 224)[0]:long;
  (d + 8 + 56)[0]:long = (d + 232)[0]:long;
  var k:int = 32;
  var l:long = (d + 208 + 32)[0]:long;
  d[26]:int = 64;
  (d + 8 + 64)[0]:long = l;
  (d + 80)[0]:long = (d + 208 + 40)[0]:long;
  (d + 88)[0]:long = (d + 208 + 48)[0]:long;
  (d + 96)[0]:long = (d + 208 + 56)[0]:long;
  d[5]:long = d[26]:long;
  secp256k1_sha256_transform(d + 8, e = d + 8 + 32);
  d[26]:int = (j = d[26]:int) + 32;
  m = j & 63;
  if (m >= 32) goto B_e;
  j = a;
  goto B_d;
  label B_e:
  memcpy(e + m, a, j = 64 - m);
  secp256k1_sha256_transform(d + 8, e);
  j = a + j;
  k = m + -32;
  if (k < 64) goto B_f;
  loop L_g {
    e[0]:long@1 = j[0]:long@1;
    (e + 56)[0]:long@1 = (j + 56)[0]:long@1;
    (e + 48)[0]:long@1 = (j + 48)[0]:long@1;
    (e + 40)[0]:long@1 = (j + 40)[0]:long@1;
    (e + 32)[0]:long@1 = (j + 32)[0]:long@1;
    (e + 24)[0]:long@1 = (j + 24)[0]:long@1;
    (e + 16)[0]:long@1 = (j + 16)[0]:long@1;
    (e + 8)[0]:long@1 = (j + 8)[0]:long@1;
    secp256k1_sha256_transform(d + 8, e);
    j = j + 64;
    k = k + -64;
    if (k > 63) continue L_g;
  }
  label B_f:
  m = 0;
  if (eqz(k)) goto B_c;
  label B_d:
  memcpy(e + m, j, k);
  label B_c:
  d[26]:int = (j = d[26]:int) + 1;
  j = j & 63;
  if (j != 63) goto B_i;
  d[103]:byte = 0;
  secp256k1_sha256_transform(d + 8, e);
  goto B_h;
  label B_i:
  (e + j)[0]:byte = 0;
  label B_h:
  d[26]:int = (j = d[26]:int) + c;
  k = 64 - (m = j & 63);
  if (k <= c) goto B_k;
  k = c;
  j = b;
  goto B_j;
  label B_k:
  memcpy(e + m, b, k);
  secp256k1_sha256_transform(d + 8, e);
  j = b + k;
  m = 0;
  k = c - k;
  if (k < 64) goto B_j;
  loop L_l {
    e[0]:long@1 = j[0]:long@1;
    (e + 56)[0]:long@1 = (j + 56)[0]:long@1;
    (e + 48)[0]:long@1 = (j + 48)[0]:long@1;
    (e + 40)[0]:long@1 = (j + 40)[0]:long@1;
    (e + 32)[0]:long@1 = (j + 32)[0]:long@1;
    (e + 24)[0]:long@1 = (j + 24)[0]:long@1;
    (e + 16)[0]:long@1 = (j + 16)[0]:long@1;
    (e + 8)[0]:long@1 = (j + 8)[0]:long@1;
    secp256k1_sha256_transform(d + 8, e);
    j = j + 64;
    k = k + -64;
    if (k > 63) continue L_l;
  }
  label B_j:
  if (eqz(k)) goto B_m;
  memcpy(e + m, j, k);
  label B_m:
  d[70]:int = (j = (m = d[26]:int) >> 5) & 117440512;
  d[26]:int = m + (k = (55 - m & 63) + 1);
  d[71]:int = 
    (((m << 11 & 16711680) | m << 27) | (j & 65280)) | (m >> 21 & 255);
  j = 68592;
  if (k < (n = 64 - (m = m & 63))) goto B_o;
  memcpy(e + m, 68592, n);
  secp256k1_sha256_transform(d + 8, e);
  j = n + 68592;
  k = k - n;
  if (k < 64) goto B_p;
  loop L_q {
    e[0]:long@1 = j[0]:long@1;
    (e + 56)[0]:long@1 = (j + 56)[0]:long@1;
    (e + 48)[0]:long@1 = (j + 48)[0]:long@1;
    (e + 40)[0]:long@1 = (j + 40)[0]:long@1;
    (e + 32)[0]:long@1 = (j + 32)[0]:long@1;
    (e + 24)[0]:long@1 = (j + 24)[0]:long@1;
    (e + 16)[0]:long@1 = (j + 16)[0]:long@1;
    (e + 8)[0]:long@1 = (j + 8)[0]:long@1;
    secp256k1_sha256_transform(d + 8, e);
    j = j + 64;
    k = k + -64;
    if (k > 63) continue L_q;
  }
  label B_p:
  m = 0;
  if (eqz(k)) goto B_n;
  label B_o:
  memcpy(e + m, j, k);
  label B_n:
  k = 8;
  d[26]:int = (m = d[26]:int) + 8;
  j = d + 280;
  m = m & 63;
  if (m < 56) goto B_s;
  memcpy(e + m, d + 280, j = 64 - m);
  secp256k1_sha256_transform(d + 8, e);
  j = d + 280 + j;
  k = m + -56;
  if (k < 64) goto B_t;
  loop L_u {
    e[0]:long@1 = j[0]:long@1;
    (e + 56)[0]:long@1 = (j + 56)[0]:long@1;
    (e + 48)[0]:long@1 = (j + 48)[0]:long@1;
    (e + 40)[0]:long@1 = (j + 40)[0]:long@1;
    (e + 32)[0]:long@1 = (j + 32)[0]:long@1;
    (e + 24)[0]:long@1 = (j + 24)[0]:long@1;
    (e + 16)[0]:long@1 = (j + 16)[0]:long@1;
    (e + 8)[0]:long@1 = (j + 8)[0]:long@1;
    secp256k1_sha256_transform(d + 8, e);
    j = j + 64;
    k = k + -64;
    if (k > 63) continue L_u;
  }
  label B_t:
  m = 0;
  if (eqz(k)) goto B_r;
  label B_s:
  memcpy(e + m, j, k);
  label B_r:
  j = d[2]:int;
  k = d[3]:int;
  d[1]:long = 0L;
  m = d[4]:int;
  n = d[5]:int;
  d[2]:long = 0L;
  var o:int = d[6]:int;
  var p:int = d[7]:int;
  d[3]:long = 0L;
  var q:int = d[8]:int;
  var r:int = d[9]:int;
  d[4]:long = 0L;
  d[59]:int = 
    (r << 24 | (r << 8 & 16711680)) | ((r >> 8 & 65280) | r >> 24);
  d[58]:int = 
    (q << 24 | (q << 8 & 16711680)) | ((q >> 8 & 65280) | q >> 24);
  d[57]:int = 
    (p << 24 | (p << 8 & 16711680)) | ((p >> 8 & 65280) | p >> 24);
  d[56]:int = 
    (o << 24 | (o << 8 & 16711680)) | ((o >> 8 & 65280) | o >> 24);
  d[55]:int = 
    (n << 24 | (n << 8 & 16711680)) | ((n >> 8 & 65280) | n >> 24);
  d[54]:int = 
    (m << 24 | (m << 8 & 16711680)) | ((m >> 8 & 65280) | m >> 24);
  d[53]:int = 
    (k << 24 | (k << 8 & 16711680)) | ((k >> 8 & 65280) | k >> 24);
  d[52]:int = 
    (j << 24 | (j << 8 & 16711680)) | ((j >> 8 & 65280) | j >> 24);
  k = 32;
  d[51]:int = (m = d[51]:int) + 32;
  j = d + 208;
  m = m & 63;
  if (m < 32) goto B_w;
  memcpy(i + m, d + 208, j = 64 - m);
  secp256k1_sha256_transform(g, i);
  j = d + 208 + j;
  k = m + -32;
  if (k < 64) goto B_x;
  loop L_y {
    i[0]:long@1 = j[0]:long@1;
    (i + 56)[0]:long@1 = (j + 56)[0]:long@1;
    (i + 48)[0]:long@1 = (j + 48)[0]:long@1;
    (i + 40)[0]:long@1 = (j + 40)[0]:long@1;
    (i + 32)[0]:long@1 = (j + 32)[0]:long@1;
    (i + 24)[0]:long@1 = (j + 24)[0]:long@1;
    (i + 16)[0]:long@1 = (j + 16)[0]:long@1;
    (i + 8)[0]:long@1 = (j + 8)[0]:long@1;
    secp256k1_sha256_transform(g, i);
    j = j + 64;
    k = k + -64;
    if (k > 63) continue L_y;
  }
  label B_x:
  m = 0;
  if (eqz(k)) goto B_v;
  label B_w:
  memcpy(i + m, j, k);
  label B_v:
  d[70]:int = (j = (m = d[51]:int) >> 5) & 117440512;
  d[51]:int = m + (k = (55 - m & 63) + 1);
  d[71]:int = 
    (((m << 11 & 16711680) | m << 27) | (j & 65280)) | (m >> 21 & 255);
  j = 68592;
  if (k < (n = 64 - (m = m & 63))) goto B_aa;
  memcpy(i + m, 68592, n);
  secp256k1_sha256_transform(g, i);
  j = n + 68592;
  k = k - n;
  if (k < 64) goto B_ba;
  loop L_ca {
    i[0]:long@1 = j[0]:long@1;
    (i + 56)[0]:long@1 = (j + 56)[0]:long@1;
    (i + 48)[0]:long@1 = (j + 48)[0]:long@1;
    (i + 40)[0]:long@1 = (j + 40)[0]:long@1;
    (i + 32)[0]:long@1 = (j + 32)[0]:long@1;
    (i + 24)[0]:long@1 = (j + 24)[0]:long@1;
    (i + 16)[0]:long@1 = (j + 16)[0]:long@1;
    (i + 8)[0]:long@1 = (j + 8)[0]:long@1;
    secp256k1_sha256_transform(g, i);
    j = j + 64;
    k = k + -64;
    if (k > 63) continue L_ca;
  }
  label B_ba:
  m = 0;
  if (eqz(k)) goto B_z;
  label B_aa:
  memcpy(i + m, j, k);
  label B_z:
  k = 8;
  d[51]:int = (m = d[51]:int) + 8;
  j = d + 280;
  m = m & 63;
  if (m < 56) goto B_ea;
  memcpy(i + m, d + 280, j = 64 - m);
  secp256k1_sha256_transform(g, i);
  j = d + 280 + j;
  k = m + -56;
  if (k < 64) goto B_fa;
  loop L_ga {
    i[0]:long@1 = j[0]:long@1;
    (i + 56)[0]:long@1 = (j + 56)[0]:long@1;
    (i + 48)[0]:long@1 = (j + 48)[0]:long@1;
    (i + 40)[0]:long@1 = (j + 40)[0]:long@1;
    (i + 32)[0]:long@1 = (j + 32)[0]:long@1;
    (i + 24)[0]:long@1 = (j + 24)[0]:long@1;
    (i + 16)[0]:long@1 = (j + 16)[0]:long@1;
    (i + 8)[0]:long@1 = (j + 8)[0]:long@1;
    secp256k1_sha256_transform(g, i);
    j = j + 64;
    k = k + -64;
    if (k > 63) continue L_ga;
  }
  label B_fa:
  m = 0;
  if (eqz(k)) goto B_da;
  label B_ea:
  memcpy(i + m, j, k);
  label B_da:
  (a + 60)[0]:int@1 = 
    ((j = d[34]:int) << 24 | (j << 8 & 16711680)) | 
    ((j >> 8 & 65280) | j >> 24);
  (a + 56)[0]:int@1 = 
    ((j = d[33]:int) << 24 | (j << 8 & 16711680)) | 
    ((j >> 8 & 65280) | j >> 24);
  (a + 52)[0]:int@1 = 
    ((j = d[32]:int) << 24 | (j << 8 & 16711680)) | 
    ((j >> 8 & 65280) | j >> 24);
  (a + 48)[0]:int@1 = 
    ((j = d[31]:int) << 24 | (j << 8 & 16711680)) | 
    ((j >> 8 & 65280) | j >> 24);
  (a + 44)[0]:int@1 = 
    ((j = d[30]:int) << 24 | (j << 8 & 16711680)) | 
    ((j >> 8 & 65280) | j >> 24);
  (a + 40)[0]:int@1 = 
    ((j = d[29]:int) << 24 | (j << 8 & 16711680)) | 
    ((j >> 8 & 65280) | j >> 24);
  (a + 36)[0]:int@1 = 
    ((j = d[28]:int) << 24 | (j << 8 & 16711680)) | 
    ((j >> 8 & 65280) | j >> 24);
  a[32]:int@1 = 
    ((j = d[27]:int) << 24 | (j << 8 & 16711680)) | 
    ((j >> 8 & 65280) | j >> 24);
  h[0] = 0L;
  (h + 8)[0]:long = 0L;
  (h + 16)[0]:long = 0L;
  (h + 24)[0]:long = 0L;
  (d + 208 + 24)[0]:long = (f + 24)[0]:long@1;
  (d + 208 + 16)[0]:long = (f + 16)[0]:long@1;
  d[27]:long = (f + 8)[0]:long@1;
  d[26]:long = f[0];
  j = 0;
  d[51]:int = 0;
  d[33]:long@4 = 6620516960021240235L;
  d[31]:long@4 = -7276294671082564993L;
  d[29]:long@4 = -6534734903820487822L;
  d[27]:long@4 = -4942790177982912921L;
  loop L_ha {
    k = d + 208 + j;
    k[0]:byte = k[0]:ubyte ^ 92;
    j = j + 1;
    if (j != 64) continue L_ha;
  }
  i[0]:long@4 = d[26]:long;
  (i + 8)[0]:long@4 = d[27]:long;
  (i + 16)[0]:long@4 = (d + 208 + 16)[0]:long;
  (i + 24)[0]:long@4 = (d + 208 + 24)[0]:long;
  (i + 32)[0]:long@4 = (d + 208 + 32)[0]:long;
  (i + 40)[0]:long@4 = (d + 208 + 40)[0]:long;
  (i + 48)[0]:long@4 = (d + 208 + 48)[0]:long;
  (i + 56)[0]:long@4 = (d + 208 + 56)[0]:long;
  d[51]:int = 64;
  secp256k1_sha256_transform(g, i);
  j = 0;
  d[26]:int = 0;
  d[4]:long = 6620516960021240235L;
  d[3]:long = -7276294671082564993L;
  d[2]:long = -6534734903820487822L;
  d[1]:long = -4942790177982912921L;
  loop L_ia {
    k = d + 208 + j;
    k[0]:byte = k[0]:ubyte ^ 106;
    j = j + 1;
    if (j != 64) continue L_ia;
  }
  e[0]:long@4 = d[26]:long;
  (e + 8)[0]:long@4 = d[27]:long;
  (e + 16)[0]:long@4 = (d + 208 + 16)[0]:long;
  (e + 24)[0]:long@4 = (d + 208 + 24)[0]:long;
  k = 32;
  (e + 32)[0]:long@4 = (d + 208 + 32)[0]:long;
  (e + 40)[0]:long@4 = (d + 208 + 40)[0]:long;
  (e + 48)[0]:long@4 = (d + 208 + 48)[0]:long;
  (e + 56)[0]:long@4 = (d + 208 + 56)[0]:long;
  d[26]:int = 64;
  secp256k1_sha256_transform(d + 8, e);
  d[26]:int = (j = d[26]:int) + 32;
  m = j & 63;
  if (m >= 32) goto B_la;
  j = a;
  goto B_ka;
  label B_la:
  memcpy(e + m, a, j = 64 - m);
  secp256k1_sha256_transform(d + 8, e);
  j = a + j;
  k = m + -32;
  if (k < 64) goto B_ma;
  loop L_na {
    e[0]:long@1 = j[0]:long@1;
    (e + 56)[0]:long@1 = (j + 56)[0]:long@1;
    (e + 48)[0]:long@1 = (j + 48)[0]:long@1;
    (e + 40)[0]:long@1 = (j + 40)[0]:long@1;
    (e + 32)[0]:long@1 = (j + 32)[0]:long@1;
    (e + 24)[0]:long@1 = (j + 24)[0]:long@1;
    (e + 16)[0]:long@1 = (j + 16)[0]:long@1;
    (e + 8)[0]:long@1 = (j + 8)[0]:long@1;
    secp256k1_sha256_transform(d + 8, e);
    j = j + 64;
    k = k + -64;
    if (k > 63) continue L_na;
  }
  label B_ma:
  m = 0;
  if (eqz(k)) goto B_ja;
  label B_ka:
  memcpy(e + m, j, k);
  label B_ja:
  d[70]:int = (j = (m = d[26]:int) >> 5) & 117440512;
  d[26]:int = m + (k = (55 - m & 63) + 1);
  d[71]:int = 
    (((m << 11 & 16711680) | m << 27) | (j & 65280)) | (m >> 21 & 255);
  j = 68592;
  if (k < (n = 64 - (m = m & 63))) goto B_pa;
  memcpy(e + m, 68592, n);
  secp256k1_sha256_transform(d + 8, e);
  j = n + 68592;
  k = k - n;
  if (k < 64) goto B_qa;
  loop L_ra {
    e[0]:long@1 = j[0]:long@1;
    (e + 56)[0]:long@1 = (j + 56)[0]:long@1;
    (e + 48)[0]:long@1 = (j + 48)[0]:long@1;
    (e + 40)[0]:long@1 = (j + 40)[0]:long@1;
    (e + 32)[0]:long@1 = (j + 32)[0]:long@1;
    (e + 24)[0]:long@1 = (j + 24)[0]:long@1;
    (e + 16)[0]:long@1 = (j + 16)[0]:long@1;
    (e + 8)[0]:long@1 = (j + 8)[0]:long@1;
    secp256k1_sha256_transform(d + 8, e);
    j = j + 64;
    k = k + -64;
    if (k > 63) continue L_ra;
  }
  label B_qa:
  m = 0;
  if (eqz(k)) goto B_oa;
  label B_pa:
  memcpy(e + m, j, k);
  label B_oa:
  k = 8;
  d[26]:int = (m = d[26]:int) + 8;
  j = d + 280;
  m = m & 63;
  if (m < 56) goto B_ta;
  memcpy(e + m, d + 280, j = 64 - m);
  secp256k1_sha256_transform(d + 8, e);
  j = d + 280 + j;
  k = m + -56;
  if (k < 64) goto B_ua;
  loop L_va {
    e[0]:long@1 = j[0]:long@1;
    (e + 56)[0]:long@1 = (j + 56)[0]:long@1;
    (e + 48)[0]:long@1 = (j + 48)[0]:long@1;
    (e + 40)[0]:long@1 = (j + 40)[0]:long@1;
    (e + 32)[0]:long@1 = (j + 32)[0]:long@1;
    (e + 24)[0]:long@1 = (j + 24)[0]:long@1;
    (e + 16)[0]:long@1 = (j + 16)[0]:long@1;
    (e + 8)[0]:long@1 = (j + 8)[0]:long@1;
    secp256k1_sha256_transform(d + 8, e);
    j = j + 64;
    k = k + -64;
    if (k > 63) continue L_va;
  }
  label B_ua:
  m = 0;
  if (eqz(k)) goto B_sa;
  label B_ta:
  memcpy(e + m, j, k);
  label B_sa:
  j = d[2]:int;
  k = d[3]:int;
  d[1]:long = 0L;
  m = d[4]:int;
  n = d[5]:int;
  d[2]:long = 0L;
  o = d[6]:int;
  p = d[7]:int;
  d[3]:long = 0L;
  q = d[8]:int;
  r = d[9]:int;
  d[4]:long = 0L;
  d[59]:int = 
    (r << 24 | (r << 8 & 16711680)) | ((r >> 8 & 65280) | r >> 24);
  d[58]:int = 
    (q << 24 | (q << 8 & 16711680)) | ((q >> 8 & 65280) | q >> 24);
  d[57]:int = 
    (p << 24 | (p << 8 & 16711680)) | ((p >> 8 & 65280) | p >> 24);
  d[56]:int = 
    (o << 24 | (o << 8 & 16711680)) | ((o >> 8 & 65280) | o >> 24);
  d[55]:int = 
    (n << 24 | (n << 8 & 16711680)) | ((n >> 8 & 65280) | n >> 24);
  d[54]:int = 
    (m << 24 | (m << 8 & 16711680)) | ((m >> 8 & 65280) | m >> 24);
  d[53]:int = 
    (k << 24 | (k << 8 & 16711680)) | ((k >> 8 & 65280) | k >> 24);
  d[52]:int = 
    (j << 24 | (j << 8 & 16711680)) | ((j >> 8 & 65280) | j >> 24);
  k = 32;
  d[51]:int = (m = d[51]:int) + 32;
  j = d + 208;
  m = m & 63;
  if (m < 32) goto B_xa;
  memcpy(i + m, d + 208, j = 64 - m);
  secp256k1_sha256_transform(g, i);
  j = d + 208 + j;
  k = m + -32;
  if (k < 64) goto B_ya;
  loop L_za {
    i[0]:long@1 = j[0]:long@1;
    (i + 56)[0]:long@1 = (j + 56)[0]:long@1;
    (i + 48)[0]:long@1 = (j + 48)[0]:long@1;
    (i + 40)[0]:long@1 = (j + 40)[0]:long@1;
    (i + 32)[0]:long@1 = (j + 32)[0]:long@1;
    (i + 24)[0]:long@1 = (j + 24)[0]:long@1;
    (i + 16)[0]:long@1 = (j + 16)[0]:long@1;
    (i + 8)[0]:long@1 = (j + 8)[0]:long@1;
    secp256k1_sha256_transform(g, i);
    j = j + 64;
    k = k + -64;
    if (k > 63) continue L_za;
  }
  label B_ya:
  m = 0;
  if (eqz(k)) goto B_wa;
  label B_xa:
  memcpy(i + m, j, k);
  label B_wa:
  d[70]:int = (j = (m = d[51]:int) >> 5) & 117440512;
  d[51]:int = m + (k = (55 - m & 63) + 1);
  d[71]:int = 
    (((m << 11 & 16711680) | m << 27) | (j & 65280)) | (m >> 21 & 255);
  j = 68592;
  if (k < (n = 64 - (m = m & 63))) goto B_bb;
  memcpy(i + m, 68592, n);
  secp256k1_sha256_transform(g, i);
  j = n + 68592;
  k = k - n;
  if (k < 64) goto B_cb;
  loop L_db {
    i[0]:long@1 = j[0]:long@1;
    (i + 56)[0]:long@1 = (j + 56)[0]:long@1;
    (i + 48)[0]:long@1 = (j + 48)[0]:long@1;
    (i + 40)[0]:long@1 = (j + 40)[0]:long@1;
    (i + 32)[0]:long@1 = (j + 32)[0]:long@1;
    (i + 24)[0]:long@1 = (j + 24)[0]:long@1;
    (i + 16)[0]:long@1 = (j + 16)[0]:long@1;
    (i + 8)[0]:long@1 = (j + 8)[0]:long@1;
    secp256k1_sha256_transform(g, i);
    j = j + 64;
    k = k + -64;
    if (k > 63) continue L_db;
  }
  label B_cb:
  m = 0;
  if (eqz(k)) goto B_ab;
  label B_bb:
  memcpy(i + m, j, k);
  label B_ab:
  k = 8;
  d[51]:int = (m = d[51]:int) + 8;
  j = d + 280;
  m = m & 63;
  if (m < 56) goto B_fb;
  memcpy(i + m, d + 280, j = 64 - m);
  secp256k1_sha256_transform(g, i);
  j = d + 280 + j;
  k = m + -56;
  if (k < 64) goto B_gb;
  loop L_hb {
    i[0]:long@1 = j[0]:long@1;
    (i + 56)[0]:long@1 = (j + 56)[0]:long@1;
    (i + 48)[0]:long@1 = (j + 48)[0]:long@1;
    (i + 40)[0]:long@1 = (j + 40)[0]:long@1;
    (i + 32)[0]:long@1 = (j + 32)[0]:long@1;
    (i + 24)[0]:long@1 = (j + 24)[0]:long@1;
    (i + 16)[0]:long@1 = (j + 16)[0]:long@1;
    (i + 8)[0]:long@1 = (j + 8)[0]:long@1;
    secp256k1_sha256_transform(g, i);
    j = j + 64;
    k = k + -64;
    if (k > 63) continue L_hb;
  }
  label B_gb:
  m = 0;
  if (eqz(k)) goto B_eb;
  label B_fb:
  memcpy(i + m, j, k);
  label B_eb:
  a[28]:int@1 = 
    ((j = d[34]:int) << 24 | (j << 8 & 16711680)) | 
    ((j >> 8 & 65280) | j >> 24);
  a[24]:int@1 = 
    ((j = d[33]:int) << 24 | (j << 8 & 16711680)) | 
    ((j >> 8 & 65280) | j >> 24);
  a[20]:int@1 = 
    ((j = d[32]:int) << 24 | (j << 8 & 16711680)) | 
    ((j >> 8 & 65280) | j >> 24);
  a[16]:int@1 = 
    ((j = d[31]:int) << 24 | (j << 8 & 16711680)) | 
    ((j >> 8 & 65280) | j >> 24);
  a[12]:int@1 = 
    ((j = d[30]:int) << 24 | (j << 8 & 16711680)) | 
    ((j >> 8 & 65280) | j >> 24);
  a[8]:int@1 = 
    ((j = d[29]:int) << 24 | (j << 8 & 16711680)) | 
    ((j >> 8 & 65280) | j >> 24);
  a[4]:int@1 = 
    ((j = d[28]:int) << 24 | (j << 8 & 16711680)) | 
    ((j >> 8 & 65280) | j >> 24);
  a[0]:int@1 = 
    ((j = d[27]:int) << 24 | (j << 8 & 16711680)) | 
    ((j >> 8 & 65280) | j >> 24);
  h[0] = 0L;
  (h + 8)[0]:long = 0L;
  (h + 16)[0]:long = 0L;
  (h + 24)[0]:long = 0L;
  (d + 208 + 24)[0]:long = (f + 24)[0]:long@1;
  (d + 208 + 16)[0]:long = (f + 16)[0]:long@1;
  d[27]:long = (f + 8)[0]:long@1;
  d[26]:long = f[0];
  j = 0;
  d[51]:int = 0;
  d[33]:long@4 = 6620516960021240235L;
  d[31]:long@4 = -7276294671082564993L;
  d[29]:long@4 = -6534734903820487822L;
  d[27]:long@4 = -4942790177982912921L;
  loop L_ib {
    k = d + 208 + j;
    k[0]:byte = k[0]:ubyte ^ 92;
    j = j + 1;
    if (j != 64) continue L_ib;
  }
  i[0]:long@4 = d[26]:long;
  (i + 8)[0]:long@4 = d[27]:long;
  (i + 16)[0]:long@4 = (d + 208 + 16)[0]:long;
  (i + 24)[0]:long@4 = (d + 208 + 24)[0]:long;
  (i + 32)[0]:long@4 = (d + 208 + 32)[0]:long;
  (i + 40)[0]:long@4 = (d + 208 + 40)[0]:long;
  (i + 48)[0]:long@4 = (d + 208 + 48)[0]:long;
  (i + 56)[0]:long@4 = (d + 208 + 56)[0]:long;
  d[51]:int = 64;
  secp256k1_sha256_transform(g, i);
  j = 0;
  d[26]:int = 0;
  d[4]:long = 6620516960021240235L;
  d[3]:long = -7276294671082564993L;
  d[2]:long = -6534734903820487822L;
  d[1]:long = -4942790177982912921L;
  loop L_jb {
    k = d + 208 + j;
    k[0]:byte = k[0]:ubyte ^ 106;
    j = j + 1;
    if (j != 64) continue L_jb;
  }
  e[0]:long@4 = d[26]:long;
  (e + 8)[0]:long@4 = d[27]:long;
  (e + 16)[0]:long@4 = (d + 208 + 16)[0]:long;
  (e + 24)[0]:long@4 = (d + 208 + 24)[0]:long;
  k = 32;
  (e + 32)[0]:long@4 = (d + 208 + 32)[0]:long;
  (e + 40)[0]:long@4 = (d + 208 + 40)[0]:long;
  (e + 48)[0]:long@4 = (d + 208 + 48)[0]:long;
  (e + 56)[0]:long@4 = (d + 208 + 56)[0]:long;
  d[26]:int = 64;
  secp256k1_sha256_transform(d + 8, e);
  d[26]:int = (j = d[26]:int) + 32;
  m = j & 63;
  if (m >= 32) goto B_mb;
  j = a;
  goto B_lb;
  label B_mb:
  memcpy(e + m, a, j = 64 - m);
  secp256k1_sha256_transform(d + 8, e);
  j = a + j;
  k = m + -32;
  if (k < 64) goto B_nb;
  loop L_ob {
    e[0]:long@1 = j[0]:long@1;
    (e + 56)[0]:long@1 = (j + 56)[0]:long@1;
    (e + 48)[0]:long@1 = (j + 48)[0]:long@1;
    (e + 40)[0]:long@1 = (j + 40)[0]:long@1;
    (e + 32)[0]:long@1 = (j + 32)[0]:long@1;
    (e + 24)[0]:long@1 = (j + 24)[0]:long@1;
    (e + 16)[0]:long@1 = (j + 16)[0]:long@1;
    (e + 8)[0]:long@1 = (j + 8)[0]:long@1;
    secp256k1_sha256_transform(d + 8, e);
    j = j + 64;
    k = k + -64;
    if (k > 63) continue L_ob;
  }
  label B_nb:
  m = 0;
  if (eqz(k)) goto B_kb;
  label B_lb:
  memcpy(e + m, j, k);
  label B_kb:
  d[26]:int = (j = d[26]:int) + 1;
  j = j & 63;
  if (j != 63) goto B_qb;
  d[103]:byte = 1;
  secp256k1_sha256_transform(d + 8, e);
  goto B_pb;
  label B_qb:
  (e + j)[0]:byte = 1;
  label B_pb:
  d[26]:int = (j = d[26]:int) + c;
  k = 64 - (j = j & 63);
  if (k > c) goto B_rb;
  memcpy(e + j, b, k);
  secp256k1_sha256_transform(d + 8, e);
  b = b + k;
  j = 0;
  c = c - k;
  if (c < 64) goto B_rb;
  loop L_sb {
    e[0]:long@1 = b[0]:long@1;
    (e + 56)[0]:long@1 = (b + 56)[0]:long@1;
    (e + 48)[0]:long@1 = (b + 48)[0]:long@1;
    (e + 40)[0]:long@1 = (b + 40)[0]:long@1;
    (e + 32)[0]:long@1 = (b + 32)[0]:long@1;
    (e + 24)[0]:long@1 = (b + 24)[0]:long@1;
    (e + 16)[0]:long@1 = (b + 16)[0]:long@1;
    (e + 8)[0]:long@1 = (b + 8)[0]:long@1;
    secp256k1_sha256_transform(d + 8, e);
    b = b + 64;
    c = c + -64;
    if (c > 63) continue L_sb;
  }
  label B_rb:
  if (eqz(c)) goto B_tb;
  memcpy(e + j, b, c);
  label B_tb:
  d[70]:int = (j = (k = d[26]:int) >> 5) & 117440512;
  d[26]:int = k + (b = (55 - k & 63) + 1);
  d[71]:int = 
    (((k << 11 & 16711680) | k << 27) | (j & 65280)) | (k >> 21 & 255);
  j = 68592;
  if (b < (c = 64 - (k = k & 63))) goto B_vb;
  memcpy(e + k, 68592, c);
  secp256k1_sha256_transform(d + 8, e);
  j = c + 68592;
  b = b - c;
  if (b < 64) goto B_wb;
  loop L_xb {
    e[0]:long@1 = j[0]:long@1;
    (e + 56)[0]:long@1 = (j + 56)[0]:long@1;
    (e + 48)[0]:long@1 = (j + 48)[0]:long@1;
    (e + 40)[0]:long@1 = (j + 40)[0]:long@1;
    (e + 32)[0]:long@1 = (j + 32)[0]:long@1;
    (e + 24)[0]:long@1 = (j + 24)[0]:long@1;
    (e + 16)[0]:long@1 = (j + 16)[0]:long@1;
    (e + 8)[0]:long@1 = (j + 8)[0]:long@1;
    secp256k1_sha256_transform(d + 8, e);
    j = j + 64;
    b = b + -64;
    if (b > 63) continue L_xb;
  }
  label B_wb:
  k = 0;
  if (eqz(b)) goto B_ub;
  label B_vb:
  memcpy(e + k, j, b);
  label B_ub:
  b = 8;
  d[26]:int = (k = d[26]:int) + 8;
  j = d + 280;
  k = k & 63;
  if (k < 56) goto B_zb;
  memcpy(e + k, d + 280, j = 64 - k);
  secp256k1_sha256_transform(d + 8, e);
  j = d + 280 + j;
  b = k + -56;
  if (b < 64) goto B_ac;
  loop L_bc {
    e[0]:long@1 = j[0]:long@1;
    (e + 56)[0]:long@1 = (j + 56)[0]:long@1;
    (e + 48)[0]:long@1 = (j + 48)[0]:long@1;
    (e + 40)[0]:long@1 = (j + 40)[0]:long@1;
    (e + 32)[0]:long@1 = (j + 32)[0]:long@1;
    (e + 24)[0]:long@1 = (j + 24)[0]:long@1;
    (e + 16)[0]:long@1 = (j + 16)[0]:long@1;
    (e + 8)[0]:long@1 = (j + 8)[0]:long@1;
    secp256k1_sha256_transform(d + 8, e);
    j = j + 64;
    b = b + -64;
    if (b > 63) continue L_bc;
  }
  label B_ac:
  k = 0;
  if (eqz(b)) goto B_yb;
  label B_zb:
  memcpy(e + k, j, b);
  label B_yb:
  j = d[2]:int;
  b = d[3]:int;
  d[1]:long = 0L;
  k = d[4]:int;
  c = d[5]:int;
  d[2]:long = 0L;
  m = d[6]:int;
  n = d[7]:int;
  d[3]:long = 0L;
  o = d[8]:int;
  p = d[9]:int;
  d[4]:long = 0L;
  d[59]:int = 
    (p << 24 | (p << 8 & 16711680)) | ((p >> 8 & 65280) | p >> 24);
  d[58]:int = 
    (o << 24 | (o << 8 & 16711680)) | ((o >> 8 & 65280) | o >> 24);
  d[57]:int = 
    (n << 24 | (n << 8 & 16711680)) | ((n >> 8 & 65280) | n >> 24);
  d[56]:int = 
    (m << 24 | (m << 8 & 16711680)) | ((m >> 8 & 65280) | m >> 24);
  d[55]:int = 
    (c << 24 | (c << 8 & 16711680)) | ((c >> 8 & 65280) | c >> 24);
  d[54]:int = 
    (k << 24 | (k << 8 & 16711680)) | ((k >> 8 & 65280) | k >> 24);
  d[53]:int = 
    (b << 24 | (b << 8 & 16711680)) | ((b >> 8 & 65280) | b >> 24);
  d[52]:int = 
    (j << 24 | (j << 8 & 16711680)) | ((j >> 8 & 65280) | j >> 24);
  b = 32;
  d[51]:int = (k = d[51]:int) + 32;
  j = d + 208;
  k = k & 63;
  if (k < 32) goto B_dc;
  memcpy(i + k, d + 208, j = 64 - k);
  secp256k1_sha256_transform(g, i);
  j = d + 208 + j;
  b = k + -32;
  if (b < 64) goto B_ec;
  loop L_fc {
    i[0]:long@1 = j[0]:long@1;
    (i + 56)[0]:long@1 = (j + 56)[0]:long@1;
    (i + 48)[0]:long@1 = (j + 48)[0]:long@1;
    (i + 40)[0]:long@1 = (j + 40)[0]:long@1;
    (i + 32)[0]:long@1 = (j + 32)[0]:long@1;
    (i + 24)[0]:long@1 = (j + 24)[0]:long@1;
    (i + 16)[0]:long@1 = (j + 16)[0]:long@1;
    (i + 8)[0]:long@1 = (j + 8)[0]:long@1;
    secp256k1_sha256_transform(g, i);
    j = j + 64;
    b = b + -64;
    if (b > 63) continue L_fc;
  }
  label B_ec:
  k = 0;
  if (eqz(b)) goto B_cc;
  label B_dc:
  memcpy(i + k, j, b);
  label B_cc:
  d[70]:int = (j = (k = d[51]:int) >> 5) & 117440512;
  d[51]:int = k + (b = (55 - k & 63) + 1);
  d[71]:int = 
    (((k << 11 & 16711680) | k << 27) | (j & 65280)) | (k >> 21 & 255);
  j = 68592;
  if (b < (c = 64 - (k = k & 63))) goto B_hc;
  memcpy(i + k, 68592, c);
  secp256k1_sha256_transform(g, i);
  j = c + 68592;
  b = b - c;
  if (b < 64) goto B_ic;
  loop L_jc {
    i[0]:long@1 = j[0]:long@1;
    (i + 56)[0]:long@1 = (j + 56)[0]:long@1;
    (i + 48)[0]:long@1 = (j + 48)[0]:long@1;
    (i + 40)[0]:long@1 = (j + 40)[0]:long@1;
    (i + 32)[0]:long@1 = (j + 32)[0]:long@1;
    (i + 24)[0]:long@1 = (j + 24)[0]:long@1;
    (i + 16)[0]:long@1 = (j + 16)[0]:long@1;
    (i + 8)[0]:long@1 = (j + 8)[0]:long@1;
    secp256k1_sha256_transform(g, i);
    j = j + 64;
    b = b + -64;
    if (b > 63) continue L_jc;
  }
  label B_ic:
  k = 0;
  if (eqz(b)) goto B_gc;
  label B_hc:
  memcpy(i + k, j, b);
  label B_gc:
  b = 8;
  d[51]:int = (k = d[51]:int) + 8;
  j = d + 280;
  k = k & 63;
  if (k < 56) goto B_lc;
  memcpy(i + k, d + 280, j = 64 - k);
  secp256k1_sha256_transform(g, i);
  j = d + 280 + j;
  b = k + -56;
  if (b < 64) goto B_mc;
  loop L_nc {
    i[0]:long@1 = j[0]:long@1;
    (i + 56)[0]:long@1 = (j + 56)[0]:long@1;
    (i + 48)[0]:long@1 = (j + 48)[0]:long@1;
    (i + 40)[0]:long@1 = (j + 40)[0]:long@1;
    (i + 32)[0]:long@1 = (j + 32)[0]:long@1;
    (i + 24)[0]:long@1 = (j + 24)[0]:long@1;
    (i + 16)[0]:long@1 = (j + 16)[0]:long@1;
    (i + 8)[0]:long@1 = (j + 8)[0]:long@1;
    secp256k1_sha256_transform(g, i);
    j = j + 64;
    b = b + -64;
    if (b > 63) continue L_nc;
  }
  label B_mc:
  k = 0;
  if (eqz(b)) goto B_kc;
  label B_lc:
  memcpy(i + k, j, b);
  label B_kc:
  a[60]:int@1 = 
    ((j = d[34]:int) << 24 | (j << 8 & 16711680)) | 
    ((j >> 8 & 65280) | j >> 24);
  a[56]:int@1 = 
    ((j = d[33]:int) << 24 | (j << 8 & 16711680)) | 
    ((j >> 8 & 65280) | j >> 24);
  a[52]:int@1 = 
    ((j = d[32]:int) << 24 | (j << 8 & 16711680)) | 
    ((j >> 8 & 65280) | j >> 24);
  a[48]:int@1 = 
    ((j = d[31]:int) << 24 | (j << 8 & 16711680)) | 
    ((j >> 8 & 65280) | j >> 24);
  a[44]:int@1 = 
    ((j = d[30]:int) << 24 | (j << 8 & 16711680)) | 
    ((j >> 8 & 65280) | j >> 24);
  a[40]:int@1 = 
    ((j = d[29]:int) << 24 | (j << 8 & 16711680)) | 
    ((j >> 8 & 65280) | j >> 24);
  a[36]:int@1 = 
    ((j = d[28]:int) << 24 | (j << 8 & 16711680)) | 
    ((j >> 8 & 65280) | j >> 24);
  a[32]:int@1 = 
    ((j = d[27]:int) << 24 | (j << 8 & 16711680)) | 
    ((j >> 8 & 65280) | j >> 24);
  h[0] = 0L;
  (h + 8)[0]:long = 0L;
  (h + 16)[0]:long = 0L;
  (h + 24)[0]:long = 0L;
  (d + 208 + 24)[0]:long = (f + 24)[0]:long@1;
  (d + 208 + 16)[0]:long = (f + 16)[0]:long@1;
  d[27]:long = (f + 8)[0]:long@1;
  d[26]:long = f[0];
  j = 0;
  d[51]:int = 0;
  d[33]:long@4 = 6620516960021240235L;
  d[31]:long@4 = -7276294671082564993L;
  d[29]:long@4 = -6534734903820487822L;
  d[27]:long@4 = -4942790177982912921L;
  loop L_oc {
    b = d + 208 + j;
    b[0]:byte = b[0]:ubyte ^ 92;
    j = j + 1;
    if (j != 64) continue L_oc;
  }
  i[0]:long@4 = d[26]:long;
  (i + 8)[0]:long@4 = d[27]:long;
  (i + 16)[0]:long@4 = (d + 208 + 16)[0]:long;
  (i + 24)[0]:long@4 = (d + 208 + 24)[0]:long;
  (i + 32)[0]:long@4 = (d + 208 + 32)[0]:long;
  (i + 40)[0]:long@4 = (d + 208 + 40)[0]:long;
  (i + 48)[0]:long@4 = (d + 208 + 48)[0]:long;
  (i + 56)[0]:long@4 = (d + 208 + 56)[0]:long;
  d[51]:int = 64;
  secp256k1_sha256_transform(g, i);
  j = 0;
  d[26]:int = 0;
  d[4]:long = 6620516960021240235L;
  d[3]:long = -7276294671082564993L;
  d[2]:long = -6534734903820487822L;
  d[1]:long = -4942790177982912921L;
  loop L_pc {
    b = d + 208 + j;
    b[0]:byte = b[0]:ubyte ^ 106;
    j = j + 1;
    if (j != 64) continue L_pc;
  }
  e[0]:long@4 = d[26]:long;
  (e + 8)[0]:long@4 = d[27]:long;
  (e + 16)[0]:long@4 = (d + 208 + 16)[0]:long;
  (e + 24)[0]:long@4 = (d + 208 + 24)[0]:long;
  b = 32;
  (e + 32)[0]:long@4 = (d + 208 + 32)[0]:long;
  (e + 40)[0]:long@4 = (d + 208 + 40)[0]:long;
  (e + 48)[0]:long@4 = (d + 208 + 48)[0]:long;
  (e + 56)[0]:long@4 = (d + 208 + 56)[0]:long;
  d[26]:int = 64;
  secp256k1_sha256_transform(d + 8, e);
  d[26]:int = (j = d[26]:int) + 32;
  k = j & 63;
  if (k >= 32) goto B_sc;
  j = a;
  goto B_rc;
  label B_sc:
  memcpy(e + k, a, j = 64 - k);
  secp256k1_sha256_transform(d + 8, e);
  j = a + j;
  b = k + -32;
  if (b < 64) goto B_tc;
  loop L_uc {
    e[0]:long@1 = j[0]:long@1;
    (e + 56)[0]:long@1 = (j + 56)[0]:long@1;
    (e + 48)[0]:long@1 = (j + 48)[0]:long@1;
    (e + 40)[0]:long@1 = (j + 40)[0]:long@1;
    (e + 32)[0]:long@1 = (j + 32)[0]:long@1;
    (e + 24)[0]:long@1 = (j + 24)[0]:long@1;
    (e + 16)[0]:long@1 = (j + 16)[0]:long@1;
    (e + 8)[0]:long@1 = (j + 8)[0]:long@1;
    secp256k1_sha256_transform(d + 8, e);
    j = j + 64;
    b = b + -64;
    if (b > 63) continue L_uc;
  }
  label B_tc:
  k = 0;
  if (eqz(b)) goto B_qc;
  label B_rc:
  memcpy(e + k, j, b);
  label B_qc:
  d[70]:int = (j = (k = d[26]:int) >> 5) & 117440512;
  d[26]:int = k + (b = (55 - k & 63) + 1);
  d[71]:int = 
    (((k << 11 & 16711680) | k << 27) | (j & 65280)) | (k >> 21 & 255);
  j = 68592;
  if (b < (c = 64 - (k = k & 63))) goto B_wc;
  memcpy(e + k, 68592, c);
  secp256k1_sha256_transform(d + 8, e);
  j = c + 68592;
  b = b - c;
  if (b < 64) goto B_xc;
  loop L_yc {
    e[0]:long@1 = j[0]:long@1;
    (e + 56)[0]:long@1 = (j + 56)[0]:long@1;
    (e + 48)[0]:long@1 = (j + 48)[0]:long@1;
    (e + 40)[0]:long@1 = (j + 40)[0]:long@1;
    (e + 32)[0]:long@1 = (j + 32)[0]:long@1;
    (e + 24)[0]:long@1 = (j + 24)[0]:long@1;
    (e + 16)[0]:long@1 = (j + 16)[0]:long@1;
    (e + 8)[0]:long@1 = (j + 8)[0]:long@1;
    secp256k1_sha256_transform(d + 8, e);
    j = j + 64;
    b = b + -64;
    if (b > 63) continue L_yc;
  }
  label B_xc:
  k = 0;
  if (eqz(b)) goto B_vc;
  label B_wc:
  memcpy(e + k, j, b);
  label B_vc:
  b = 8;
  d[26]:int = (k = d[26]:int) + 8;
  j = d + 280;
  k = k & 63;
  if (k < 56) goto B_ad;
  memcpy(e + k, d + 280, j = 64 - k);
  secp256k1_sha256_transform(d + 8, e);
  j = d + 280 + j;
  b = k + -56;
  if (b < 64) goto B_bd;
  loop L_cd {
    e[0]:long@1 = j[0]:long@1;
    (e + 56)[0]:long@1 = (j + 56)[0]:long@1;
    (e + 48)[0]:long@1 = (j + 48)[0]:long@1;
    (e + 40)[0]:long@1 = (j + 40)[0]:long@1;
    (e + 32)[0]:long@1 = (j + 32)[0]:long@1;
    (e + 24)[0]:long@1 = (j + 24)[0]:long@1;
    (e + 16)[0]:long@1 = (j + 16)[0]:long@1;
    (e + 8)[0]:long@1 = (j + 8)[0]:long@1;
    secp256k1_sha256_transform(d + 8, e);
    j = j + 64;
    b = b + -64;
    if (b > 63) continue L_cd;
  }
  label B_bd:
  k = 0;
  if (eqz(b)) goto B_zc;
  label B_ad:
  memcpy(e + k, j, b);
  label B_zc:
  e = d[2]:int;
  j = d[3]:int;
  d[1]:long = 0L;
  b = d[4]:int;
  k = d[5]:int;
  d[2]:long = 0L;
  c = d[6]:int;
  f = d[7]:int;
  d[3]:long = 0L;
  h = d[8]:int;
  m = d[9]:int;
  d[4]:long = 0L;
  d[59]:int = 
    (m << 24 | (m << 8 & 16711680)) | ((m >> 8 & 65280) | m >> 24);
  d[58]:int = 
    (h << 24 | (h << 8 & 16711680)) | ((h >> 8 & 65280) | h >> 24);
  d[57]:int = 
    (f << 24 | (f << 8 & 16711680)) | ((f >> 8 & 65280) | f >> 24);
  d[56]:int = 
    (c << 24 | (c << 8 & 16711680)) | ((c >> 8 & 65280) | c >> 24);
  d[55]:int = 
    (k << 24 | (k << 8 & 16711680)) | ((k >> 8 & 65280) | k >> 24);
  d[54]:int = 
    (b << 24 | (b << 8 & 16711680)) | ((b >> 8 & 65280) | b >> 24);
  d[53]:int = 
    (j << 24 | (j << 8 & 16711680)) | ((j >> 8 & 65280) | j >> 24);
  d[52]:int = 
    (e << 24 | (e << 8 & 16711680)) | ((e >> 8 & 65280) | e >> 24);
  j = 32;
  d[51]:int = (b = d[51]:int) + 32;
  e = d + 208;
  b = b & 63;
  if (b < 32) goto B_ed;
  memcpy(i + b, d + 208, e = 64 - b);
  secp256k1_sha256_transform(g, i);
  e = d + 208 + e;
  j = b + -32;
  if (j < 64) goto B_fd;
  loop L_gd {
    i[0]:long@1 = e[0]:long@1;
    (i + 56)[0]:long@1 = (e + 56)[0]:long@1;
    (i + 48)[0]:long@1 = (e + 48)[0]:long@1;
    (i + 40)[0]:long@1 = (e + 40)[0]:long@1;
    (i + 32)[0]:long@1 = (e + 32)[0]:long@1;
    (i + 24)[0]:long@1 = (e + 24)[0]:long@1;
    (i + 16)[0]:long@1 = (e + 16)[0]:long@1;
    (i + 8)[0]:long@1 = (e + 8)[0]:long@1;
    secp256k1_sha256_transform(g, i);
    e = e + 64;
    j = j + -64;
    if (j > 63) continue L_gd;
  }
  label B_fd:
  b = 0;
  if (eqz(j)) goto B_dd;
  label B_ed:
  memcpy(i + b, e, j);
  label B_dd:
  d[70]:int = (e = (b = d[51]:int) >> 5) & 117440512;
  d[51]:int = b + (j = (55 - b & 63) + 1);
  d[71]:int = 
    (((b << 11 & 16711680) | b << 27) | (e & 65280)) | (b >> 21 & 255);
  e = 68592;
  if (j < (k = 64 - (b = b & 63))) goto B_id;
  memcpy(i + b, 68592, k);
  secp256k1_sha256_transform(g, i);
  e = k + 68592;
  j = j - k;
  if (j < 64) goto B_jd;
  loop L_kd {
    i[0]:long@1 = e[0]:long@1;
    (i + 56)[0]:long@1 = (e + 56)[0]:long@1;
    (i + 48)[0]:long@1 = (e + 48)[0]:long@1;
    (i + 40)[0]:long@1 = (e + 40)[0]:long@1;
    (i + 32)[0]:long@1 = (e + 32)[0]:long@1;
    (i + 24)[0]:long@1 = (e + 24)[0]:long@1;
    (i + 16)[0]:long@1 = (e + 16)[0]:long@1;
    (i + 8)[0]:long@1 = (e + 8)[0]:long@1;
    secp256k1_sha256_transform(g, i);
    e = e + 64;
    j = j + -64;
    if (j > 63) continue L_kd;
  }
  label B_jd:
  b = 0;
  if (eqz(j)) goto B_hd;
  label B_id:
  memcpy(i + b, e, j);
  label B_hd:
  j = 8;
  d[51]:int = (b = d[51]:int) + 8;
  e = d + 280;
  b = b & 63;
  if (b < 56) goto B_md;
  memcpy(i + b, d + 280, e = 64 - b);
  secp256k1_sha256_transform(g, i);
  e = d + 280 + e;
  j = b + -56;
  if (j < 64) goto B_nd;
  loop L_od {
    i[0]:long@1 = e[0]:long@1;
    (i + 56)[0]:long@1 = (e + 56)[0]:long@1;
    (i + 48)[0]:long@1 = (e + 48)[0]:long@1;
    (i + 40)[0]:long@1 = (e + 40)[0]:long@1;
    (i + 32)[0]:long@1 = (e + 32)[0]:long@1;
    (i + 24)[0]:long@1 = (e + 24)[0]:long@1;
    (i + 16)[0]:long@1 = (e + 16)[0]:long@1;
    (i + 8)[0]:long@1 = (e + 8)[0]:long@1;
    secp256k1_sha256_transform(g, i);
    e = e + 64;
    j = j + -64;
    if (j > 63) continue L_od;
  }
  label B_nd:
  b = 0;
  if (eqz(j)) goto B_ld;
  label B_md:
  memcpy(i + b, e, j);
  label B_ld:
  a[28]:int@1 = 
    ((e = d[34]:int) << 24 | (e << 8 & 16711680)) | 
    ((e >> 8 & 65280) | e >> 24);
  a[24]:int@1 = 
    ((e = d[33]:int) << 24 | (e << 8 & 16711680)) | 
    ((e >> 8 & 65280) | e >> 24);
  a[20]:int@1 = 
    ((e = d[32]:int) << 24 | (e << 8 & 16711680)) | 
    ((e >> 8 & 65280) | e >> 24);
  a[16]:int@1 = 
    ((e = d[31]:int) << 24 | (e << 8 & 16711680)) | 
    ((e >> 8 & 65280) | e >> 24);
  a[12]:int@1 = 
    ((e = d[30]:int) << 24 | (e << 8 & 16711680)) | 
    ((e >> 8 & 65280) | e >> 24);
  a[8]:int@1 = 
    ((e = d[29]:int) << 24 | (e << 8 & 16711680)) | 
    ((e >> 8 & 65280) | e >> 24);
  a[4]:int@1 = 
    ((e = d[28]:int) << 24 | (e << 8 & 16711680)) | 
    ((e >> 8 & 65280) | e >> 24);
  a[0]:int@1 = 
    ((e = d[27]:int) << 24 | (e << 8 & 16711680)) | 
    ((e >> 8 & 65280) | e >> 24);
  d[27]:long@4 = 0L;
  d[29]:int = 0;
  d[15]:long = 0L;
  d[16]:long = 0L;
  a[16]:int = 0;
  g_a = d + 288;
}

function secp256k1_rfc6979_hmac_sha256_generate(a:int, b:long_ptr@1) {
  var h:int;
  var h:int;
  var h:int;
  var i:int;
  var h:int;
  var l:int;
  var l:int;
  var h:int;
  var i:int;
  var l:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var l:int;
  var i:int;
  var i:int;
  var i:int;
  var h:int;
  var h:int;
  var i:int;
  var l:int;
  var l:int;
  var l:int;
  var l:int;
  var i:int;
  var l:int;
  var l:int;
  var m:int;
  var h:int;
  var l:int;
  var h:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var l:int;
  var i:int;
  var l:int;
  var l:int;
  var h:int;
  var l:int;
  var l:int;
  var h:int;
  var i:int;
  var l:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var l:int;
  var i:int;
  var m:int;
  var m:int;
  var m:int;
  var m:int;
  var l:int;
  var l:int;
  var l:int;
  var l:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var l:int;
  var l:int;
  var l:int;
  var l:int;
  var i:int;
  var l:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var l:int;
  var i:int;
  var l:int;
  var l:int;
  var l:int;
  var l:int;
  var i:int;
  var l:int;
  var l:int;
  var l:int;
  var m:int;
  var m:int;
  var m:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var l:int;
  var i:int;
  var l:int;
  var l:int;
  var l:int;
  var l:int;
  var i:int;
  var l:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var l:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var i:int;
  var l:int;
  var h:int;
  var l:int;
  var l:int;
  var h:int;
  var i:int;
  var l:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var l:int;
  var i:int;
  var l:int;
  var l:int;
  var l:int;
  var l:int;
  var i:int;
  var l:int;
  var l:int;
  var h:int;
  var l:int;
  var h:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var l:int;
  var i:int;
  var l:int;
  var l:int;
  var h:int;
  var l:int;
  var l:int;
  var h:int;
  var i:int;
  var l:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var l:int;
  var i:int;
  var m:int;
  var m:int;
  var m:int;
  var m:int;
  var l:int;
  var l:int;
  var l:int;
  var l:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var i:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var i:int;
  var i:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var l:int;
  var l:int;
  var i:int;
  var l:int;
  var i:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var i:int;
  var i:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var i:int;
  var i:int;
  var i:int;
  var h:int;
  var i:int;
  var i:int;
  var j:int;
  var j:int;
  var i:int;
  var i:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var f:int;
  var h:int;
  var i:int;
  var j:int;
  var j:int;
  var i:int;
  var i:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var i:int;
  var l:int;
  var d:int;
  var l:int;
  var l:int;
  var d:int;
  var i:int;
  var l:int;
  var j:int;
  var d:int;
  var i:int;
  var d:int;
  var i:int;
  var d:int;
  var i:int;
  var d:int;
  var i:int;
  var d:int;
  var i:int;
  var d:int;
  var i:int;
  var d:int;
  var i:int;
  var d:int;
  var i:int;
  var d:int;
  var i:int;
  var j:int;
  var j:int;
  var j:int;
  var d:int;
  var l:int;
  var i:int;
  var j:int;
  var l:int;
  var l:int;
  var l:int;
  var l:int;
  var i:int;
  var l:int;
  var j:int;
  var l:int;
  var d:int;
  var l:int;
  var e:long_ptr@1;
  var d:int;
  var e:long_ptr@1;
  var j:int;
  var e:long_ptr@1;
  var j:int;
  var d:int;
  var i:int;
  var d:int;
  var i:int;
  var d:int;
  var i:int;
  var d:int;
  var i:int;
  var d:int;
  var i:int;
  var d:int;
  var i:int;
  var d:int;
  var i:int;
  var d:int;
  var i:int;
  var d:int;
  var i:int;
  var j:int;
  var j:int;
  var j:int;
  var d:int;
  var l:int;
  var i:int;
  var j:int;
  var l:int;
  var l:int;
  var d:int;
  var l:int;
  var l:int;
  var d:int;
  var i:int;
  var l:int;
  var j:int;
  var d:int;
  var i:int;
  var d:int;
  var i:int;
  var d:int;
  var i:int;
  var d:int;
  var i:int;
  var d:int;
  var i:int;
  var d:int;
  var i:int;
  var d:int;
  var i:int;
  var d:int;
  var i:int;
  var d:int;
  var i:int;
  var j:int;
  var j:int;
  var j:int;
  var d:int;
  var l:int;
  var i:int;
  var j:int;
  var n:int;
  var n:int;
  var n:int;
  var n:int;
  var m:int;
  var m:int;
  var m:int;
  var m:int;
  var g:long_ptr;
  var g:long_ptr;
  var g:long_ptr;
  var g:long_ptr;
  var e:long_ptr@1;
  var e:long_ptr@1;
  var e:long_ptr@1;
  var e:long_ptr@1;
  var l:int;
  var l:int;
  var l:int;
  var l:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var j:int;
  var j:int;
  var h:int;
  var j:int;
  var j:int;
  var f:int;
  var h:int;
  var d:int;
  var j:int;
  var i:int;
  var h:int;
  var d:int;
  var h:int;
  var d:int;
  var h:int;
  var d:int;
  var h:int;
  var d:int;
  var h:int;
  var d:int;
  var h:int;
  var d:int;
  var h:int;
  var d:int;
  var h:int;
  var d:int;
  var f:int;
  var h:int;
  var d:int;
  var i:int;
  var i:int;
  var i:int;
  var h:int;
  var j:int;
  var d:int;
  var i:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var d:int;
  var j:int;
  var i:int;
  var j:int;
  var h:int;
  var j:int;
  var l:int;
  var f:int;
  var h:int;
  var l:int;
  var i:int;
  var l:int;
  var i:int;
  var h:int;
  var d:int;
  var h:int;
  var d:int;
  var h:int;
  var d:int;
  var h:int;
  var d:int;
  var h:int;
  var d:int;
  var h:int;
  var d:int;
  var h:int;
  var d:int;
  var h:int;
  var d:int;
  var f:int;
  var h:int;
  var d:int;
  var i:int;
  var i:int;
  var i:int;
  var h:int;
  var j:int;
  var d:int;
  var i:int;
  var j:int;
  var j:int;
  var h:int;
  var j:int;
  var j:int;
  var f:int;
  var h:int;
  var d:int;
  var j:int;
  var i:int;
  var h:int;
  var d:int;
  var h:int;
  var d:int;
  var h:int;
  var d:int;
  var h:int;
  var d:int;
  var h:int;
  var d:int;
  var h:int;
  var d:int;
  var h:int;
  var d:int;
  var h:int;
  var d:int;
  var f:int;
  var h:int;
  var d:int;
  var i:int;
  var i:int;
  var i:int;
  var h:int;
  var j:int;
  var d:int;
  var i:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var c:int = g_a - 288;
  g_a = c;
  if (eqz(a[16]:int)) goto B_a;
  (c + 208 + 40)[0]:long = 0L;
  (c + 208 + 48)[0]:long = 0L;
  (c + 208 + 56)[0]:long = 0L;
  d = 0;
  (c + 204)[0]:int = 0;
  (c + 132)[0]:long@4 = 6620516960021240235L;
  (c + 124)[0]:long@4 = -7276294671082564993L;
  (c + 116)[0]:long@4 = -6534734903820487822L;
  (c + 232)[0]:long = (a + 56)[0]:long@1;
  (c + 224)[0]:long = (a + 48)[0]:long@1;
  c[27]:long@4 = -4942790177982912921L;
  c[30]:long = 0L;
  c[27]:long = (a + 40)[0]:long@1;
  c[26]:long = a[32]:long@1;
  e = a + 32;
  f = c + 108;
  g = c + 208 + 32;
  loop L_b {
    h = c + 208 + d;
    h[0]:byte = h[0]:ubyte ^ 92;
    d = d + 1;
    if (d != 64) continue L_b;
  }
  d = c + 140;
  d[0]:long@4 = c[26]:long;
  (c + 148)[0]:long@4 = c[27]:long;
  (c + 156)[0]:long@4 = (c + 224)[0]:long;
  (c + 164)[0]:long@4 = (c + 232)[0]:long;
  (c + 172)[0]:long@4 = (c + 240)[0]:long;
  (c + 180)[0]:long@4 = (c + 248)[0]:long;
  (c + 188)[0]:long@4 = (c + 256)[0]:long;
  (c + 196)[0]:long@4 = (c + 264)[0]:long;
  c[51]:int = 64;
  secp256k1_sha256_transform(f, d);
  h = 0;
  c[26]:int = 0;
  c[4]:long = 6620516960021240235L;
  c[3]:long = -7276294671082564993L;
  c[2]:long = -6534734903820487822L;
  c[1]:long = -4942790177982912921L;
  loop L_c {
    i = c + 208 + h;
    i[0]:byte = i[0]:ubyte ^ 106;
    h = h + 1;
    if (h != 64) continue L_c;
  }
  (c + 8 + 40)[0]:long = c[27]:long;
  (c + 8 + 48)[0]:long = (c + 224)[0]:long;
  (c + 8 + 56)[0]:long = (c + 232)[0]:long;
  j = 32;
  var k:long = (c + 208 + 32)[0]:long;
  c[26]:int = 64;
  (c + 8 + 64)[0]:long = k;
  (c + 80)[0]:long = (c + 208 + 40)[0]:long;
  (c + 88)[0]:long = (c + 208 + 48)[0]:long;
  (c + 96)[0]:long = (c + 208 + 56)[0]:long;
  c[5]:long = c[26]:long;
  secp256k1_sha256_transform(c + 8, h = c + 8 + 32);
  c[26]:int = (i = c[26]:int) + 32;
  l = i & 63;
  if (l >= 32) goto B_f;
  i = a;
  goto B_e;
  label B_f:
  memcpy(h + l, a, i = 64 - l);
  secp256k1_sha256_transform(c + 8, h);
  i = a + i;
  j = l + -32;
  if (j < 64) goto B_g;
  loop L_h {
    h[0]:long@1 = i[0]:long@1;
    (h + 56)[0]:long@1 = (i + 56)[0]:long@1;
    (h + 48)[0]:long@1 = (i + 48)[0]:long@1;
    (h + 40)[0]:long@1 = (i + 40)[0]:long@1;
    (h + 32)[0]:long@1 = (i + 32)[0]:long@1;
    (h + 24)[0]:long@1 = (i + 24)[0]:long@1;
    (h + 16)[0]:long@1 = (i + 16)[0]:long@1;
    (h + 8)[0]:long@1 = (i + 8)[0]:long@1;
    secp256k1_sha256_transform(c + 8, h);
    i = i + 64;
    j = j + -64;
    if (j > 63) continue L_h;
  }
  label B_g:
  l = 0;
  if (eqz(j)) goto B_d;
  label B_e:
  memcpy(h + l, i, j);
  label B_d:
  c[26]:int = (i = c[26]:int) + 1;
  i = i & 63;
  if (i != 63) goto B_j;
  c[103]:byte = 0;
  secp256k1_sha256_transform(c + 8, h);
  goto B_i;
  label B_j:
  (h + i)[0]:byte = 0;
  label B_i:
  c[70]:int = (i = (l = c[26]:int) >> 5) & 117440512;
  c[26]:int = l + (j = (55 - l & 63) + 1);
  c[71]:int = 
    (((l << 11 & 16711680) | l << 27) | (i & 65280)) | (l >> 21 & 255);
  i = 68592;
  if (j < (m = 64 - (l = l & 63))) goto B_l;
  memcpy(h + l, 68592, m);
  secp256k1_sha256_transform(c + 8, h);
  i = m + 68592;
  j = j - m;
  if (j < 64) goto B_m;
  loop L_n {
    h[0]:long@1 = i[0]:long@1;
    (h + 56)[0]:long@1 = (i + 56)[0]:long@1;
    (h + 48)[0]:long@1 = (i + 48)[0]:long@1;
    (h + 40)[0]:long@1 = (i + 40)[0]:long@1;
    (h + 32)[0]:long@1 = (i + 32)[0]:long@1;
    (h + 24)[0]:long@1 = (i + 24)[0]:long@1;
    (h + 16)[0]:long@1 = (i + 16)[0]:long@1;
    (h + 8)[0]:long@1 = (i + 8)[0]:long@1;
    secp256k1_sha256_transform(c + 8, h);
    i = i + 64;
    j = j + -64;
    if (j > 63) continue L_n;
  }
  label B_m:
  l = 0;
  if (eqz(j)) goto B_k;
  label B_l:
  memcpy(h + l, i, j);
  label B_k:
  j = 8;
  c[26]:int = (l = c[26]:int) + 8;
  i = c + 280;
  l = l & 63;
  if (l < 56) goto B_p;
  memcpy(h + l, c + 280, i = 64 - l);
  secp256k1_sha256_transform(c + 8, h);
  i = c + 280 + i;
  j = l + -56;
  if (j < 64) goto B_q;
  loop L_r {
    h[0]:long@1 = i[0]:long@1;
    (h + 56)[0]:long@1 = (i + 56)[0]:long@1;
    (h + 48)[0]:long@1 = (i + 48)[0]:long@1;
    (h + 40)[0]:long@1 = (i + 40)[0]:long@1;
    (h + 32)[0]:long@1 = (i + 32)[0]:long@1;
    (h + 24)[0]:long@1 = (i + 24)[0]:long@1;
    (h + 16)[0]:long@1 = (i + 16)[0]:long@1;
    (h + 8)[0]:long@1 = (i + 8)[0]:long@1;
    secp256k1_sha256_transform(c + 8, h);
    i = i + 64;
    j = j + -64;
    if (j > 63) continue L_r;
  }
  label B_q:
  l = 0;
  if (eqz(j)) goto B_o;
  label B_p:
  memcpy(h + l, i, j);
  label B_o:
  i = c[2]:int;
  j = c[3]:int;
  c[1]:long = 0L;
  l = c[4]:int;
  m = c[5]:int;
  c[2]:long = 0L;
  n = c[6]:int;
  var o:int = c[7]:int;
  c[3]:long = 0L;
  var p:int = c[8]:int;
  var q:int = c[9]:int;
  c[4]:long = 0L;
  c[59]:int = 
    (q << 24 | (q << 8 & 16711680)) | ((q >> 8 & 65280) | q >> 24);
  c[58]:int = 
    (p << 24 | (p << 8 & 16711680)) | ((p >> 8 & 65280) | p >> 24);
  c[57]:int = 
    (o << 24 | (o << 8 & 16711680)) | ((o >> 8 & 65280) | o >> 24);
  c[56]:int = 
    (n << 24 | (n << 8 & 16711680)) | ((n >> 8 & 65280) | n >> 24);
  c[55]:int = 
    (m << 24 | (m << 8 & 16711680)) | ((m >> 8 & 65280) | m >> 24);
  c[54]:int = 
    (l << 24 | (l << 8 & 16711680)) | ((l >> 8 & 65280) | l >> 24);
  c[53]:int = 
    (j << 24 | (j << 8 & 16711680)) | ((j >> 8 & 65280) | j >> 24);
  c[52]:int = 
    (i << 24 | (i << 8 & 16711680)) | ((i >> 8 & 65280) | i >> 24);
  j = 32;
  c[51]:int = (l = c[51]:int) + 32;
  i = c + 208;
  l = l & 63;
  if (l < 32) goto B_t;
  memcpy(d + l, c + 208, i = 64 - l);
  secp256k1_sha256_transform(f, d);
  i = c + 208 + i;
  j = l + -32;
  if (j < 64) goto B_u;
  loop L_v {
    d[0]:long@1 = i[0]:long@1;
    (d + 56)[0]:long@1 = (i + 56)[0]:long@1;
    (d + 48)[0]:long@1 = (i + 48)[0]:long@1;
    (d + 40)[0]:long@1 = (i + 40)[0]:long@1;
    (d + 32)[0]:long@1 = (i + 32)[0]:long@1;
    (d + 24)[0]:long@1 = (i + 24)[0]:long@1;
    (d + 16)[0]:long@1 = (i + 16)[0]:long@1;
    (d + 8)[0]:long@1 = (i + 8)[0]:long@1;
    secp256k1_sha256_transform(f, d);
    i = i + 64;
    j = j + -64;
    if (j > 63) continue L_v;
  }
  label B_u:
  l = 0;
  if (eqz(j)) goto B_s;
  label B_t:
  memcpy(d + l, i, j);
  label B_s:
  c[70]:int = (i = (l = c[51]:int) >> 5) & 117440512;
  c[51]:int = l + (j = (55 - l & 63) + 1);
  c[71]:int = 
    (((l << 11 & 16711680) | l << 27) | (i & 65280)) | (l >> 21 & 255);
  i = 68592;
  if (j < (m = 64 - (l = l & 63))) goto B_x;
  memcpy(d + l, 68592, m);
  secp256k1_sha256_transform(f, d);
  i = m + 68592;
  j = j - m;
  if (j < 64) goto B_y;
  loop L_z {
    d[0]:long@1 = i[0]:long@1;
    (d + 56)[0]:long@1 = (i + 56)[0]:long@1;
    (d + 48)[0]:long@1 = (i + 48)[0]:long@1;
    (d + 40)[0]:long@1 = (i + 40)[0]:long@1;
    (d + 32)[0]:long@1 = (i + 32)[0]:long@1;
    (d + 24)[0]:long@1 = (i + 24)[0]:long@1;
    (d + 16)[0]:long@1 = (i + 16)[0]:long@1;
    (d + 8)[0]:long@1 = (i + 8)[0]:long@1;
    secp256k1_sha256_transform(f, d);
    i = i + 64;
    j = j + -64;
    if (j > 63) continue L_z;
  }
  label B_y:
  l = 0;
  if (eqz(j)) goto B_w;
  label B_x:
  memcpy(d + l, i, j);
  label B_w:
  j = 8;
  c[51]:int = (l = c[51]:int) + 8;
  i = c + 280;
  l = l & 63;
  if (l < 56) goto B_ba;
  memcpy(d + l, c + 280, i = 64 - l);
  secp256k1_sha256_transform(f, d);
  i = c + 280 + i;
  j = l + -56;
  if (j < 64) goto B_ca;
  loop L_da {
    d[0]:long@1 = i[0]:long@1;
    (d + 56)[0]:long@1 = (i + 56)[0]:long@1;
    (d + 48)[0]:long@1 = (i + 48)[0]:long@1;
    (d + 40)[0]:long@1 = (i + 40)[0]:long@1;
    (d + 32)[0]:long@1 = (i + 32)[0]:long@1;
    (d + 24)[0]:long@1 = (i + 24)[0]:long@1;
    (d + 16)[0]:long@1 = (i + 16)[0]:long@1;
    (d + 8)[0]:long@1 = (i + 8)[0]:long@1;
    secp256k1_sha256_transform(f, d);
    i = i + 64;
    j = j + -64;
    if (j > 63) continue L_da;
  }
  label B_ca:
  l = 0;
  if (eqz(j)) goto B_aa;
  label B_ba:
  memcpy(d + l, i, j);
  label B_aa:
  (a + 60)[0]:int@1 = 
    ((i = c[34]:int) << 24 | (i << 8 & 16711680)) | 
    ((i >> 8 & 65280) | i >> 24);
  (a + 56)[0]:int@1 = 
    ((i = c[33]:int) << 24 | (i << 8 & 16711680)) | 
    ((i >> 8 & 65280) | i >> 24);
  (a + 52)[0]:int@1 = 
    ((i = c[32]:int) << 24 | (i << 8 & 16711680)) | 
    ((i >> 8 & 65280) | i >> 24);
  (a + 48)[0]:int@1 = 
    ((i = c[31]:int) << 24 | (i << 8 & 16711680)) | 
    ((i >> 8 & 65280) | i >> 24);
  (a + 44)[0]:int@1 = 
    ((i = c[30]:int) << 24 | (i << 8 & 16711680)) | 
    ((i >> 8 & 65280) | i >> 24);
  (a + 40)[0]:int@1 = 
    ((i = c[29]:int) << 24 | (i << 8 & 16711680)) | 
    ((i >> 8 & 65280) | i >> 24);
  (a + 36)[0]:int@1 = 
    ((i = c[28]:int) << 24 | (i << 8 & 16711680)) | 
    ((i >> 8 & 65280) | i >> 24);
  a[32]:int@1 = 
    ((i = c[27]:int) << 24 | (i << 8 & 16711680)) | 
    ((i >> 8 & 65280) | i >> 24);
  g[0] = 0L;
  (g + 8)[0]:long = 0L;
  (g + 16)[0]:long = 0L;
  (g + 24)[0]:long = 0L;
  (c + 208 + 24)[0]:long = (e + 24)[0]:long@1;
  (c + 208 + 16)[0]:long = (e + 16)[0]:long@1;
  c[27]:long = (e + 8)[0]:long@1;
  c[26]:long = e[0];
  i = 0;
  c[51]:int = 0;
  c[33]:long@4 = 6620516960021240235L;
  c[31]:long@4 = -7276294671082564993L;
  c[29]:long@4 = -6534734903820487822L;
  c[27]:long@4 = -4942790177982912921L;
  loop L_ea {
    j = c + 208 + i;
    j[0]:byte = j[0]:ubyte ^ 92;
    i = i + 1;
    if (i != 64) continue L_ea;
  }
  d[0]:long@4 = c[26]:long;
  (d + 8)[0]:long@4 = c[27]:long;
  (d + 16)[0]:long@4 = (c + 208 + 16)[0]:long;
  (d + 24)[0]:long@4 = (c + 208 + 24)[0]:long;
  (d + 32)[0]:long@4 = (c + 208 + 32)[0]:long;
  (d + 40)[0]:long@4 = (c + 208 + 40)[0]:long;
  (d + 48)[0]:long@4 = (c + 208 + 48)[0]:long;
  (d + 56)[0]:long@4 = (c + 208 + 56)[0]:long;
  c[51]:int = 64;
  secp256k1_sha256_transform(f, d);
  i = 0;
  c[26]:int = 0;
  c[4]:long = 6620516960021240235L;
  c[3]:long = -7276294671082564993L;
  c[2]:long = -6534734903820487822L;
  c[1]:long = -4942790177982912921L;
  loop L_fa {
    j = c + 208 + i;
    j[0]:byte = j[0]:ubyte ^ 106;
    i = i + 1;
    if (i != 64) continue L_fa;
  }
  h[0]:long@4 = c[26]:long;
  (h + 8)[0]:long@4 = c[27]:long;
  (h + 16)[0]:long@4 = (c + 208 + 16)[0]:long;
  (h + 24)[0]:long@4 = (c + 208 + 24)[0]:long;
  j = 32;
  (h + 32)[0]:long@4 = (c + 208 + 32)[0]:long;
  (h + 40)[0]:long@4 = (c + 208 + 40)[0]:long;
  (h + 48)[0]:long@4 = (c + 208 + 48)[0]:long;
  (h + 56)[0]:long@4 = (c + 208 + 56)[0]:long;
  c[26]:int = 64;
  secp256k1_sha256_transform(c + 8, h);
  c[26]:int = (i = c[26]:int) + 32;
  l = i & 63;
  if (l >= 32) goto B_ia;
  i = a;
  goto B_ha;
  label B_ia:
  memcpy(h + l, a, i = 64 - l);
  secp256k1_sha256_transform(c + 8, h);
  i = a + i;
  j = l + -32;
  if (j < 64) goto B_ja;
  loop L_ka {
    h[0]:long@1 = i[0]:long@1;
    (h + 56)[0]:long@1 = (i + 56)[0]:long@1;
    (h + 48)[0]:long@1 = (i + 48)[0]:long@1;
    (h + 40)[0]:long@1 = (i + 40)[0]:long@1;
    (h + 32)[0]:long@1 = (i + 32)[0]:long@1;
    (h + 24)[0]:long@1 = (i + 24)[0]:long@1;
    (h + 16)[0]:long@1 = (i + 16)[0]:long@1;
    (h + 8)[0]:long@1 = (i + 8)[0]:long@1;
    secp256k1_sha256_transform(c + 8, h);
    i = i + 64;
    j = j + -64;
    if (j > 63) continue L_ka;
  }
  label B_ja:
  l = 0;
  if (eqz(j)) goto B_ga;
  label B_ha:
  memcpy(h + l, i, j);
  label B_ga:
  c[70]:int = (i = (l = c[26]:int) >> 5) & 117440512;
  c[26]:int = l + (j = (55 - l & 63) + 1);
  c[71]:int = 
    (((l << 11 & 16711680) | l << 27) | (i & 65280)) | (l >> 21 & 255);
  i = 68592;
  if (j < (e = 64 - (l = l & 63))) goto B_ma;
  memcpy(h + l, 68592, e);
  secp256k1_sha256_transform(c + 8, h);
  i = e + 68592;
  j = j - e;
  if (j < 64) goto B_na;
  loop L_oa {
    h[0]:long@1 = i[0]:long@1;
    (h + 56)[0]:long@1 = (i + 56)[0]:long@1;
    (h + 48)[0]:long@1 = (i + 48)[0]:long@1;
    (h + 40)[0]:long@1 = (i + 40)[0]:long@1;
    (h + 32)[0]:long@1 = (i + 32)[0]:long@1;
    (h + 24)[0]:long@1 = (i + 24)[0]:long@1;
    (h + 16)[0]:long@1 = (i + 16)[0]:long@1;
    (h + 8)[0]:long@1 = (i + 8)[0]:long@1;
    secp256k1_sha256_transform(c + 8, h);
    i = i + 64;
    j = j + -64;
    if (j > 63) continue L_oa;
  }
  label B_na:
  l = 0;
  if (eqz(j)) goto B_la;
  label B_ma:
  memcpy(h + l, i, j);
  label B_la:
  j = 8;
  c[26]:int = (l = c[26]:int) + 8;
  i = c + 280;
  l = l & 63;
  if (l < 56) goto B_qa;
  memcpy(h + l, c + 280, i = 64 - l);
  secp256k1_sha256_transform(c + 8, h);
  i = c + 280 + i;
  j = l + -56;
  if (j < 64) goto B_ra;
  loop L_sa {
    h[0]:long@1 = i[0]:long@1;
    (h + 56)[0]:long@1 = (i + 56)[0]:long@1;
    (h + 48)[0]:long@1 = (i + 48)[0]:long@1;
    (h + 40)[0]:long@1 = (i + 40)[0]:long@1;
    (h + 32)[0]:long@1 = (i + 32)[0]:long@1;
    (h + 24)[0]:long@1 = (i + 24)[0]:long@1;
    (h + 16)[0]:long@1 = (i + 16)[0]:long@1;
    (h + 8)[0]:long@1 = (i + 8)[0]:long@1;
    secp256k1_sha256_transform(c + 8, h);
    i = i + 64;
    j = j + -64;
    if (j > 63) continue L_sa;
  }
  label B_ra:
  l = 0;
  if (eqz(j)) goto B_pa;
  label B_qa:
  memcpy(h + l, i, j);
  label B_pa:
  h = c[2]:int;
  i = c[3]:int;
  c[1]:long = 0L;
  j = c[4]:int;
  l = c[5]:int;
  c[2]:long = 0L;
  e = c[6]:int;
  g = c[7]:int;
  c[3]:long = 0L;
  m = c[8]:int;
  n = c[9]:int;
  c[4]:long = 0L;
  c[59]:int = 
    (n << 24 | (n << 8 & 16711680)) | ((n >> 8 & 65280) | n >> 24);
  c[58]:int = 
    (m << 24 | (m << 8 & 16711680)) | ((m >> 8 & 65280) | m >> 24);
  c[57]:int = 
    (g << 24 | (g << 8 & 16711680)) | ((g >> 8 & 65280) | g >> 24);
  c[56]:int = 
    (e << 24 | (e << 8 & 16711680)) | ((e >> 8 & 65280) | e >> 24);
  c[55]:int = 
    (l << 24 | (l << 8 & 16711680)) | ((l >> 8 & 65280) | l >> 24);
  c[54]:int = 
    (j << 24 | (j << 8 & 16711680)) | ((j >> 8 & 65280) | j >> 24);
  c[53]:int = 
    (i << 24 | (i << 8 & 16711680)) | ((i >> 8 & 65280) | i >> 24);
  c[52]:int = 
    (h << 24 | (h << 8 & 16711680)) | ((h >> 8 & 65280) | h >> 24);
  i = 32;
  c[51]:int = (j = c[51]:int) + 32;
  h = c + 208;
  j = j & 63;
  if (j < 32) goto B_ua;
  memcpy(d + j, c + 208, h = 64 - j);
  secp256k1_sha256_transform(f, d);
  h = c + 208 + h;
  i = j + -32;
  if (i < 64) goto B_va;
  loop L_wa {
    d[0]:long@1 = h[0]:long@1;
    (d + 56)[0]:long@1 = (h + 56)[0]:long@1;
    (d + 48)[0]:long@1 = (h + 48)[0]:long@1;
    (d + 40)[0]:long@1 = (h + 40)[0]:long@1;
    (d + 32)[0]:long@1 = (h + 32)[0]:long@1;
    (d + 24)[0]:long@1 = (h + 24)[0]:long@1;
    (d + 16)[0]:long@1 = (h + 16)[0]:long@1;
    (d + 8)[0]:long@1 = (h + 8)[0]:long@1;
    secp256k1_sha256_transform(f, d);
    h = h + 64;
    i = i + -64;
    if (i > 63) continue L_wa;
  }
  label B_va:
  j = 0;
  if (eqz(i)) goto B_ta;
  label B_ua:
  memcpy(d + j, h, i);
  label B_ta:
  c[70]:int = (h = (j = c[51]:int) >> 5) & 117440512;
  c[51]:int = j + (i = (55 - j & 63) + 1);
  c[71]:int = 
    (((j << 11 & 16711680) | j << 27) | (h & 65280)) | (j >> 21 & 255);
  h = 68592;
  if (i < (l = 64 - (j = j & 63))) goto B_ya;
  memcpy(d + j, 68592, l);
  secp256k1_sha256_transform(f, d);
  h = l + 68592;
  i = i - l;
  if (i < 64) goto B_za;
  loop L_ab {
    d[0]:long@1 = h[0]:long@1;
    (d + 56)[0]:long@1 = (h + 56)[0]:long@1;
    (d + 48)[0]:long@1 = (h + 48)[0]:long@1;
    (d + 40)[0]:long@1 = (h + 40)[0]:long@1;
    (d + 32)[0]:long@1 = (h + 32)[0]:long@1;
    (d + 24)[0]:long@1 = (h + 24)[0]:long@1;
    (d + 16)[0]:long@1 = (h + 16)[0]:long@1;
    (d + 8)[0]:long@1 = (h + 8)[0]:long@1;
    secp256k1_sha256_transform(f, d);
    h = h + 64;
    i = i + -64;
    if (i > 63) continue L_ab;
  }
  label B_za:
  j = 0;
  if (eqz(i)) goto B_xa;
  label B_ya:
  memcpy(d + j, h, i);
  label B_xa:
  i = 8;
  c[51]:int = (j = c[51]:int) + 8;
  h = c + 280;
  j = j & 63;
  if (j < 56) goto B_cb;
  memcpy(d + j, c + 280, h = 64 - j);
  secp256k1_sha256_transform(f, d);
  h = c + 280 + h;
  i = j + -56;
  if (i < 64) goto B_db;
  loop L_eb {
    d[0]:long@1 = h[0]:long@1;
    (d + 56)[0]:long@1 = (h + 56)[0]:long@1;
    (d + 48)[0]:long@1 = (h + 48)[0]:long@1;
    (d + 40)[0]:long@1 = (h + 40)[0]:long@1;
    (d + 32)[0]:long@1 = (h + 32)[0]:long@1;
    (d + 24)[0]:long@1 = (h + 24)[0]:long@1;
    (d + 16)[0]:long@1 = (h + 16)[0]:long@1;
    (d + 8)[0]:long@1 = (h + 8)[0]:long@1;
    secp256k1_sha256_transform(f, d);
    h = h + 64;
    i = i + -64;
    if (i > 63) continue L_eb;
  }
  label B_db:
  j = 0;
  if (eqz(i)) goto B_bb;
  label B_cb:
  memcpy(d + j, h, i);
  label B_bb:
  a[28]:int@1 = 
    ((d = c[34]:int) << 24 | (d << 8 & 16711680)) | 
    ((d >> 8 & 65280) | d >> 24);
  a[24]:int@1 = 
    ((d = c[33]:int) << 24 | (d << 8 & 16711680)) | 
    ((d >> 8 & 65280) | d >> 24);
  a[20]:int@1 = 
    ((d = c[32]:int) << 24 | (d << 8 & 16711680)) | 
    ((d >> 8 & 65280) | d >> 24);
  a[16]:int@1 = 
    ((d = c[31]:int) << 24 | (d << 8 & 16711680)) | 
    ((d >> 8 & 65280) | d >> 24);
  a[12]:int@1 = 
    ((d = c[30]:int) << 24 | (d << 8 & 16711680)) | 
    ((d >> 8 & 65280) | d >> 24);
  a[8]:int@1 = 
    ((d = c[29]:int) << 24 | (d << 8 & 16711680)) | 
    ((d >> 8 & 65280) | d >> 24);
  a[4]:int@1 = 
    ((d = c[28]:int) << 24 | (d << 8 & 16711680)) | 
    ((d >> 8 & 65280) | d >> 24);
  a[0]:int@1 = 
    ((d = c[27]:int) << 24 | (d << 8 & 16711680)) | 
    ((d >> 8 & 65280) | d >> 24);
  c[27]:long@4 = 0L;
  c[29]:int = 0;
  c[15]:long = 0L;
  label B_a:
  (c + 208 + 40)[0]:long = 0L;
  (c + 208 + 48)[0]:long = 0L;
  (c + 208 + 56)[0]:long = 0L;
  i = 0;
  (c + 204)[0]:int = 0;
  (c + 132)[0]:long@4 = 6620516960021240235L;
  (c + 124)[0]:long@4 = -7276294671082564993L;
  (c + 116)[0]:long@4 = -6534734903820487822L;
  (c + 232)[0]:long = (a + 56)[0]:long@1;
  (c + 224)[0]:long = (a + 48)[0]:long@1;
  c[27]:long@4 = -4942790177982912921L;
  c[30]:long = 0L;
  c[27]:long = (a + 40)[0]:long@1;
  c[26]:long = a[32]:long@1;
  d = c + 40;
  h = c + 140;
  f = c + 108;
  loop L_fb {
    j = c + 208 + i;
    j[0]:byte = j[0]:ubyte ^ 92;
    i = i + 1;
    if (i != 64) continue L_fb;
  }
  h[0]:long@4 = c[26]:long;
  (h + 8)[0]:long@4 = c[27]:long;
  (h + 16)[0]:long@4 = (c + 208 + 16)[0]:long;
  (h + 24)[0]:long@4 = (c + 208 + 24)[0]:long;
  (h + 32)[0]:long@4 = (c + 208 + 32)[0]:long;
  (h + 40)[0]:long@4 = (c + 208 + 40)[0]:long;
  (h + 48)[0]:long@4 = (c + 208 + 48)[0]:long;
  (h + 56)[0]:long@4 = (c + 208 + 56)[0]:long;
  c[51]:int = 64;
  secp256k1_sha256_transform(f, h);
  i = 0;
  c[26]:int = 0;
  c[4]:long = 6620516960021240235L;
  c[3]:long = -7276294671082564993L;
  c[2]:long = -6534734903820487822L;
  c[1]:long = -4942790177982912921L;
  loop L_gb {
    j = c + 208 + i;
    j[0]:byte = j[0]:ubyte ^ 106;
    i = i + 1;
    if (i != 64) continue L_gb;
  }
  d[0]:long@4 = c[26]:long;
  (d + 8)[0]:long@4 = c[27]:long;
  (d + 16)[0]:long@4 = (c + 208 + 16)[0]:long;
  (d + 24)[0]:long@4 = (c + 208 + 24)[0]:long;
  j = 32;
  (d + 32)[0]:long@4 = (c + 208 + 32)[0]:long;
  (d + 40)[0]:long@4 = (c + 208 + 40)[0]:long;
  (d + 48)[0]:long@4 = (c + 208 + 48)[0]:long;
  (d + 56)[0]:long@4 = (c + 208 + 56)[0]:long;
  c[26]:int = 64;
  secp256k1_sha256_transform(c + 8, d);
  c[26]:int = (i = c[26]:int) + 32;
  l = i & 63;
  if (l >= 32) goto B_jb;
  i = a;
  goto B_ib;
  label B_jb:
  memcpy(d + l, a, i = 64 - l);
  secp256k1_sha256_transform(c + 8, d);
  i = a + i;
  j = l + -32;
  if (j < 64) goto B_kb;
  loop L_lb {
    d[0]:long@1 = i[0]:long@1;
    (d + 56)[0]:long@1 = (i + 56)[0]:long@1;
    (d + 48)[0]:long@1 = (i + 48)[0]:long@1;
    (d + 40)[0]:long@1 = (i + 40)[0]:long@1;
    (d + 32)[0]:long@1 = (i + 32)[0]:long@1;
    (d + 24)[0]:long@1 = (i + 24)[0]:long@1;
    (d + 16)[0]:long@1 = (i + 16)[0]:long@1;
    (d + 8)[0]:long@1 = (i + 8)[0]:long@1;
    secp256k1_sha256_transform(c + 8, d);
    i = i + 64;
    j = j + -64;
    if (j > 63) continue L_lb;
  }
  label B_kb:
  l = 0;
  if (eqz(j)) goto B_hb;
  label B_ib:
  memcpy(d + l, i, j);
  label B_hb:
  c[70]:int = (i = (l = c[26]:int) >> 5) & 117440512;
  c[26]:int = l + (j = (55 - l & 63) + 1);
  c[71]:int = 
    (((l << 11 & 16711680) | l << 27) | (i & 65280)) | (l >> 21 & 255);
  i = 68592;
  if (j < (e = 64 - (l = l & 63))) goto B_nb;
  memcpy(d + l, 68592, e);
  secp256k1_sha256_transform(c + 8, d);
  i = e + 68592;
  j = j - e;
  if (j < 64) goto B_ob;
  loop L_pb {
    d[0]:long@1 = i[0]:long@1;
    (d + 56)[0]:long@1 = (i + 56)[0]:long@1;
    (d + 48)[0]:long@1 = (i + 48)[0]:long@1;
    (d + 40)[0]:long@1 = (i + 40)[0]:long@1;
    (d + 32)[0]:long@1 = (i + 32)[0]:long@1;
    (d + 24)[0]:long@1 = (i + 24)[0]:long@1;
    (d + 16)[0]:long@1 = (i + 16)[0]:long@1;
    (d + 8)[0]:long@1 = (i + 8)[0]:long@1;
    secp256k1_sha256_transform(c + 8, d);
    i = i + 64;
    j = j + -64;
    if (j > 63) continue L_pb;
  }
  label B_ob:
  l = 0;
  if (eqz(j)) goto B_mb;
  label B_nb:
  memcpy(d + l, i, j);
  label B_mb:
  j = 8;
  c[26]:int = (l = c[26]:int) + 8;
  i = c + 280;
  l = l & 63;
  if (l < 56) goto B_rb;
  memcpy(d + l, c + 280, i = 64 - l);
  secp256k1_sha256_transform(c + 8, d);
  i = c + 280 + i;
  j = l + -56;
  if (j < 64) goto B_sb;
  loop L_tb {
    d[0]:long@1 = i[0]:long@1;
    (d + 56)[0]:long@1 = (i + 56)[0]:long@1;
    (d + 48)[0]:long@1 = (i + 48)[0]:long@1;
    (d + 40)[0]:long@1 = (i + 40)[0]:long@1;
    (d + 32)[0]:long@1 = (i + 32)[0]:long@1;
    (d + 24)[0]:long@1 = (i + 24)[0]:long@1;
    (d + 16)[0]:long@1 = (i + 16)[0]:long@1;
    (d + 8)[0]:long@1 = (i + 8)[0]:long@1;
    secp256k1_sha256_transform(c + 8, d);
    i = i + 64;
    j = j + -64;
    if (j > 63) continue L_tb;
  }
  label B_sb:
  l = 0;
  if (eqz(j)) goto B_qb;
  label B_rb:
  memcpy(d + l, i, j);
  label B_qb:
  d = c[2]:int;
  i = c[3]:int;
  c[1]:long = 0L;
  j = c[4]:int;
  l = c[5]:int;
  c[2]:long = 0L;
  e = c[6]:int;
  g = c[7]:int;
  c[3]:long = 0L;
  m = c[8]:int;
  n = c[9]:int;
  c[4]:long = 0L;
  c[59]:int = 
    (n << 24 | (n << 8 & 16711680)) | ((n >> 8 & 65280) | n >> 24);
  c[58]:int = 
    (m << 24 | (m << 8 & 16711680)) | ((m >> 8 & 65280) | m >> 24);
  c[57]:int = 
    (g << 24 | (g << 8 & 16711680)) | ((g >> 8 & 65280) | g >> 24);
  c[56]:int = 
    (e << 24 | (e << 8 & 16711680)) | ((e >> 8 & 65280) | e >> 24);
  c[55]:int = 
    (l << 24 | (l << 8 & 16711680)) | ((l >> 8 & 65280) | l >> 24);
  c[54]:int = 
    (j << 24 | (j << 8 & 16711680)) | ((j >> 8 & 65280) | j >> 24);
  c[53]:int = 
    (i << 24 | (i << 8 & 16711680)) | ((i >> 8 & 65280) | i >> 24);
  c[52]:int = 
    (d << 24 | (d << 8 & 16711680)) | ((d >> 8 & 65280) | d >> 24);
  i = 32;
  c[51]:int = (j = c[51]:int) + 32;
  d = c + 208;
  j = j & 63;
  if (j < 32) goto B_vb;
  memcpy(h + j, c + 208, d = 64 - j);
  secp256k1_sha256_transform(f, h);
  d = c + 208 + d;
  i = j + -32;
  if (i < 64) goto B_wb;
  loop L_xb {
    h[0]:long@1 = d[0]:long@1;
    (h + 56)[0]:long@1 = (d + 56)[0]:long@1;
    (h + 48)[0]:long@1 = (d + 48)[0]:long@1;
    (h + 40)[0]:long@1 = (d + 40)[0]:long@1;
    (h + 32)[0]:long@1 = (d + 32)[0]:long@1;
    (h + 24)[0]:long@1 = (d + 24)[0]:long@1;
    (h + 16)[0]:long@1 = (d + 16)[0]:long@1;
    (h + 8)[0]:long@1 = (d + 8)[0]:long@1;
    secp256k1_sha256_transform(f, h);
    d = d + 64;
    i = i + -64;
    if (i > 63) continue L_xb;
  }
  label B_wb:
  j = 0;
  if (eqz(i)) goto B_ub;
  label B_vb:
  memcpy(h + j, d, i);
  label B_ub:
  c[70]:int = (d = (j = c[51]:int) >> 5) & 117440512;
  c[51]:int = j + (i = (55 - j & 63) + 1);
  c[71]:int = 
    (((j << 11 & 16711680) | j << 27) | (d & 65280)) | (j >> 21 & 255);
  d = 68592;
  if (i < (l = 64 - (j = j & 63))) goto B_zb;
  memcpy(h + j, 68592, l);
  secp256k1_sha256_transform(f, h);
  d = l + 68592;
  i = i - l;
  if (i < 64) goto B_ac;
  loop L_bc {
    h[0]:long@1 = d[0]:long@1;
    (h + 56)[0]:long@1 = (d + 56)[0]:long@1;
    (h + 48)[0]:long@1 = (d + 48)[0]:long@1;
    (h + 40)[0]:long@1 = (d + 40)[0]:long@1;
    (h + 32)[0]:long@1 = (d + 32)[0]:long@1;
    (h + 24)[0]:long@1 = (d + 24)[0]:long@1;
    (h + 16)[0]:long@1 = (d + 16)[0]:long@1;
    (h + 8)[0]:long@1 = (d + 8)[0]:long@1;
    secp256k1_sha256_transform(f, h);
    d = d + 64;
    i = i + -64;
    if (i > 63) continue L_bc;
  }
  label B_ac:
  j = 0;
  if (eqz(i)) goto B_yb;
  label B_zb:
  memcpy(h + j, d, i);
  label B_yb:
  i = 8;
  c[51]:int = (j = c[51]:int) + 8;
  d = c + 280;
  j = j & 63;
  if (j < 56) goto B_dc;
  memcpy(h + j, c + 280, d = 64 - j);
  secp256k1_sha256_transform(f, h);
  d = c + 280 + d;
  i = j + -56;
  if (i < 64) goto B_ec;
  loop L_fc {
    h[0]:long@1 = d[0]:long@1;
    (h + 56)[0]:long@1 = (d + 56)[0]:long@1;
    (h + 48)[0]:long@1 = (d + 48)[0]:long@1;
    (h + 40)[0]:long@1 = (d + 40)[0]:long@1;
    (h + 32)[0]:long@1 = (d + 32)[0]:long@1;
    (h + 24)[0]:long@1 = (d + 24)[0]:long@1;
    (h + 16)[0]:long@1 = (d + 16)[0]:long@1;
    (h + 8)[0]:long@1 = (d + 8)[0]:long@1;
    secp256k1_sha256_transform(f, h);
    d = d + 64;
    i = i + -64;
    if (i > 63) continue L_fc;
  }
  label B_ec:
  j = 0;
  if (eqz(i)) goto B_cc;
  label B_dc:
  memcpy(h + j, d, i);
  label B_cc:
  a[28]:int@1 = 
    ((d = c[34]:int) << 24 | (d << 8 & 16711680)) | 
    ((d >> 8 & 65280) | d >> 24);
  a[24]:int@1 = 
    ((d = c[33]:int) << 24 | (d << 8 & 16711680)) | 
    ((d >> 8 & 65280) | d >> 24);
  a[20]:int@1 = 
    ((d = c[32]:int) << 24 | (d << 8 & 16711680)) | 
    ((d >> 8 & 65280) | d >> 24);
  a[16]:int@1 = 
    ((d = c[31]:int) << 24 | (d << 8 & 16711680)) | 
    ((d >> 8 & 65280) | d >> 24);
  a[12]:int@1 = 
    ((d = c[30]:int) << 24 | (d << 8 & 16711680)) | 
    ((d >> 8 & 65280) | d >> 24);
  a[8]:int@1 = 
    ((d = c[29]:int) << 24 | (d << 8 & 16711680)) | 
    ((d >> 8 & 65280) | d >> 24);
  a[4]:int@1 = 
    ((d = c[28]:int) << 24 | (d << 8 & 16711680)) | 
    ((d >> 8 & 65280) | d >> 24);
  a[0]:int@1 = 
    ((d = c[27]:int) << 24 | (d << 8 & 16711680)) | 
    ((d >> 8 & 65280) | d >> 24);
  c[27]:long@4 = 0L;
  c[29]:int = 0;
  c[15]:long = 0L;
  c[16]:long = 0L;
  (b + 24)[0]:long@1 = a[24]:long@1;
  (b + 16)[0]:long@1 = a[16]:long@1;
  (b + 8)[0]:long@1 = a[8]:long@1;
  b[0] = a[0]:long@1;
  a[16]:int = 1;
  g_a = c + 288;
}

function secp256k1_ecmult_gen(a:int_ptr, b:int, c:int_ptr) {
  var z:int;
  var d:int_ptr = g_a - 128;
  g_a = d;
  var e:int = memcpy(b, a + 36, 124);
  secp256k1_scalar_add(d + 8, c, a + 4);
  d[30] = 0;
  var f:int = 0;
  var g:int = 0;
  var h:int = 0;
  var i:int = 0;
  var j:int = 0;
  var k:int = 0;
  var l:int = 0;
  var m:int = 0;
  var n:int = 0;
  var o:int = 0;
  var p:int = 0;
  var q:int = 0;
  var r:int = 0;
  var s:int = 0;
  var t:int = 0;
  var u:int = 0;
  var v:int = 0;
  loop L_a {
    var w:int = 
      ((d + 8 + (f >> 1 & 2147483644))[0]:int >> (f << 2 & 28) & 15) << 6;
    var x:int = a[0] + (f << 10);
    var y:int = 0;
    loop L_b {
      c = x + y;
      v = (c[0] & (b = select_if(-1, 0, w == y))) | 
          (v & (z = select_if(-1, 0, w != y)));
      g = ((c + 60)[0]:int & b) | (g & z);
      h = ((c + 56)[0]:int & b) | (h & z);
      i = ((c + 52)[0]:int & b) | (i & z);
      j = ((c + 48)[0]:int & b) | (j & z);
      k = ((c + 44)[0]:int & b) | (k & z);
      l = ((c + 40)[0]:int & b) | (l & z);
      m = ((c + 36)[0]:int & b) | (m & z);
      n = ((c + 32)[0]:int & b) | (n & z);
      o = ((c + 28)[0]:int & b) | (o & z);
      p = ((c + 24)[0]:int & b) | (p & z);
      q = ((c + 20)[0]:int & b) | (q & z);
      r = ((c + 16)[0]:int & b) | (r & z);
      s = ((c + 12)[0]:int & b) | (s & z);
      t = ((c + 8)[0]:int & b) | (t & z);
      u = ((c + 4)[0]:int & b) | (u & z);
      y = y + 64;
      if (y != 1024) continue L_b;
    }
    d[30] = 0;
    d[29] = g >> 10;
    d[20] = n & 67108863;
    d[19] = o >> 10;
    d[10] = v & 67108863;
    d[25] = j >> 2 & 67108863;
    d[15] = r >> 2 & 67108863;
    d[28] = (g << 16 & 67043328) | h >> 16;
    d[27] = (h << 10 & 67107840) | i >> 22;
    d[26] = (i << 4 & 67108848) | j >> 28;
    d[24] = (j << 24 & 50331648) | k >> 8;
    d[23] = (k << 18 & 66846720) | l >> 14;
    d[22] = (l << 12 & 67104768) | m >> 20;
    d[21] = (m << 6 & 67108800) | n >> 26;
    d[18] = (o << 16 & 67043328) | p >> 16;
    d[17] = (p << 10 & 67107840) | q >> 22;
    d[16] = (q << 4 & 67108848) | r >> 28;
    d[14] = (r << 24 & 50331648) | s >> 8;
    d[13] = (s << 18 & 66846720) | t >> 14;
    d[12] = (t << 12 & 67104768) | u >> 20;
    d[11] = (u << 6 & 67108800) | v >> 26;
    secp256k1_gej_add_ge(e, e, d + 40);
    f = f + 1;
    if (f != 64) continue L_a;
  }
  g_a = d + 128;
}

function secp256k1_fe_normalize(a:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int, j:int }) {
  var b:int;
  var c:int;
  var d:int;
  var e:int;
  var f:int;
  var g:int;
  var h:int;
  var i:int;
  var j:int;
  var k:int;
  var l:int;
  a.a = 
    (d = 
       (l = 
          (b = 
             ((k = 
                 ((j = 
                     ((i = 
                         ((h = 
                             ((g = 
                                 ((f = 
                                     ((c = 
                                         ((e = ((c = (b = a.j) >> 22) << 6) + a.b + ((d = c * 977 + a.a) >> 26)) >> 
                                          26) + 
                                         a.c) >> 
                                      26) + 
                                     a.d) >> 
                                  26) + 
                                 a.e) >> 
                              26) + 
                             a.f) >> 
                          26) + 
                         a.g) >> 
                      26) + 
                     a.h) >> 
                  26) + 
                 a.i) >> 
              26) + 
             (b & 4194303)) >> 
          22 | 
          ((e = e & 67108863) + ((d = d & 67108863) + 977 >> 26) + 64 > 67108863 & 
           (((((((f & c) & g) & h) & (i = i & 67108863)) & j) & k) == 67108863 & 
            b == 4194303))) * 
       977 + 
       d) & 
    67108863;
  a.b = (d = (l << 6) + e + (d >> 26)) & 67108863;
  a.c = (c = (d >> 26) + (c & 67108863)) & 67108863;
  a.d = (c = (c >> 26) + (f & 67108863)) & 67108863;
  a.e = (c = (c >> 26) + (g & 67108863)) & 67108863;
  a.f = (c = (c >> 26) + (h & 67108863)) & 67108863;
  a.g = (c = (c >> 26) + i) & 67108863;
  a.h = (c = (c >> 26) + (j & 67108863)) & 67108863;
  a.i = (c = (c >> 26) + (k & 67108863)) & 67108863;
  a.j = (c >> 26) + b & 4194303;
}

function secp256k1_scalar_add(a:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }, b:{ a:uint, b:uint, c:uint, d:uint, e:uint, f:uint, g:uint, h:uint }, c:{ a:uint, b:uint, c:uint, d:uint, e:uint, f:uint, g:uint, h:uint }) {
  var d:long;
  var e:int;
  var f:long;
  var g:int;
  var h:long;
  var i:int;
  var j:long;
  var k:int;
  var l:long;
  var m:int;
  var n:long;
  var o:long;
  var p:long;
  a.a = (e = i32_wrap_i64(d = c.a + b.a));
  a.b = (g = i32_wrap_i64(f = (d >> 32L) + b.b + c.b));
  a.c = (i = i32_wrap_i64(h = c.c + b.c + (f >> 32L)));
  a.d = (k = i32_wrap_i64(j = c.d + b.d + (h >> 32L)));
  a.e = (m = i32_wrap_i64(l = c.e + b.e + (j >> 32L)));
  a.f = (n = c.f + b.f + (l >> 32L));
  a.g = (o = c.g + b.g + (n >> 32L));
  a.a = 
    (p = 
       (d & 4294967295L) + 
       i64_extend_i32_u(
         (c = 
            ((((c = 
                  ((((b = 
                        (((c = 
                             (((b = 
                                  (((c = 
                                       (((b = 
                                            ((c = 
                                                m < -2 | i32_wrap_i64((o & n) & (d = c.h + b.h + (o >> 32L))) != -1) ^ 
                                             -1) & 
                                            m == -1) ^ 
                                         -1) & 
                                        k < -1162945306) | 
                                       c) ^ 
                                    -1) & 
                                   k > -1162945306) | 
                                  b) ^ 
                               -1) & 
                              i < -1354194885) | 
                             c) ^ 
                          -1) & 
                         i > -1354194885) | 
                        b) ^ 
                     -1) & 
                    g < -1076732276) | 
                   c) ^ 
                  -1) & 
               g > -1076732276) | 
              b) | 
             (c & e > -801750720)) + 
            i32_wrap_i64(d >> 32L)) * 
         801750719));
  a.b = 
    (f = (f & 4294967295L) + i64_extend_i32_u(c * 1076732275) + (p >> 32L));
  a.c = 
    (f = (h & 4294967295L) + i64_extend_i32_u(c * 1354194884) + (f >> 32L));
  a.d = 
    (f = (j & 4294967295L) + i64_extend_i32_u(c * 1162945305) + (f >> 32L));
  a.e = (f = (l & 4294967295L) + i64_extend_i32_u(c) + (f >> 32L));
  a.f = (n = (f >> 32L) + (n & 4294967295L));
  a.g = (n = (n >> 32L) + (o & 4294967295L));
  a.h = i32_wrap_i64(n >> 32L) + i32_wrap_i64(d);
}

function secp256k1_context_randomize(a:int_ptr, b:int):int {
  if (eqz(a[2])) goto B_a;
  secp256k1_ecmult_gen_blind(a + 8, b);
  label B_a:
  return 1;
}

function secp256k1_gej_add_ge(a:int, b:int, c:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int, j:int, k:int }) {
  var e:int_ptr;
  var g:long;
  var i:long;
  var k:long;
  var m:long;
  var n:long;
  var o:int;
  var p:int;
  var q:int;
  var r:int;
  var s:int_ptr;
  var t:int_ptr;
  var u:int_ptr;
  var ea:int_ptr;
  var fa:int_ptr;
  var ga:int_ptr;
  var ha:int;
  var ia:int;
  var ja:int;
  var ka:int;
  var la:int;
  var qb:int;
  var rb:int;
  var sb:int;
  var tb:int;
  var ub:int;
  var vb:int;
  var d:int = g_a - 448;
  g_a = d;
  secp256k1_fe_sqr(d + 408, e = b + 80);
  var f:int = d + 368 + 32;
  f[0]:long = (g = (b + 32)[0]:long@4);
  var h:int = d + 368 + 8;
  h[0]:long = (i = (b + 8)[0]:long@4);
  var j:int = d + 368 + 16;
  j[0]:long = (k = (b + 16)[0]:long@4);
  var l:int = d + 368 + 24;
  l[0]:long = (m = (b + 24)[0]:long@4);
  d[46]:long = (n = b[0]:long@4);
  h[0]:int = 
    (r = ((q = ((p = (o = d[101]:int) >> 22) << 6) + d[93]:int + 
               ((p = p * 977 + i32_wrap_i64(n)) >> 26)) >> 
          26) + 
         i32_wrap_i64(i)) & 
    67108863;
  j[0]:int = 
    (s = ((r = (r >> 26) + d[95]:int) >> 26) + i32_wrap_i64(k)) & 
    67108863;
  l[0]:int = 
    (t = ((s = (s >> 26) + d[97]:int) >> 26) + i32_wrap_i64(m)) & 
    67108863;
  f[0]:int = 
    (u = ((t = (t >> 26) + d[99]:int) >> 26) + i32_wrap_i64(g)) & 
    67108863;
  d[92]:int = p & 67108863;
  d[93]:int = q & 67108863;
  d[95]:int = r & 67108863;
  d[97]:int = s & 67108863;
  d[99]:int = t & 67108863;
  d[101]:int = (u >> 26) + (o & 4194303);
  secp256k1_fe_mul(d + 328, c, d + 408);
  var v:int = (b + 72)[0]:int;
  var w:int = (b + 68)[0]:int;
  var x:int = (b + 64)[0]:int;
  var y:int_ptr = (b + 60)[0]:int;
  var z:int = (b + 56)[0]:int;
  var aa:int = (b + 52)[0]:int;
  var ba:int = (b + 48)[0]:int;
  var ca:int = (b + 44)[0]:int;
  t = (b + 76)[0]:int;
  var da:int = b[10]:int;
  secp256k1_fe_mul(d + 288, c + 40, d + 408);
  secp256k1_fe_mul(d + 288, d + 288, e);
  r = d + 248 + 8;
  r[0]:long = (g = h[0]:long);
  o = d + 248 + 32;
  o[0]:long = f[0]:long;
  p = d + 248 + 24;
  p[0]:long = l[0]:long;
  q = d + 248 + 16;
  q[0]:long = j[0]:long;
  r[0]:int = i32_wrap_i64(g) + (s = d[84]:int);
  d[31]:long = (g = d[46]:long);
  d[62]:int = i32_wrap_i64(g) + (u = d[82]:int);
  d[63]:int = d[63]:int + (ea = d[83]:int);
  d[65]:int = d[65]:int + (fa = d[85]:int);
  q[0]:int = q[0]:int + (ga = d[86]:int);
  d[67]:int = d[67]:int + (ha = d[87]:int);
  p[0]:int = p[0]:int + (ia = d[88]:int);
  d[69]:int = d[69]:int + (ja = d[89]:int);
  o[0]:int = o[0]:int + (ka = d[90]:int);
  d[71]:int = d[71]:int + (la = d[91]:int);
  var ma:int = d[80]:int;
  var na:int = d[79]:int;
  var oa:int = d[78]:int;
  var pa:int = d[77]:int;
  var qa:int = d[76]:int;
  var ra:int = d[75]:int;
  var sa:int = d[74]:int;
  var ta:int = d[72]:int;
  var ua:int = d[81]:int;
  var va:int = d[73]:int;
  secp256k1_fe_sqr(d + 88, d + 248);
  d[21]:int = 16777212 - la;
  d[20]:int = 268435452 - ka;
  d[19]:int = 268435452 - ja;
  d[18]:int = 268435452 - ia;
  d[17]:int = 268435452 - ha;
  d[16]:int = 268435452 - ga;
  d[15]:int = 268435452 - fa;
  d[14]:int = 268435452 - s;
  d[13]:int = 268435196 - ea;
  d[12]:int = 268431548 - u;
  secp256k1_fe_mul(d + 208, d + 368, d + 48);
  d[27]:int = (u = d[27]:int + d[57]:int);
  d[26]:int = (ea = d[26]:int + d[56]:int);
  d[25]:int = (fa = d[25]:int + d[55]:int);
  d[24]:int = (ga = d[24]:int + d[54]:int);
  d[22]:int = (ha = d[22]:int + d[52]:int);
  d[23]:int = (ia = d[23]:int + d[53]:int);
  d[28]:int = (ja = d[28]:int + d[58]:int);
  d[29]:int = (ka = d[29]:int + d[59]:int);
  d[30]:int = (la = d[30]:int + d[60]:int);
  d[31]:int = (s = d[31]:int + d[61]:int);
  var wa:int = h[0]:int;
  var xa:int = j[0]:int;
  var ya:int = l[0]:int;
  var za:int = f[0]:int;
  var ab:int = d[12]:int;
  var bb:int_ptr = d[92]:int;
  var cb:int = d[13]:int;
  var db:int_ptr = d[93]:int;
  var eb:int_ptr = d[14]:int;
  var fb:int_ptr = d[15]:int;
  var gb:int = d[95]:int;
  var hb:int_ptr = d[16]:int;
  var ib:int_ptr = d[17]:int;
  var jb:int = d[97]:int;
  var kb:int_ptr = d[18]:int;
  var lb:int_ptr = d[19]:int;
  var mb:int = d[99]:int;
  var nb:int = d[20]:int;
  var ob:int = d[21]:int;
  var pb:int = d[101]:int;
  d[11]:int = 
    (s & 
     (f = 
        0 - 
        ((h = 
            (eqz(
               ((((((((((h = 
                           ((t = 
                               (j = 
                                  ua + 
                                  (sb = 
                                     ((rb = 
                                         v + 
                                         ((qb = 
                                             w + 
                                             ((da = 
                                                 x + 
                                                 ((ca = 
                                                     y + 
                                                     ((z = 
                                                         z + 
                                                         ((aa = 
                                                             aa + 
                                                             ((ba = 
                                                                 ba + 
                                                                 ((h = ca + ((f = t >> 22) << 6) + ((f = da + f * 977) >> 26)) >> 26)) >> 
                                                              26)) >> 
                                                          26)) >> 
                                                      26)) >> 
                                                  26)) >> 
                                              26)) >> 
                                          26)) >> 
                                      26) + 
                                     (t & 4194303))) >> 
                               22) << 
                            6) + 
                           (l = va + (ua = h & 67108863)) + 
                           ((f = t * 977 + (t = ta + (va = f & 67108863))) >> 26)) | 
                        f) | 
                       (w = (h >> 26) + (v = sa + (ta = ba & 67108863)))) | 
                      (y = (w >> 26) + (x = ra + (sa = aa & 67108863)))) | 
                     (aa = (y >> 26) + (z = qa + (ra = z & 67108863)))) | 
                    (ca = (aa >> 26) + (ba = pa + (tb = ca & 67108863)))) | 
                   (oa = (ca >> 26) + (da = oa + (ub = da & 67108863)))) | 
                  (pa = (oa >> 26) + (na = na + (qb = qb & 67108863)))) | 
                 (qa = (pa >> 26) + (ma = ma + (rb = rb & 67108863)))) & 
                67108863) | 
               (vb = (qa >> 26) + (j & 4194303))) | 
             ((((((((((h ^ 64) & (f ^ 976)) & w) & y) & aa) & ca) & oa) & pa) & qa) & 
              (vb ^ 62914560)) == 
             67108863) & 
            (eqz(
               ((((((((((h = ((f = s >> 22) << 6) + ia + ((f = f * 977 + ha) >> 26)) | f) | 
                       (w = (h >> 26) + ga)) | 
                      (y = (w >> 26) + fa)) | 
                     (aa = (y >> 26) + ea)) | 
                    (ca = (aa >> 26) + u)) | 
                   (oa = (ca >> 26) + ja)) | 
                  (pa = (oa >> 26) + ka)) | 
                 (qa = (pa >> 26) + la)) & 
                67108863) | 
               (vb = (qa >> 26) + (s & 4194303))) | 
             ((((((((((h ^ 64) & (f ^ 976)) & w) & y) & aa) & ca) & oa) & pa) & qa) & 
              (vb ^ 62914560)) == 
             67108863)) ^ 
         1))) | 
    (sb << 1 & (h = 0 - h));
  d[10]:int = (la & f) | (rb << 1 & h);
  d[9]:int = (ka & f) | (qb << 1 & h);
  d[8]:int = (ja & f) | (ub << 1 & h);
  d[7]:int = (u & f) | (tb << 1 & h);
  d[6]:int = (ea & f) | (ra << 1 & h);
  d[5]:int = (fa & f) | (sa << 1 & h);
  d[4]:int = (ga & f) | (ta << 1 & h);
  d[3]:int = (ia & f) | (ua << 1 & h);
  d[2]:int = (ha & f) | (va << 1 & h);
  d[21]:int = (ob + pb & h) | (j & f);
  d[20]:int = (nb + za & h) | (ma & f);
  d[19]:int = (lb + mb & h) | (na & f);
  d[18]:int = (kb + ya & h) | (da & f);
  d[17]:int = (ib + jb & h) | (ba & f);
  d[16]:int = (hb + xa & h) | (z & f);
  d[15]:int = (fb + gb & h) | (x & f);
  d[14]:int = (eb + wa & h) | (v & f);
  d[13]:int = (l & f) | (cb + db & h);
  d[12]:int = (t & f) | (ab + bb & h);
  secp256k1_fe_sqr(d + 168, d + 48);
  secp256k1_fe_mul(d + 128, d + 168, d + 248);
  secp256k1_fe_sqr(d + 168, d + 168);
  d[42]:int = (d[42]:int & f) | (t & h);
  d[43]:int = (d[43]:int & f) | (l & h);
  d[44]:int = (d[44]:int & f) | (v & h);
  d[45]:int = (d[45]:int & f) | (x & h);
  d[51]:int = (aa = (d[51]:int & f) | (j & h));
  d[50]:int = (ca = (d[50]:int & f) | (ma & h));
  d[47]:int = (ba = (d[47]:int & f) | (ba & h));
  d[49]:int = (oa = (d[49]:int & f) | (na & h));
  d[48]:int = (da = (d[48]:int & f) | (da & h));
  d[46]:int = (na = (d[46]:int & f) | (z & h));
  secp256k1_fe_sqr(d + 248, d + 8);
  secp256k1_fe_mul(a + 80, e, d + 48);
  pa = b[30]:int;
  j = a + 116;
  j[0]:int = (la = j[0]:int) << 1;
  l = a + 112;
  l[0]:int = (ma = l[0]:int) << 1;
  s = a + 108;
  s[0] = (qa = s[0]) << 1;
  e = a + 104;
  e[0] = (ra = e[0]) << 1;
  t = a + 100;
  t[0] = (sa = t[0]) << 1;
  u = a + 96;
  u[0] = (ta = u[0]) << 1;
  ea = a + 92;
  ea[0] = (ua = ea[0]) << 1;
  fa = a + 88;
  fa[0] = (va = fa[0]) << 1;
  ga = a + 84;
  ga[0] = (wa = ga[0]) << 1;
  a[20]:int = (xa = a[20]:int) << 1;
  d[32]:int = (f = 268431548 - d[32]:int);
  d[33]:int = (h = 268435196 - d[33]:int);
  d[34]:int = (ha = 268435452 - d[34]:int);
  d[35]:int = (v = 268435452 - d[35]:int);
  d[36]:int = (ia = 268435452 - d[36]:int);
  d[37]:int = (w = 268435452 - d[37]:int);
  d[38]:int = (ja = 268435452 - d[38]:int);
  d[39]:int = (x = 268435452 - d[39]:int);
  d[40]:int = (y = 268435452 - d[40]:int);
  d[41]:int = (z = 16777212 - d[41]:int);
  ka = o[0]:int;
  ya = p[0]:int;
  za = q[0]:int;
  ab = r[0]:int;
  bb = d[69]:int;
  cb = d[67]:int;
  db = d[65]:int;
  d[63]:int = 
    (hb = 
       (gb = ((fb = (eb = d[71]:int + z) >> 22) << 6) + d[63]:int + h + 
             ((fb = fb * 977 + d[62]:int + f) >> 26)) & 
       67108863);
  d[62]:int = (fb = fb & 67108863);
  r[0]:int = (gb = (ab = (gb >> 26) + ab + ha) & 67108863);
  d[65]:int = (db = (ab = (ab >> 26) + db + v) & 67108863);
  q[0]:int = (ab = (za = (ab >> 26) + za + ia) & 67108863);
  d[67]:int = (cb = (za = (za >> 26) + cb + w) & 67108863);
  p[0]:int = (za = (ya = (za >> 26) + ya + ja) & 67108863);
  d[69]:int = (bb = (ya = (ya >> 26) + bb + x) & 67108863);
  o[0]:int = (ya = (ka = (ya >> 26) + ka + y) & 67108863);
  g = r[0]:long;
  r[0]:int = (gb << 1) + ha;
  i = q[0]:long;
  q[0]:int = (ab << 1) + ia;
  k = p[0]:long;
  p[0]:int = (za << 1) + ja;
  d[71]:int = (za = (ka >> 26) + (eb & 4194303));
  ha = a + 24;
  ha[0]:long@4 = k;
  ia = a + 16;
  ia[0]:long@4 = i;
  ja = a + 8;
  ja[0]:long@4 = g;
  a[0]:long@4 = d[31]:long;
  ka = a + 32;
  ka[0]:long@4 = o[0]:long;
  o[0]:int = (ya << 1) + y;
  d[62]:int = (fb << 1) + f;
  d[63]:int = (hb << 1) + h;
  d[65]:int = (db << 1) + v;
  d[67]:int = (cb << 1) + w;
  d[69]:int = (bb << 1) + x;
  d[71]:int = (za << 1) + z;
  secp256k1_fe_mul(d + 248, d + 248, d + 8);
  r[0]:int = (f = r[0]:int + d[44]:int);
  q[0]:int = (h = q[0]:int + na);
  p[0]:int = (q = p[0]:int + da);
  d[69]:int = (p = d[69]:int + oa);
  d[67]:int = (r = d[67]:int + ba);
  d[65]:int = (v = d[65]:int + d[45]:int);
  d[62]:int = (w = d[62]:int + d[42]:int);
  d[63]:int = (x = d[63]:int + d[43]:int);
  o[0]:int = (y = o[0]:int + ca);
  d[71]:int = (o = d[71]:int + aa);
  a[0]:int = (z = a[0]:int << 2);
  a[1]:int = (aa = a[1]:int << 2);
  ja[0]:int = (ba = ja[0]:int << 2);
  a[3]:int = (ca = a[3]:int << 2);
  ia[0]:int = (da = ia[0]:int << 2);
  a[5]:int = (oa = a[5]:int << 2);
  ha[0]:int = (na = ha[0]:int << 2);
  a[7]:int = (ya = a[7]:int << 2);
  ka[0]:int = (za = ka[0]:int << 2);
  ab = a[9]:int;
  bb = a + 68;
  bb[0] = 
    (cb = 
       (p = 
          ((q = 
              ((r = 
                  ((h = ((v = ((f = ((x = ((cb = (o = 33554424 - o) >> 22) << 6) - x + 
                                          ((w = cb * 977 - w + 536863096) >> 26) + 
                                          536870392) >> 
                                     26) - 
                                    f + 
                                    536870904) >> 
                               26) - 
                              v + 
                              536870904) >> 
                         26) - 
                        h + 
                        536870904) >> 
                   26) - 
                  r + 
                  536870904) >> 
               26) - 
              q + 
              536870904) >> 
           26) - 
          p + 
          536870904) << 
       2 & 
       268435452);
  db = a + 64;
  db[0] = (q = q << 2 & 268435452);
  eb = a + 60;
  eb[0] = (r = r << 2 & 268435452);
  fb = a + 56;
  fb[0] = (gb = h << 2 & 268435452);
  hb = a + 52;
  hb[0] = (v = v << 2 & 268435452);
  ib = a + 48;
  ib[0] = (jb = f << 2 & 268435452);
  kb = a + 44;
  kb[0] = (x = x << 2 & 268435452);
  a[10]:int = (w = w << 2 & 268435452);
  a[9]:int = (ab = ab << 2);
  lb = a + 72;
  lb[0] = (p = (f = (p >> 26) - y + 536870904) << 2 & 268435452);
  y = a + 76;
  y[0] = (o = (f >> 26) + (o & 4194303) << 2);
  a[0]:int = (c.a & (f = 0 - (h = b[30]:int))) | ((h = h + -1) & z);
  a[1]:int = (c.b & f) | (h & aa);
  ja[0]:int = (c.c & f) | (h & ba);
  a[3]:int = (c.d & f) | (h & ca);
  ia[0]:int = (c.e & f) | (h & da);
  a[5]:int = (c.f & f) | (h & oa);
  ha[0]:int = (c.g & f) | (h & na);
  a[7]:int = (c.h & f) | (h & ya);
  ka[0]:int = (c.i & f) | (h & za);
  a[9]:int = (c.j & f) | (h & ab);
  a[10]:int = (c.k & (f = 0 - (h = b[30]:int))) | ((h = h + -1) & w);
  kb[0] = ((c + 44)[0]:int & f) | (h & x);
  ib[0] = ((c + 48)[0]:int & f) | (h & jb);
  hb[0] = ((c + 52)[0]:int & f) | (h & v);
  fb[0] = ((c + 56)[0]:int & f) | (h & gb);
  eb[0] = ((c + 60)[0]:int & f) | (h & r);
  db[0] = ((c + 64)[0]:int & f) | (h & q);
  bb[0] = ((c + 68)[0]:int & f) | (h & cb);
  lb[0] = ((c + 72)[0]:int & f) | (h & p);
  y[0] = ((c + 76)[0]:int & f) | (h & o);
  a[20]:int = (a[20]:int & (f = (h = b[30]:int) + -1)) | (h & 1);
  ga[0] = ga[0] & f;
  fa[0] = fa[0] & f;
  ea[0] = ea[0] & f;
  u[0] = u[0] & f;
  t[0] = t[0] & f;
  e[0] = e[0] & f;
  s[0] = s[0] & f;
  l[0]:int = l[0]:int & f;
  e = j[0]:int;
  a[30]:int = 
    select_if(
      select_if(
        t = 1 - pa,
        0,
        (((((((((((c = wa + ((h = la >> 22) << 6) + ((h = xa + h * 977) >> 26)) ^ 64) & 
                 (h ^ 976)) & 
                (b = va + (c >> 26))) & 
               (o = ua + (b >> 26))) & 
              (p = ta + (o >> 26))) & 
             (q = sa + (p >> 26))) & 
            (r = ra + (q >> 26))) & 
           (l = qa + (r >> 26))) & 
          (s = ma + (l >> 26))) & 
         ((u = (s >> 26) + (la & 4194303)) ^ 62914560)) == 
        67108863),
      t,
      (((((((((c | h) | b) | o) | p) | q) | r) | l) | s) & 67108863) | u);
  j[0]:int = e & f;
  g_a = d + 448;
}

function random_scalar_order256(a:int) {
  var b:int_ptr = g_a - 48;
  g_a = b;
  loop L_a {
    b[11] = 0;
    secp256k1_rfc6979_hmac_sha256_generate(79424, a);
    secp256k1_scalar_set_b32(b + 8, a, b + 44);
    if (b[11]) continue L_a;
    if (
      eqz(((((((b[3] | b[2]) | b[4]) | b[5]) | b[6]) | b[7]) | b[8]) | b[9])) continue L_a;
  }
  g_a = b + 48;
}

function secp256k1_ge_from_storage(a:int_ptr, b:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int }) {
  var c:int_ptr;
  var d:int_ptr;
  var e:int_ptr;
  a[0] = b.a & 67108863;
  a[1] = (b.b << 6 & 67108800) | b.a >> 26;
  a[2] = (b.c << 12 & 67104768) | b.b >> 20;
  a[3] = (b.d << 18 & 66846720) | b.c >> 14;
  a[4] = (b.e << 24 & 50331648) | b.d >> 8;
  a[5] = b.e >> 2 & 67108863;
  a[6] = (b.f << 4 & 67108848) | b.e >> 28;
  a[7] = (b.g << 10 & 67107840) | b.f >> 22;
  a[8] = (b.h << 16 & 67043328) | (b + 26)[0]:ushort;
  a[9] = b.h >> 10;
  a[10] = b.i & 67108863;
  (a + 44)[0]:int = ((c = b + 36)[0] << 6 & 67108800) | b.i >> 26;
  (a + 48)[0]:int = ((d = b + 40)[0] << 12 & 67104768) | c[0] >> 20;
  (a + 52)[0]:int = ((e = b + 44)[0] << 18 & 66846720) | d[0] >> 14;
  (a + 56)[0]:int = ((c = b + 48)[0] << 24 & 50331648) | e[0] >> 8;
  (a + 60)[0]:int = c[0] >> 2 & 67108863;
  (a + 64)[0]:int = ((d = b + 52)[0] << 4 & 67108848) | c[0] >> 28;
  (a + 68)[0]:int = ((b + 56)[0]:int << 10 & 67107840) | d[0] >> 22;
  (a + 72)[0]:int = 
    ((c = b + 60)[0] << 16 & 67043328) | (b + 58)[0]:ushort;
  b = c[0];
  a[20] = 0;
  (a + 76)[0]:int = b >> 10;
}

function memmove(a:int, b:int, c:int):int {
  var g:byte_ptr;
  if (a == b) goto B_a;
  if (b - a - c > 0 - (c << 1)) goto B_b;
  memcpy(a, b, c);
  goto B_a;
  label B_b:
  var d:int = (b ^ a) & 3;
  if (a >= b) goto B_e;
  if (eqz(d)) goto B_f;
  d = a;
  goto B_c;
  label B_f:
  if (a & 3) goto B_g;
  d = a;
  goto B_d;
  label B_g:
  d = a;
  loop L_h {
    if (eqz(c)) goto B_a;
    d[0]:byte = b[0]:ubyte;
    b = b + 1;
    c = c + -1;
    d = d + 1;
    if (eqz(d & 3)) goto B_d;
    continue L_h;
  }
  label B_e:
  if (eqz(d)) goto B_j;
  d = c;
  goto B_i;
  label B_j:
  if (a + c & 3) goto B_l;
  d = c;
  goto B_k;
  label B_l:
  var e:int = b + -1;
  var f:int = a + -1;
  loop L_m {
    if (eqz(c)) goto B_a;
    g = f + c;
    g[0] = (e + c)[0]:ubyte;
    d = c + -1;
    c = d;
    if (g & 3) continue L_m;
  }
  label B_k:
  if (d < 4) goto B_i;
  c = a + -4;
  g = b + -4;
  loop L_n {
    (c + d)[0]:int = (g + d)[0]:int;
    d = d + -4;
    if (d > 3) continue L_n;
  }
  label B_i:
  if (eqz(d)) goto B_a;
  b = b + -1;
  c = a + -1;
  loop L_o {
    (c + d)[0]:byte = (b + d)[0]:ubyte;
    d = d + -1;
    if (d) continue L_o;
    goto B_a;
  }
  label B_d:
  if (c < 4) goto B_c;
  loop L_p {
    d[0]:int = b[0]:int;
    b = b + 4;
    d = d + 4;
    c = c + -4;
    if (c > 3) continue L_p;
  }
  label B_c:
  if (eqz(c)) goto B_a;
  loop L_q {
    d[0]:byte = b[0]:ubyte;
    d = d + 1;
    b = b + 1;
    c = c + -1;
    if (c) continue L_q;
  }
  label B_a:
  return a;
}

function unicode_utf8_DecodeRuneInString(a:int, b:{ a:ubyte, b:ubyte, c:byte, d:byte }, c:int) {
  var g:int;
  var h:int;
  var g:int;
  var g:int;
  var g:int;
  var g:int;
  var d:byte_ptr = g_a - 16;
  g_a = d;
  var e:int = b.a;
  var f:int = (e + 68656)[0]:ubyte;
  if (e + -194 > 50) goto B_f;
  d[9] = (h = ((g = f >> 3 & 30) + 68913)[0]:ubyte);
  d[8] = (g = (g + 68912)[0]:ubyte);
  if ((f & 7) > c) goto B_d;
  if (c < 2) goto B_a;
  f = b.b;
  if (f < (g & 255)) goto B_d;
  if ((h & 255) >= f) goto B_e;
  goto B_d;
  label B_f:
  a[1]:int = 1;
  a[0]:int = select_if(65533, e, f & 1);
  g_a = d + 16;
  return ;
  label B_e:
  if (e + -224 >= 21) goto B_c;
  if (c < 3) goto B_a;
  g = b.c;
  if (g > -1) goto B_d;
  if ((g & 255) > 191) goto B_d;
  if (e + -240 >= 5) goto B_b;
  if (c < 4) goto B_a;
  b = b.d;
  if (b > -1) goto B_d;
  if ((b & 255) > 191) goto B_d;
  a[1]:int = 4;
  a[0]:int = 
    (((f & 63) << 12 | (e & 7) << 18) | (g & 63) << 6) | (b & 63);
  g_a = d + 16;
  return ;
  label B_d:
  a[0]:long = 4295032829L;
  g_a = d + 16;
  return ;
  label B_c:
  a[1]:int = 2;
  a[0]:int = (e & 31) << 6 | (f & 63);
  g_a = d + 16;
  return ;
  label B_b:
  a[1]:int = 3;
  a[0]:int = ((f & 63) << 6 | (e & 15) << 12) | (g & 63);
  g_a = d + 16;
  return ;
  label B_a:
  runtime_lookupPanic();
  unreachable;
}

function runtime_lookupPanic() {
  runtime_runtimePanic(69945, 18)
}

function unicode_utf8_EncodeRune(a:{ a:byte, b:byte, c:byte, d:byte }, b:int, c:int):int {
  var d:int;
  var d:int;
  var d:int;
  if (c > 127) goto B_e;
  if (b) goto B_d;
  goto B_a;
  label B_e:
  if (c > 2047) goto B_f;
  if (b < 2) goto B_a;
  a.b = (c & 63) | 128;
  a.a = c >> 6 | 192;
  return 2;
  label B_f:
  d = 65533;
  if (c > 1114111) goto B_b;
  if ((c & -2048) == 55296) goto B_b;
  if (c >= 65536) goto B_c;
  d = c;
  goto B_b;
  label B_d:
  a.a = c;
  return 1;
  label B_c:
  if (b < 4) goto B_a;
  a.d = (c & 63) | 128;
  a.a = c >> 18 | 240;
  a.c = (c >> 6 & 63) | 128;
  a.b = (c >> 12 & 63) | 128;
  return 4;
  label B_b:
  if (b < 3) goto B_a;
  a.c = (d & 63) | 128;
  a.a = d >> 12 | 224;
  a.b = (d >> 6 & 63) | 128;
  return 3;
  label B_a:
  runtime_lookupPanic();
  return unreachable;
}

function reflect_readStringSidetable(a:{ a:int, b:int }, b:int) {
  var d:int;
  var c:{ a:int, b:int, c:int, d:int } = g_a - 16;
  g_a = c;
  reflect_readVarint(c, b + 74512);
  c.c = (b = c.b);
  c.d = (d = c.a);
  a.a = b;
  a.b = d;
  g_a = c + 16;
}

function reflect_readVarint(a:{ a:int, b:int }, b:byte_ptr) {
  var e:int;
  var c:int = 0;
  var d:int = 0;
  loop L_a {
    c = select_if(0, ((e = b[0]) & 127) << d, d > 31) | c;
    b = b + 1;
    d = d + 7;
    if (e < 0) continue L_a;
  }
  a.b = b;
  a.a = c;
}

function reflect_ValueOf(a:{ a:int, b:int }, b:int, c:int) {
  var d:long_ptr = g_a - 32;
  (d + 16)[0]:byte = 0;
  d[1] = 0L;
  a.b = c;
  a.a = b;
}

function Kind(a:int, b:int, c:int):int {
  var d:long_ptr = g_a - 16;
  g_a = d;
  (d + 8)[0]:byte = 0;
  d[0] = 0L;
  a = Kind_1(a);
  g_a = d + 16;
  return a;
}

function Kind_1(a:int):int {
  var b:int = a >> 1;
  if (a & 1) goto B_a;
  return b & 31;
  label B_a:
  return (b & 7) + 19;
}

function Len(a:{ a:int, b:int }, b:int_ptr, c:int):int {
  var d:int = g_a - 48;
  g_a = d;
  d[1]:long = 0L;
  d[9]:long@4 = 0L;
  d[7]:int = 3;
  d[16]:byte = c;
  var e:int = 0;
  c = 0[19911]:int;
  0[19911]:int = d + 24;
  d[6]:int = c;
  d[3]:int = b;
  d[2]:int = a;
  d[8]:int = d + 8;
  br_table[B_b, B_g, B_e, B_g, B_g, B_c, B_f, B_g, B_d, ..B_g](
    Kind_1(a) + -17)
  label B_g:
  (d + 36)[0]:int = (a = runtime_alloc(8));
  (d + 40)[0]:int = a;
  a.b = 3;
  a.a = 69219;
  runtime_panic(9189, a);
  unreachable;
  label B_f:
  a = Len_1(a);
  0[19911]:int = c;
  g_a = d + 48;
  return a;
  label B_e:
  if (eqz(b)) goto B_a;
  e = b[6];
  goto B_a;
  label B_d:
  if (eqz(b)) goto B_a;
  e = b[2];
  goto B_a;
  label B_c:
  0[19911]:int = c;
  a = b[1];
  g_a = d + 48;
  return a;
  label B_b:
  0[19911]:int = c;
  a = b[1];
  g_a = d + 48;
  return a;
  label B_a:
  0[19911]:int = c;
  g_a = d + 48;
  return e;
}

function runtime_alloc(a:int):int {
  var g:{ a:int, b:int }
  var g:{ a:int, b:int }
  var g:{ a:int, b:int }
  var g:{ a:int, b:int }
  if (eqz(a)) goto B_a;
  var b:int = a + 15 >> 4;
  var c:int = 0[19906]:int;
  var d:int = c;
  var e:int = 0;
  var f:int = 0;
  loop L_b {
    if (d != c) goto B_d;
    g = 1;
    br_table[B_c, B_f, ..B_e](f & 255)
    label B_f:
    g = 0[19911]:int;
    loop L_h {
      if (eqz(g)) goto B_g;
      f = g + 8;
      runtime_markRoots(f, f + (g.b << 2));
      g = g.a;
      continue L_h;
    }
    label B_g:
    runtime_markRoots(65536, 79992);
    loop L_i {
      if (0[79633]:ubyte) goto B_j;
      f = 0;
      g = 0;
      loop L_k {
        if (g < 0[19907]:int) goto B_l;
        g = 2;
        goto B_c;
        label B_l:
        br_table[B_o, B_p, B_n, ..B_m]((state(g) & 255) + -1)
        label B_p:
        c = f & 1;
        f = 0;
        if (eqz(c)) goto B_m;
        label B_o:
        markFree(g);
        f = 1;
        goto B_m;
        label B_n:
        f = 0;
        c = 0[19905]:int + (g >> 2);
        c[0]:byte = c[0]:ubyte & (2 << (g << 1 & 6) ^ -1);
        label B_m:
        g = g + 1;
        continue L_k;
      }
      label B_j:
      g = 0;
      0[79633]:byte = 0;
      loop L_q {
        if (g >= 0[19907]:int) continue L_i;
        if ((state(g) & 255) != 3) goto B_r;
        runtime_startMark(g);
        label B_r:
        g = g + 1;
        continue L_q;
      }
    }
    label B_e:
    if (memory_grow(memory_size()) == -1) goto B_s;
    g = memory_size();
    c = 0[19873]:int;
    0[19873]:int = g << 16;
    g = 0[19905]:int;
    runtime_calculateHeapAddresses();
    memcpy(0[19905]:int, g, c - g);
    goto B_d;
    label B_s:
    runtime_runtimePanic(69910, 13);
    label B_d:
    g = f;
    label B_c:
    f = select_if(0, d, c = d == 0[19907]:int);
    if (eqz(state(f) & 255)) goto B_u;
    d = f + 1;
    e = 0;
    goto B_t;
    label B_u:
    d = f + 1;
    e = select_if(1, e + 1, c);
    if (e != b) goto B_t;
    0[19906]:int = d;
    d = d - b;
    setState_1(d, 1);
    g = f - b + 2;
    loop L_w {
      if (g == 0[19906]:int) goto B_v;
      setState_1(g, 2);
      g = g + 1;
      continue L_w;
    }
    label B_v:
    return memset((d << 4) + 79992, 0, a);
    label B_t:
    c = 0[19906]:int;
    f = g;
    continue L_b;
  }
  label B_a:
  return 79632;
}

function runtime_panic(a:int, b:int) {
  runtime_printstring(70000, 7);
  runtime_printitf(a, b);
  runtime_printnl();
  unreachable;
  unreachable;
}

function Len_1(a:{ a:int, b:int }):int {
  var b:int = g_a - 64;
  g_a = b;
  b[15]:int = 0;
  b[13]:long@4 = 0L;
  b[11]:long@4 = 0L;
  b[9]:long@4 = 6L;
  var c:int = 0[19911]:int;
  0[19911]:int = b + 32;
  b[8]:int = c;
  if (Kind_1(a) == 23) goto B_a;
  b[3]:long = 0L;
  (b + 32 + 8)[0]:int = b + 24;
  (b + 44)[0]:int = (a = runtime_alloc(8));
  (b + 48)[0]:int = a;
  a.b = 3;
  a.a = 69219;
  runtime_panic(511, a);
  unreachable;
  label B_a:
  (b + 52)[0]:int = (a = stripPrefix(a) + 74320);
  reflect_readVarint(b + 16, a);
  (b + 56)[0]:int = (a = b[5]:int);
  reflect_readVarint(b + 8, a);
  0[19911]:int = c;
  (b + 60)[0]:int = b[3]:int;
  a = b[2]:int;
  g_a = b + 64;
  return a;
}

function elem(a:int):int {
  var b:int = g_a - 32;
  g_a = b;
  b[7]:int = 0;
  b[5]:long@4 = 2L;
  var c:int = 0[19911]:int;
  0[19911]:int = b + 16;
  b[4]:int = c;
  br_table[B_c, B_a, B_c, B_c, B_b, ..B_a](Kind_1(a) + -19)
  label B_c:
  a = stripPrefix(a);
  0[19911]:int = c;
  g_a = b + 32;
  return a;
  label B_b:
  (b + 24)[0]:int = (a = stripPrefix(a) + 74320);
  reflect_readVarint(b + 8, a);
  0[19911]:int = c;
  (b + 28)[0]:int = b[3]:int;
  a = b[2]:int;
  g_a = b + 32;
  return a;
  label B_a:
  runtime_panic(34, 69128);
  return unreachable;
}

function stripPrefix(a:int):int {
  var b:int = a >> 5;
  if (eqz(a & 16)) goto B_a;
  return ((b << 2) + 74256)[0]:int;
  label B_a:
  return b;
}

function String(a:int) {
  if (a) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
}

function runtime_nilPanic() {
  runtime_runtimePanic(69963, 23)
}

function rawField(a:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:byte, i:int }, b:int, c:int) {
  var d:int = g_a - 160;
  g_a = d;
  d[11]:long = 68719476736L;
  d[19]:long = 0L;
  d[18]:long = 0L;
  d[17]:long = 0L;
  d[16]:long = 0L;
  d[15]:long = 0L;
  d[14]:long = 0L;
  d[13]:long = 0L;
  d[12]:long = 0L;
  var e:int = 0[19911]:int;
  0[19911]:int = d + 88;
  d[22]:int = e;
  if (Kind_1(b) != 26) goto B_b;
  (d + 88 + 16)[0]:int = (b = stripPrefix(b) + 74336);
  reflect_readVarint(d + 40, b);
  (d + 108)[0]:int = (b = d[11]:int);
  if (d[10]:int <= c) goto B_a;
  (d + 56)[0]:long = 0L;
  (d + 48 + 16)[0]:long = 0L;
  (d + 69)[0]:long@1 = 0L;
  d[20]:int = 0;
  d[6]:long = 0L;
  (d + 112)[0]:int = d + 48;
  var f:int_ptr = d + 152;
  var g:int_ptr = d + 156;
  var h:int_ptr = d + 148;
  var i:int_ptr = d + 120;
  var j:int_ptr = d + 116;
  var k:int_ptr = d + 124;
  var l:int_ptr = d + 128;
  var m:int_ptr = d + 132;
  var n:int_ptr = d + 144;
  var o:int_ptr = d + 136;
  var p:int_ptr = d + 140;
  var q:int = 0;
  var r:int = 0;
  var s:int = 0;
  var t:int = 0;
  var u:int = 0;
  var v:int = 0;
  var w:int = 0;
  var x:int = 0;
  var y:int = 0;
  var z:int = 0;
  var aa:int = 0;
  loop L_d {
    f[0] = w;
    g[0] = t;
    h[0] = y;
    i[0] = b;
    j[0] = b;
    if (aa > c) goto B_c;
    w = b[0]:ubyte;
    reflect_readVarint(d + 32, b + 1);
    k[0] = (b = d[9]:int);
    d[16]:int = (u = d[8]:int);
    t = 0;
    d[20]:int = (q = z + (y = Align(u)) + -1 & 0 - y);
    z = Size(u);
    reflect_readVarint(d + 24, b);
    l[0] = (b = d[7]:int);
    reflect_readStringSidetable(d + 16, d[6]:int);
    m[0] = (y = d[4]:int);
    d[76]:byte = (r = w & 1);
    d[13]:int = (x = d[5]:int);
    d[12]:int = y;
    if (w & 2) goto B_f;
    s = 0;
    goto B_e;
    label B_f:
    reflect_readVarint(d + 8, b);
    o[0] = (b = d[3]:int);
    reflect_readStringSidetable(d, d[2]:int);
    p[0] = (t = d[0]:int);
    s = d[1]:int;
    label B_e:
    z = q + z;
    n[0] = b;
    d[18]:int = s;
    d[17]:int = t;
    d[15]:int = (v = select_if(0, 15, w = w & 4));
    d[14]:int = (w = select_if(0, 68957, w));
    aa = aa + 1;
    continue L_d;
  }
  label B_c:
  0[19911]:int = e;
  a.i = q;
  a.h = r & 1;
  a.g = s;
  a.f = t;
  a.e = u;
  a.d = v;
  a.c = w;
  a.b = x;
  a.a = y;
  g_a = d + 160;
  return ;
  label B_b:
  (d + 88 + 8)[0]:int = (b = runtime_alloc(8));
  (d + 100)[0]:int = b;
  b[1]:int = 5;
  b[0]:int = 68952;
  runtime_panic(16357, b);
  unreachable;
  label B_a:
  runtime_panic(34, 68944);
  unreachable;
}

function Align(a:int):int {
  var d:int;
  var b:int = g_a - 64;
  g_a = b;
  b[13]:long@4 = 0L;
  b[11]:long@4 = 3L;
  var c:int = 0[19911]:int;
  0[19911]:int = b + 40;
  b[10]:int = c;
  loop L_c {
    d = 4;
    br_table[B_g, B_a, B_g, B_f, B_a, B_a, B_a, B_g, B_f, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_d, B_a, B_a, B_e, ..B_b](
      Kind_1(a) + -1)
    label B_g:
    d = 1;
    goto B_a;
    label B_f:
    d = 2;
    goto B_a;
    label B_e:
    var e:int = 0;
    d = NumField(a);
    var f:int = select_if(d, 0, d > 0);
    var g:int_ptr = b + 56;
    var h:int_ptr = b + 52;
    var i:int_ptr = b + 48;
    d = 1;
    loop L_h {
      if (f == e) goto B_a;
      rawField(b, a, e);
      g[0] = b[5]:int;
      h[0] = b[2]:int;
      i[0] = b[0]:int;
      var j:int = Align(b[4]:int);
      d = select_if(j, d, j > d);
      e = e + 1;
      continue L_h;
    }
    label B_d:
    a = elem(a);
    continue L_c;
  }
  label B_b:
  runtime_panic(34, 69024);
  unreachable;
  label B_a:
  0[19911]:int = c;
  g_a = b + 64;
  return d;
}

function Size(a:int):int {
  var b:int = g_a - 112;
  g_a = b;
  b[27]:int = 0;
  b[25]:long@4 = 0L;
  b[23]:long@4 = 4L;
  var c:int = 0[19911]:int;
  0[19911]:int = b + 88;
  b[22]:int = c;
  var d:int = 1;
  br_table[B_a, B_g, B_a, B_i, B_g, B_e, B_g, B_a, B_i, B_g, B_e, B_g, B_g, B_e, B_e, B_h, B_e, B_g, B_g, B_e, B_g, B_f, B_d, B_e, B_g, B_c, ..B_b](
    Kind_1(a) + -1)
  label B_i:
  d = 2;
  goto B_a;
  label B_h:
  d = 16;
  goto B_a;
  label B_g:
  d = 4;
  goto B_a;
  label B_f:
  d = 12;
  goto B_a;
  label B_e:
  d = 8;
  goto B_a;
  label B_d:
  d = Size(elem(a));
  a = Len_1(a);
  0[19911]:int = c;
  g_a = b + 112;
  return a * d;
  label B_c:
  d = 0;
  var e:int = NumField(a);
  if (eqz(e)) goto B_a;
  (b + 48 + 8)[0]:long = 0L;
  (b + 48 + 16)[0]:long = 0L;
  (b + 69)[0]:long@1 = 0L;
  b[20]:int = 0;
  b[6]:long = 0L;
  (b + 88 + 8)[0]:int = b + 48;
  rawField(b + 8, a, e + -1);
  (b + 108)[0]:int = b[7]:int;
  (b + 88 + 16)[0]:int = b[4]:int;
  (b + 100)[0]:int = b[2]:int;
  d = b[10]:int;
  a = Size(b[6]:int);
  0[19911]:int = c;
  g_a = b + 112;
  return a + d;
  label B_b:
  runtime_panic(34, 68976);
  unreachable;
  label B_a:
  0[19911]:int = c;
  g_a = b + 112;
  return d;
}

function NumField(a:{ a:int, b:int }):int {
  var b:int = g_a - 32;
  g_a = b;
  b[7]:int = 0;
  b[5]:long@4 = 0L;
  b[3]:long@4 = 4L;
  var c:int = 0[19911]:int;
  0[19911]:int = b + 8;
  b[2]:int = c;
  if (Kind_1(a) == 26) goto B_a;
  (b + 8 + 8)[0]:int = (a = runtime_alloc(8));
  (b + 20)[0]:int = a;
  a.b = 8;
  a.a = 69011;
  runtime_panic(16357, a);
  unreachable;
  label B_a:
  (b + 24)[0]:int = (a = stripPrefix(a) + 74336);
  reflect_readVarint(b, a);
  0[19911]:int = c;
  (b + 28)[0]:int = b[1]:int;
  a = b[0]:int;
  g_a = b + 32;
  return a;
}

function reflect_TypeOf(a:int, b:int):int {
  var c:int_ptr = g_a - 16;
  g_a = c;
  reflect_ValueOf(c + 8, a, b);
  a = c[2];
  g_a = c + 16;
  return a;
}

function Bool(a:int, b:int, c:int):int {
  var d:int = g_a - 48;
  g_a = d;
  d[1]:long = 0L;
  d[9]:long@4 = 0L;
  d[7]:int = 3;
  d[16]:byte = c;
  var e:int = 0[19911]:int;
  0[19911]:int = d + 24;
  d[6]:int = e;
  d[3]:int = b;
  d[2]:int = a;
  d[8]:int = d + 8;
  if (Kind(a, b, c) != 1) goto B_b;
  if (isIndirect(a, b, c) & 1) goto B_a;
  0[19911]:int = e;
  g_a = d + 48;
  return b != 0;
  label B_b:
  (d + 36)[0]:int = (b = runtime_alloc(8));
  (d + 40)[0]:int = b;
  b[1]:int = 4;
  b[0]:int = 69222;
  runtime_panic(9189, b);
  unreachable;
  label B_a:
  b = b[0]:ubyte;
  0[19911]:int = e;
  g_a = d + 48;
  return b;
}

function isIndirect(a:int, b:int, c:int):int {
  var d:long_ptr = g_a - 16;
  (d + 8)[0]:byte = 0;
  d[0] = 0L;
  return c & 1;
}

function Bytes(a:int, b:int, c:int) {
  var d:int = g_a - 32;
  g_a = d;
  (d + 8)[0]:byte = 0;
  d[5]:int = 1;
  d[0]:long = 0L;
  var e:int = 0[19911]:int;
  0[19911]:int = d + 16;
  d[4]:int = e;
  d[6]:int = d;
  runtime_panic(34, 69232);
  unreachable;
}

function CanInterface(a:int, b:int, c:int) {
  var d:long_ptr = g_a - 16;
  (d + 8)[0]:byte = 0;
  d[0] = 0L;
}

function Complex(a:{ a:double, b:double }, b:int, c:int, d:int) {
  var e:int = g_a - 48;
  g_a = e;
  e[4]:long@4 = 0L;
  e[9]:long@4 = 0L;
  e[7]:int = 3;
  e[3]:int = b;
  var f:int = 0[19911]:int;
  0[19911]:int = e + 24;
  e[6]:int = f;
  e[20]:byte = d;
  e[4]:int = c;
  e[8]:int = e + 12;
  br_table[B_c, B_b, ..B_a](Kind(b, c, d) + -15)
  label B_c:
  isIndirect(b, c, d);
  var g:float = c[0]:float;
  0[19911]:int = f;
  a.b = f64_promote_f32(c[1]:float);
  a.a = f64_promote_f32(g);
  g_a = e + 48;
  return ;
  label B_b:
  0[19911]:int = f;
  var h:double = c[0]:double;
  a.b = c[1]:double;
  a.a = h;
  g_a = e + 48;
  return ;
  label B_a:
  (e + 36)[0]:int = (c = runtime_alloc(8));
  (e + 40)[0]:int = c;
  c[1]:int = 7;
  c[0]:int = 69278;
  runtime_panic(9189, c);
  unreachable;
}

function Elem(a:int, b:int, c:{ a:int, b:int }, d:int) {
  var e:int = g_a - 96;
  g_a = e;
  e[1]:long = 0L;
  e[23]:int = 0;
  e[21]:long@4 = 0L;
  e[19]:long@4 = 0L;
  e[17]:long@4 = 0L;
  e[15]:int = 8;
  e[16]:byte = d;
  var f:int = 0[19911]:int;
  0[19911]:int = e + 56;
  e[14]:int = f;
  e[2]:int = b;
  e[3]:int = c;
  e[16]:int = e + 8;
  if (Kind(b, c, d) != 21) goto B_b;
  if (eqz(isIndirect(b, c, d) & 1)) goto B_c;
  (e + 68)[0]:int = (c = c.a);
  label B_c:
  (e + 72)[0]:int = c;
  (e + 84)[0]:int = c;
  if (c) goto B_a;
  0[19911]:int = f;
  (e + 32)[0]:byte = 0;
  e[3]:long = 0L;
  (e + 76)[0]:int = e + 24;
  a[8]:byte = 0;
  a[0]:long = 0L;
  g_a = e + 96;
  return ;
  label B_b:
  (e + 88)[0]:int = (c = runtime_alloc(8));
  (e + 92)[0]:int = c;
  c.b = 4;
  c.a = 69285;
  runtime_panic(9189, c);
  unreachable;
  label B_a:
  (e + 48)[0]:byte = 0;
  e[5]:long = 0L;
  (e + 80)[0]:int = e + 40;
  b = elem(b);
  0[19911]:int = f;
  a[8]:byte = d | 1;
  a[1]:int = c;
  a[0]:int = b;
  g_a = e + 96;
}

function Field(a:{ a:int, b:int, c:byte }, b:int, c:int, d:int, e:int) {
  var h:int;
  var i:int;
  var j:int;
  var k:int;
  var f:int = g_a - 224;
  g_a = f;
  (f + 77)[0]:long@1 = 0L;
  f[5]:long = 0L;
  f[43]:long@4 = 0L;
  f[55]:int = 0;
  f[53]:long@4 = 0L;
  f[51]:long@4 = 0L;
  f[49]:long@4 = 0L;
  f[47]:long@4 = 0L;
  f[45]:long@4 = 0L;
  f[41]:int = 14;
  f[48]:byte = d;
  f[22]:int = 0;
  f[7]:long = 0L;
  f[8]:long = 0L;
  f[9]:long = 0L;
  var g:int = 0[19911]:int;
  0[19911]:int = f + 160;
  f[40]:int = g;
  f[10]:int = b;
  f[11]:int = c;
  f[42]:int = f + 40;
  f[43]:int = f + 56;
  rawField(f, b, e);
  (f + 80)[0]:int = f[6]:int;
  (f + 68)[0]:int = (h = f[3]:int);
  f[47]:int = (e = f[2]:int);
  f[44]:int = (i = f[0]:int);
  f[46]:int = (j = f[5]:int);
  f[45]:int = e;
  f[22]:int = (k = f[8]:int);
  f[19]:int = j;
  f[18]:int = (j = f[4]:int);
  f[16]:int = e;
  f[15]:int = f[1]:int;
  f[14]:int = i;
  f[84]:byte = f[28]:ubyte & 1;
  h = select_if(d & -3, d, h);
  i = Size(b);
  e = Size(j);
  b = isIndirect(b, c, d);
  if (e > 4) goto B_c;
  if (b & 1) goto B_c;
  if (eqz(e)) goto B_b;
  if (i >= 5) goto B_a;
  0[19911]:int = g;
  (f + 152)[0]:byte = 0;
  (f + 220)[0]:int = 
    (b = -1 >> 32 - (e << 3) & select_if(0, c >> (b = k << 3), b > 31));
  (f + 216)[0]:int = b;
  f[18]:long = 0L;
  (f + 212)[0]:int = f + 144;
  a.c = h;
  a.b = b;
  a.a = j;
  g_a = f + 224;
  return ;
  label B_c:
  0[19911]:int = g;
  (f + 104)[0]:byte = 0;
  f[12]:long = 0L;
  (f + 192)[0]:int = f + 96;
  a.c = h;
  a.b = c + k;
  a.a = j;
  g_a = f + 224;
  return ;
  label B_b:
  0[19911]:int = g;
  (f + 120)[0]:byte = 0;
  f[14]:long = 0L;
  (f + 196)[0]:int = f + 112;
  a.c = h;
  a.b = 0;
  a.a = j;
  g_a = f + 224;
  return ;
  label B_a:
  (f + 200)[0]:int = (b = reflect_loadValue(c + k, e));
  (f + 208)[0]:int = b;
  (f + 136)[0]:byte = 0;
  0[19911]:int = g;
  (f + 204)[0]:int = f + 128;
  f[16]:long = 0L;
  a.c = 0;
  a.b = b;
  a.a = j;
  g_a = f + 224;
}

function reflect_loadValue(a:ubyte_ptr, b:int):int {
  var c:int = 0;
  var d:int = 0;
  loop L_b {
    if (eqz(b)) goto B_a;
    c = select_if(0, a[0] << d, d > 31) | c;
    b = b + -1;
    a = a + 1;
    d = d + 8;
    continue L_b;
  }
  label B_a:
  return c;
}

function Float(a:int, b:int, c:int):double {
  var d:int = g_a - 48;
  g_a = d;
  d[2]:long@4 = 0L;
  d[9]:long@4 = 0L;
  d[7]:long@4 = 0L;
  d[5]:int = 5;
  d[1]:int = a;
  var e:int = 0[19911]:int;
  0[19911]:int = d + 16;
  d[4]:int = e;
  d[12]:byte = c;
  d[2]:int = b;
  d[6]:int = d + 4;
  br_table[B_d, B_c, ..B_b](Kind(a, b, c) + -13)
  label B_d:
  if (isIndirect(a, b, c) & 1) goto B_a;
  0[19911]:int = e;
  (d + 28)[0]:int = (c = d + 8);
  (d + 32)[0]:int = c;
  g_a = d + 48;
  return f64_promote_f32(f32_reinterpret_i32(b));
  label B_c:
  isIndirect(a, b, c);
  0[19911]:int = e;
  var f:double = b[0]:double;
  g_a = d + 48;
  return f;
  label B_b:
  (d + 36)[0]:int = (b = runtime_alloc(8));
  (d + 40)[0]:int = b;
  b[1]:int = 5;
  b[0]:int = 69289;
  runtime_panic(9189, b);
  unreachable;
  label B_a:
  var g:float = b[0]:float;
  0[19911]:int = e;
  g_a = d + 48;
  return f64_promote_f32(g);
}

function Index(a:{ a:int, b:int, c:byte }, b:int, c:{ a:int, b:int, c:int }, d:int, e:int) {
  var h:int;
  var i:int;
  var i:int;
  var h:int;
  var i:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var f:int = g_a - 240;
  g_a = f;
  f[1]:long = 0L;
  f[18]:long = 90194313216L;
  f[19]:long = 0L;
  f[58]:int = 0;
  f[28]:long = 0L;
  f[27]:long = 0L;
  f[26]:long = 0L;
  f[25]:long = 0L;
  f[24]:long = 0L;
  f[23]:long = 0L;
  f[22]:long = 0L;
  f[21]:long = 0L;
  f[20]:long = 0L;
  f[16]:byte = d;
  var g:int = 0[19911]:int;
  0[19911]:int = f + 144;
  f[2]:int = b;
  f[3]:int = c;
  f[36]:int = g;
  f[38]:int = f + 8;
  br_table[B_f, B_e, B_e, B_e, B_e, B_g, B_d, ..B_e](
    Kind(b, c, d) + -17)
  label B_g:
  (f + 168)[0]:int = (h = c.a);
  (f + 160)[0]:int = h;
  f[7]:int = (i = c.b);
  f[8]:int = c.c;
  (f + 156)[0]:int = f + 24;
  f[6]:int = h;
  if (i <= e) goto B_c;
  (f + 48)[0]:byte = 0;
  f[5]:long = 0L;
  (f + 164)[0]:int = f + 40;
  c = elem(b);
  b = Size(c);
  0[19911]:int = g;
  a.c = d | 1;
  a.a = c;
  a.b = h + b * e;
  g_a = f + 240;
  return ;
  label B_f:
  (f + 184)[0]:int = (b = c.a);
  (f + 176)[0]:int = b;
  f[15]:int = (c = c.b);
  (f + 172)[0]:int = f + 56;
  f[14]:int = b;
  if (c <= e) goto B_b;
  (f + 72)[0]:byte = 0;
  f[8]:long = 0L;
  (f + 180)[0]:int = f + 64;
  (f + 188)[0]:int = (c = (b + e)[0]:ubyte);
  (f + 192)[0]:int = c;
  0[19911]:int = g;
  a.c = 0;
  a.b = c;
  a.a = 16;
  g_a = f + 240;
  return ;
  label B_e:
  (f + 212)[0]:int = (c = runtime_alloc(8));
  (f + 216)[0]:int = c;
  c.b = 5;
  c.a = 69312;
  runtime_panic(9189, c);
  unreachable;
  label B_d:
  h = Size(elem(b));
  i = Size(b);
  if (i) goto B_a;
  (f + 88)[0]:byte = 0;
  f[10]:long = 0L;
  (f + 196)[0]:int = f + 80;
  c = elem(b);
  0[19911]:int = g;
  a.c = d;
  a.b = 0;
  a.a = c;
  g_a = f + 240;
  return ;
  label B_c:
  runtime_panic(34, 69296);
  unreachable;
  label B_b:
  runtime_panic(34, 69304);
  unreachable;
  label B_a:
  if (h > 4) goto B_i;
  if (i > 4) goto B_h;
  (f + 136)[0]:byte = 0;
  f[16]:long = 0L;
  (f + 200)[0]:int = f + 128;
  b = elem(b);
  0[19911]:int = g;
  (f + 204)[0]:int = 
    (c = select_if(-1 >> 32 - (h << 3), 0, h) & 
         select_if(0, c >> (g = h * e << 3), g > 31));
  (f + 208)[0]:int = c;
  a.c = d;
  a.b = c;
  a.a = b;
  g_a = f + 240;
  return ;
  label B_i:
  (f + 104)[0]:byte = 0;
  f[12]:long = 0L;
  (f + 220)[0]:int = f + 96;
  b = elem(b);
  0[19911]:int = g;
  a.c = d;
  a.b = c + h * e;
  a.a = b;
  g_a = f + 240;
  return ;
  label B_h:
  (f + 120)[0]:byte = 0;
  f[14]:long = 0L;
  (f + 224)[0]:int = f + 112;
  b = elem(b);
  (f + 228)[0]:int = (c = reflect_loadValue(c + h * e, h));
  (f + 232)[0]:int = c;
  0[19911]:int = g;
  a.c = d;
  a.b = c;
  a.a = b;
  g_a = f + 240;
}

function Int(a:int, b:int, c:int):long {
  var f:long;
  var f:long;
  var f:long;
  var f:long;
  var d:int = g_a - 48;
  g_a = d;
  d[1]:long = 0L;
  d[9]:long@4 = 0L;
  d[7]:int = 3;
  d[16]:byte = c;
  var e:int = 0[19911]:int;
  0[19911]:int = d + 24;
  d[6]:int = e;
  d[3]:int = b;
  d[2]:int = a;
  d[8]:int = d + 8;
  br_table[B_g, B_f, B_e, B_d, B_i, ..B_h](Kind(a, b, c) + -2)
  label B_i:
  isIndirect(a, b, c);
  0[19911]:int = e;
  f = b[0]:long;
  g_a = d + 48;
  return f;
  label B_h:
  (d + 36)[0]:int = (b = runtime_alloc(8));
  (d + 40)[0]:int = b;
  b[1]:int = 3;
  b[0]:int = 69384;
  runtime_panic(9189, b);
  unreachable;
  label B_g:
  if (isIndirect(a, b, c) & 1) goto B_a;
  0[19911]:int = e;
  g_a = d + 48;
  return i64_extend_i32_s(b);
  label B_f:
  if (isIndirect(a, b, c) & 1) goto B_b;
  0[19911]:int = e;
  g_a = d + 48;
  return (i64_extend_i32_u(b) << 56L) >> 56L;
  label B_e:
  if (isIndirect(a, b, c) & 1) goto B_c;
  0[19911]:int = e;
  g_a = d + 48;
  return (i64_extend_i32_u(b) << 48L) >> 48L;
  label B_d:
  if (isIndirect(a, b, c) & 1) goto B_j;
  0[19911]:int = e;
  g_a = d + 48;
  return i64_extend_i32_s(b);
  label B_j:
  f = b[0]:int;
  0[19911]:int = e;
  g_a = d + 48;
  return f;
  label B_c:
  f = b[0]:short;
  0[19911]:int = e;
  g_a = d + 48;
  return f;
  label B_b:
  f = b[0]:byte;
  0[19911]:int = e;
  g_a = d + 48;
  return f;
  label B_a:
  f = b[0]:int;
  0[19911]:int = e;
  g_a = d + 48;
  return f;
}

function Interface(a:{ a:int, b:int }, b:int, c:int, d:int) {
  var j:ubyte_ptr;
  var e:int = g_a - 96;
  g_a = e;
  e[0]:long = 0L;
  e[13]:long@4 = 0L;
  e[21]:long@4 = 0L;
  e[19]:long@4 = 0L;
  e[17]:long@4 = 0L;
  e[15]:long@4 = 0L;
  e[11]:int = 11;
  e[8]:byte = d;
  var f:int = 0[19911]:int;
  0[19911]:int = e + 40;
  e[10]:int = f;
  e[0]:int = b;
  e[1]:int = c;
  e[12]:int = e;
  e[13]:int = e + 16;
  if (eqz(d & 2)) goto B_a;
  (e + 56)[0]:int = e + 16;
  e[2]:long = 0L;
  e[24]:byte = d;
  e[5]:int = c;
  e[4]:int = b;
  if (eqz(isIndirect(b, c, d) & 1)) goto B_b;
  if (Size(b) > 4) goto B_b;
  var g:int = c + -1;
  c = 0;
  d = Size(b);
  var h:int_ptr = e + 60;
  var i:int_ptr = e + 64;
  loop L_d {
    if (eqz(d)) goto B_c;
    h[0] = (j = g + d);
    i[0] = j;
    c = c << 8 | j[0];
    d = d + -1;
    continue L_d;
  }
  label B_c:
  (e + 68)[0]:int = c;
  e[5]:int = c;
  label B_b:
  (e + 84)[0]:int = c;
  (e + 88)[0]:int = c;
  (e + 80)[0]:int = c;
  (e + 72)[0]:int = c;
  0[19911]:int = f;
  (e + 76)[0]:int = e + 32;
  a.b = c;
  a.a = b;
  g_a = e + 96;
  return ;
  label B_a:
  runtime_panic(34, 69392);
  unreachable;
}

function IsNil(a:int, b:{ a:int, b:int }, c:int):int {
  var d:int = g_a - 80;
  g_a = d;
  d[1]:long = 0L;
  d[17]:long@4 = 0L;
  d[15]:long@4 = 0L;
  d[13]:long@4 = 0L;
  d[11]:long@4 = 0L;
  d[9]:int = 9;
  d[16]:byte = c;
  var e:int = 0[19911]:int;
  0[19911]:int = d + 32;
  d[8]:int = e;
  d[3]:int = b;
  d[2]:int = a;
  d[10]:int = d + 8;
  br_table[B_f, B_c, B_f, B_d, B_g, B_e, B_f, ..B_g](
    Kind(a, b, c) + -19)
  label B_g:
  (d + 44)[0]:int = (b = runtime_alloc(8));
  (d + 48)[0]:int = b;
  b.b = 5;
  b.a = 69437;
  runtime_panic(9189, b);
  unreachable;
  label B_f:
  if (isIndirect(a, b, c) & 1) goto B_b;
  0[19911]:int = e;
  g_a = d + 80;
  return eqz(b);
  label B_e:
  if (eqz(b)) goto B_a;
  0[19911]:int = e;
  (d + 52)[0]:int = (b = b.b);
  g_a = d + 80;
  return eqz(b);
  label B_d:
  if (eqz(b)) goto B_a;
  (d + 56)[0]:int = (b = b.a);
  0[19911]:int = e;
  g_a = d + 80;
  return eqz(b);
  label B_c:
  if (eqz(b)) goto B_a;
  (d + 72)[0]:int = (b = b.b);
  (d + 68)[0]:int = b;
  (d + 60)[0]:int = b;
  0[19911]:int = e;
  (d + 64)[0]:int = d + 24;
  g_a = d + 80;
  return eqz(b);
  label B_b:
  b = b.a;
  0[19911]:int = e;
  g_a = d + 80;
  return eqz(b);
  label B_a:
  0[19911]:int = e;
  g_a = d + 80;
  return 1;
}

function IsValid(a:int, b:int, c:int):int {
  var d:long_ptr = g_a - 16;
  (d + 8)[0]:byte = 0;
  d[0] = 0L;
  return a != 0;
}

function MapRange(a:int, b:int, c:int) {
  var d:int = g_a - 32;
  g_a = d;
  (d + 8)[0]:byte = 0;
  d[5]:int = 1;
  d[0]:long = 0L;
  var e:int = 0[19911]:int;
  0[19911]:int = d + 16;
  d[4]:int = e;
  d[6]:int = d;
  runtime_panic(34, 69448);
  unreachable;
}

function NumField_1(a:int, b:int, c:int):int {
  var d:int = g_a - 32;
  g_a = d;
  (d + 8)[0]:byte = 0;
  d[5]:int = 1;
  d[0]:long = 0L;
  var e:int = 0[19911]:int;
  0[19911]:int = d + 16;
  d[4]:int = e;
  d[6]:int = d;
  a = NumField(a);
  0[19911]:int = e;
  g_a = d + 32;
  return a;
}

function Pointer(a:int, b:{ a:int, b:int }, c:int):int {
  var d:int = g_a - 48;
  g_a = d;
  d[1]:long = 0L;
  d[11]:int = 0;
  d[9]:long@4 = 0L;
  d[7]:int = 4;
  d[16]:byte = c;
  var e:int = 0[19911]:int;
  0[19911]:int = d + 24;
  d[6]:int = e;
  d[3]:int = b;
  d[2]:int = a;
  d[8]:int = d + 8;
  var f:int = Kind(a, b, c);
  if (f > 25) goto B_f;
  if (1 << f & 36438016) goto B_e;
  if (f == 22) goto B_d;
  if (f == 24) goto B_c;
  label B_f:
  (d + 36)[0]:int = (b = runtime_alloc(8));
  (d + 40)[0]:int = b;
  b.b = 7;
  b.a = 69512;
  runtime_panic(9189, b);
  unreachable;
  label B_e:
  if (isIndirect(a, b, c) & 1) goto B_a;
  0[19911]:int = e;
  g_a = d + 48;
  return b;
  label B_d:
  if (eqz(b)) goto B_b;
  (d + 44)[0]:int = (b = b.a);
  0[19911]:int = e;
  g_a = d + 48;
  return b;
  label B_c:
  runtime_panic(34, 69504);
  unreachable;
  label B_b:
  runtime_nilPanic();
  unreachable;
  label B_a:
  b = b.a;
  0[19911]:int = e;
  g_a = d + 48;
  return b;
}

function Slice(a:int, b:int, c:int) {
  var d:int = g_a - 32;
  g_a = d;
  (d + 8)[0]:byte = 0;
  d[5]:int = 1;
  d[0]:long = 0L;
  var e:int = 0[19911]:int;
  0[19911]:int = d + 16;
  d[4]:int = e;
  d[6]:int = d;
  runtime_panic(34, 69560);
  unreachable;
}

function String_1(a:int, b:int, c:long_ptr@4, d:int) {
  var e:int = g_a - 16;
  g_a = e;
  e[0]:long = 0L;
  e[8]:byte = d;
  e[1]:int = c;
  e[0]:int = b;
  if (Kind(b, c, d) == 17) goto B_a;
  a[1]:int = 3;
  a[0]:int = 69606;
  g_a = e + 16;
  return ;
  label B_a:
  a[0]:long = c[0];
  g_a = e + 16;
}

function Type(a:int, b:int, c:int):int {
  var d:long_ptr = g_a - 16;
  (d + 8)[0]:byte = 0;
  d[0] = 0L;
  return a;
}

function Uint(a:int, b:int, c:int):long {
  var f:long;
  var f:long;
  var f:long;
  var f:long;
  var f:long;
  var d:int = g_a - 48;
  g_a = d;
  d[1]:long = 0L;
  d[9]:long@4 = 0L;
  d[7]:int = 3;
  d[16]:byte = c;
  var e:int = 0[19911]:int;
  0[19911]:int = d + 24;
  d[6]:int = e;
  d[3]:int = b;
  d[2]:int = a;
  d[8]:int = d + 8;
  br_table[B_f, B_h, B_g, B_e, B_k, B_i, ..B_j](Kind(a, b, c) + -7)
  label B_k:
  isIndirect(a, b, c);
  0[19911]:int = e;
  f = b[0]:long;
  g_a = d + 48;
  return f;
  label B_j:
  (d + 36)[0]:int = (b = runtime_alloc(8));
  (d + 40)[0]:int = b;
  b[1]:int = 4;
  b[0]:int = 69609;
  runtime_panic(9189, b);
  unreachable;
  label B_i:
  if (isIndirect(a, b, c) & 1) goto B_a;
  0[19911]:int = e;
  g_a = d + 48;
  return i64_extend_i32_u(b);
  label B_h:
  if (isIndirect(a, b, c) & 1) goto B_b;
  0[19911]:int = e;
  g_a = d + 48;
  return i64_extend_i32_u(b);
  label B_g:
  if (isIndirect(a, b, c) & 1) goto B_c;
  0[19911]:int = e;
  g_a = d + 48;
  return i64_extend_i32_u(b);
  label B_f:
  if (isIndirect(a, b, c) & 1) goto B_d;
  0[19911]:int = e;
  g_a = d + 48;
  return i64_extend_i32_u(b);
  label B_e:
  if (isIndirect(a, b, c) & 1) goto B_l;
  0[19911]:int = e;
  g_a = d + 48;
  return i64_extend_i32_u(b);
  label B_l:
  f = b[0]:uint;
  0[19911]:int = e;
  g_a = d + 48;
  return f;
  label B_d:
  f = b[0]:uint;
  0[19911]:int = e;
  g_a = d + 48;
  return f;
  label B_c:
  f = b[0]:ushort;
  0[19911]:int = e;
  g_a = d + 48;
  return f;
  label B_b:
  f = b[0]:ubyte;
  0[19911]:int = e;
  g_a = d + 48;
  return f;
  label B_a:
  f = b[0]:uint;
  0[19911]:int = e;
  g_a = d + 48;
  return f;
}

function returnTo(a:int_ptr, b:int) {
  if (a) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  a[4] = b;
  runtime_runqueuePushBack(a);
}

function runtime_runqueuePushBack(a:int_ptr) {
  if (eqz(0[19997]:int)) goto B_b;
  var b:int_ptr = 0[19997]:int;
  if (eqz(b)) goto B_a;
  b[0] = a;
  label B_b:
  0[19997]:int = a;
  if (eqz(a)) goto B_a;
  a[0] = 0;
  if (0[19996]:int) goto B_c;
  0[19996]:int = a;
  label B_c:
  return ;
  label B_a:
  runtime_nilPanic();
  unreachable;
}

function setState(a:int_ptr, b:int):int {
  var c:int_ptr = g_a - 16;
  g_a = c;
  c[2] = 0;
  if (a) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  var d:int = a[4];
  a[4] = b;
  g_a = c + 16;
  return d;
}

function io_ReadAtLeast(a:int) {
  Read();
  unreachable;
}

function Read() {
  runtime_nilPanic();
  unreachable;
}

function io_ReadFull(a:int) {
  var b:int = g_a - 16;
  g_a = b;
  io_ReadAtLeast(b + 8);
  unreachable;
}

function String_2(a:{ a:int, b:int }, b:{ a:int, b:int, c:ubyte }) {
  var c:int_ptr = g_a - 16;
  g_a = c;
  if (b) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  String_1(c + 8, b.a, b.b, b.c);
  a.a = c[2];
  a.b = c[3];
  g_a = c + 16;
}

function String_invoke(a:{ a:int, b:int }, b:{ a:int, b:int, c:ubyte }) {
  var c:int_ptr = g_a - 16;
  g_a = c;
  String_1(c + 8, b.a, b.b, b.c);
  a.a = c[2];
  a.b = c[3];
  g_a = c + 16;
}

function runtime_markRoots(a:int_ptr, b:int) {
  loop L_b {
    if (a >= b) goto B_a;
    var c:int = a[0];
    if (eqz(runtime_looksLikePointer(c) & 1)) goto B_c;
    c = c - 79992 >> 4;
    if (eqz(state(c) & 255)) goto B_c;
    c = findHead(c);
    if ((state(c) & 255) == 3) goto B_c;
    runtime_startMark(c);
    label B_c:
    a = a + 4;
    continue L_b;
  }
  label B_a:
}

function state(a:int):int {
  return (0[19905]:int + (a >> 2))[0]:ubyte >> (a << 1 & 6) & 3
}

function markFree(a:int) {
  var b:int = 0[19905]:int + (a >> 2);
  b[0]:byte = b[0]:ubyte & (3 << (a << 1 & 6) ^ -1);
}

function runtime_startMark(a:int) {
  var b:int = g_a - 64;
  g_a = b;
  var c:int_ptr = memset(b, 0, 64);
  c[0] = a;
  setState_1(a, 3);
  var d:int = 1;
  loop L_b {
    if (d < 1) goto B_d;
    d = d + -1;
    if (d <= 15) goto B_c;
    goto B_a;
    label B_d:
    g_a = c + 64;
    return ;
    label B_c:
    b = c[d]:int;
    a = b << 4;
    if ((state(b) & 255) == 1) goto B_f;
    if ((state(b) & 255) != 3) goto B_e;
    label B_f:
    b = b + 1;
    label B_e:
    var e:int_ptr = a + 79992;
    var f:int = b << 4;
    var g:int = f - a;
    f = f + 79976;
    loop L_g {
      a = g;
      g = a + 16;
      f = f + 16;
      var h:int = state(b);
      b = b + 1;
      if ((h & 255) == 2) continue L_g;
    }
    loop L_h {
      if (eqz(a)) continue L_b;
      b = e[0];
      if (eqz(runtime_looksLikePointer(b) & 1)) goto B_i;
      b = b - 79992 >> 4;
      if (eqz(state(b) & 255)) goto B_i;
      b = findHead(b);
      if ((state(b) & 255) == 3) goto B_i;
      setState_1(b, 3);
      if (d != 16) goto B_j;
      0[79633]:byte = 1;
      d = 16;
      goto B_i;
      label B_j:
      if (d > 15) goto B_a;
      c[d]:int = b;
      d = d + 1;
      label B_i:
      a = a + -4;
      e = e + 4;
      continue L_h;
    }
  }
  label B_a:
  runtime_lookupPanic();
  unreachable;
}

function runtime_calculateHeapAddresses() {
  var a:int;
  0[19905]:int = (a = (a = 0[19873]:int) - (a - 79992 >> 6));
  0[19907]:int = a - 79992 >> 4;
}

function runtime_runtimePanic(a:int, b:int) {
  runtime_printstring(69923, 22);
  runtime_printstring(a, b);
  runtime_printnl();
  unreachable;
  unreachable;
}

function setState_1(a:int, b:int) {
  var c:int = 0[19905]:int + (a >> 2);
  c[0]:byte = c[0]:ubyte | b << (a << 1 & 6);
}

function runtime_printstring(a:ubyte_ptr, b:int) {
  b = select_if(b, 0, b > 0);
  loop L_b {
    if (eqz(b)) goto B_a;
    runtime_putchar(a[0]);
    a = a + 1;
    b = b + -1;
    continue L_b;
  }
  label B_a:
}

function runtime_printnl() {
  runtime_putchar(13);
  runtime_putchar(10);
}

function runtime_putchar(a:int) {
  var b:int;
  var c:int;
  var b:int;
  var b:int;
  b = 0[19874]:int;
  if (b <= 119) goto B_a;
  runtime_lookupPanic();
  unreachable;
  label B_a:
  0[19874]:int = (c = b + 1);
  (b + 79500)[0]:byte = a;
  if ((a & 255) == 10) goto B_c;
  if (b != 119) goto B_b;
  label B_c:
  d_4486P0GSn3Ix0MkPsW4wzVYJM0j9[31]:int = c;
  runtime_fd_write(1, 74888, 1, 79636);
  0[19874]:int = 0;
  label B_b:
}

function runtime_looksLikePointer(a:int):int {
  var b:int = 0;
  if (a < 79992) goto B_a;
  b = 0[19905]:int > a;
  label B_a:
  return b;
}

function findHead(a:int):int {
  var c:int;
  loop L_a {
    var b:int = state(a);
    c = a + -1;
    a = c;
    if ((b & 255) == 2) continue L_a;
  }
  return c + 1;
}

function runtime_printptr(a:int) {
  if (eqz(a)) goto B_a;
  runtime_putchar(48);
  runtime_putchar(120);
  var b:int = 8;
  loop L_c {
    if (eqz(b)) goto B_b;
    var c:int = a >> 28;
    runtime_putchar(select_if(c | 48, c + 87, c < 10));
    b = b + -1;
    a = a << 4;
    continue L_c;
  }
  label B_b:
  return ;
  label B_a:
  runtime_printstring(74087, 3);
}

function runtime_deadlock(a:int, b:int) {
  var c:int = g_a - 16;
  g_a = c;
  c[3]:int = 0;
  c[1]:long@4 = 2L;
  var d:int = 0[19911]:int;
  0[19911]:int = c;
  c[0]:int = d;
  var e:{ a:int, b:int, c:byte } = runtime_alloc(12);
  e.b = 6;
  e.a = 7;
  c[2]:int = e;
  b = setState(b, e);
  e.c = 0;
  0[19911]:int = d;
  c[3]:int = b;
  g_a = c + 16;
}

function runtime_deadlock_destroy(a:int) {
}

function runtime_deadlock_resume(a:int) {
  var b:{ a:int, b:int, c:int } = g_a - 16;
  g_a = b;
  b.b = 1;
  b.c = a;
  a = 0[19911]:int;
  0[19911]:int = b;
  b.a = a;
  runtime_panic(34, 69992);
  unreachable;
}

function runtime_printitf(a:int, b:int) {
  var e:int;
  var e:int;
  var f:int;
  var c:int = g_a - 144;
  g_a = c;
  c[35]:int = 0;
  c[33]:long@4 = 0L;
  c[31]:long@4 = 0L;
  c[29]:long@4 = 6L;
  var d:int = 0[19911]:int;
  0[19911]:int = c + 112;
  c[28]:int = d;
  if (a > 21) goto B_j;
  br_table[B_i, B_c, B_h, ..B_d](a + -2);
  label B_j:
  br_table[B_g, B_c, B_f, ..B_e](a + -22);
  label B_i:
  if (eqz(b & 1)) goto B_k;
  runtime_printstring(74159, 4);
  goto B_a;
  label B_k:
  runtime_printstring(74163, 5);
  goto B_a;
  label B_h:
  if (b > -1) goto B_l;
  runtime_putchar(45);
  b = 0 - b;
  label B_l:
  runtime_printuint64(i64_extend_i32_u(b));
  goto B_a;
  label B_g:
  runtime_printuint64(b[0]:long);
  goto B_a;
  label B_f:
  runtime_printptr(b);
  goto B_a;
  label B_e:
  if (a != 34) goto B_c;
  runtime_printstring(b[0]:int, b[1]:int);
  goto B_a;
  label B_d:
  if (a == 16) goto B_b;
  label B_c:
  e = error_typeassert(a) & 1;
  if (eqz(e)) goto B_m;
  Error(c + 8, select_if(b, 0, e), select_if(a, 0, e));
  (c + 120)[0]:int = (a = c[2]:int);
  runtime_printstring(a, c[3]:int);
  goto B_a;
  label B_m:
  if (a > 4068) goto B_p;
  if (a > 259) goto B_q;
  if (a == 88) goto B_o;
  if (a == 127) goto B_o;
  if (a != 223) goto B_n;
  goto B_o;
  label B_q:
  if (a == 260) goto B_o;
  if (a == 479) goto B_o;
  if (a != 2821) goto B_n;
  goto B_o;
  label B_p:
  if (a > 8324) goto B_r;
  if (a == 4069) goto B_o;
  if (a == 5231) goto B_o;
  if (a == 7141) goto B_o;
  goto B_n;
  label B_r:
  if (a == 8325) goto B_o;
  if (a == 167397) goto B_o;
  if (a != 15333) goto B_n;
  label B_o:
  if (a > 4068) goto B_y;
  f = 1;
  e = 69127;
  if (a > 259) goto B_z;
  if (a == 88) goto B_s;
  if (a == 127) goto B_v;
  if (a != 223) goto B_u;
  String_invoke_1(c + 64, b);
  f = c[17]:int;
  e = c[16]:int;
  goto B_s;
  label B_z:
  if (a == 260) goto B_x;
  if (a == 479) goto B_w;
  if (a != 2821) goto B_u;
  String(b);
  goto B_s;
  label B_y:
  if (a > 8324) goto B_ba;
  if (a == 4069) goto B_aa;
  if (a == 5231) goto B_t;
  if (a != 7141) goto B_u;
  String_3(c + 32, b);
  f = c[9]:int;
  e = c[8]:int;
  goto B_s;
  label B_ba:
  if (a == 8325) goto B_da;
  if (a == 15333) goto B_ca;
  if (a != 167397) goto B_u;
  String_4(c + 24, b);
  f = c[7]:int;
  e = c[6]:int;
  goto B_s;
  label B_da:
  String_5(c + 40, b);
  f = c[11]:int;
  e = c[10]:int;
  goto B_s;
  label B_ca:
  String_6(c + 48, b);
  f = c[13]:int;
  e = c[12]:int;
  goto B_s;
  label B_aa:
  String_2(c + 56, b);
  f = c[15]:int;
  e = c[14]:int;
  goto B_s;
  label B_x:
  String_invoke_2(c + 72, b);
  f = c[19]:int;
  e = c[18]:int;
  goto B_s;
  label B_w:
  String_invoke_3(c + 80, b);
  f = c[21]:int;
  e = c[20]:int;
  goto B_s;
  label B_v:
  String_invoke(c + 88, b);
  f = c[23]:int;
  e = c[22]:int;
  goto B_s;
  label B_u:
  runtime_nilPanic();
  unreachable;
  label B_t:
  String_invoke_4(c + 16, b);
  f = c[5]:int;
  e = c[4]:int;
  label B_s:
  (c + 124)[0]:int = e;
  runtime_printstring(e, f);
  goto B_a;
  label B_n:
  c[27]:int = b;
  c[26]:int = a;
  c[24]:int = a;
  c[25]:int = b;
  (c + 140)[0]:int = c + 104;
  (c + 136)[0]:int = c + 104;
  (c + 128)[0]:int = c + 104;
  (c + 132)[0]:int = c + 96;
  runtime_putchar(40);
  runtime_printuint64(i64_extend_i32_u(a));
  runtime_putchar(58);
  runtime_printptr(b);
  runtime_putchar(41);
  goto B_a;
  label B_b:
  runtime_printuint64(i64_extend_i32_u(b & 255));
  label B_a:
  0[19911]:int = d;
  g_a = c + 144;
}

function runtime_printuint64(a:long) {
  var e:long;
  var f:int;
  var b:long_ptr = g_a - 32;
  g_a = b;
  (b + 24)[0]:int = 0;
  (b + 16)[0]:long = 0L;
  b[1] = 0L;
  var c:ubyte_ptr = 19;
  var d:int = 19;
  loop L_a {
    if (d > -1) goto B_b;
    d = select_if(c, 20, c > 20) - c;
    c = b + 8 + c;
    loop L_d {
      if (eqz(d)) goto B_c;
      runtime_putchar(c[0]);
      c = c + 1;
      d = d + -1;
      continue L_d;
    }
    label B_c:
    g_a = b + 32;
    return ;
    label B_b:
    (b + 8 + d)[0]:byte = 
      (f = i32_wrap_i64(a - (e = a / 10L) * 10L) | 48);
    c = select_if(c, d, (f & 255) == 48);
    d = d + -1;
    a = e;
    continue L_a;
  }
}

function error_typeassert(a:int):int {
  var b:int = 1;
  if (a > 10212) goto B_c;
  if (a == 479) goto B_a;
  if (a == 8165) goto B_a;
  if (a != 9189) goto B_b;
  goto B_a;
  label B_c:
  if (a > 15332) goto B_d;
  if (a == 10213) goto B_a;
  if (a != 14309) goto B_b;
  goto B_a;
  label B_d:
  if (a == 16357) goto B_a;
  if (a == 15333) goto B_a;
  label B_b:
  b = 0;
  label B_a:
  return b;
}

function Error(a:{ a:int, b:int }, b:int, c:int) {
  var f:int;
  var f:int;
  var d:int = g_a - 224;
  g_a = d;
  d[16]:long = 94489280512L;
  d[27]:long = 0L;
  d[26]:long = 0L;
  d[25]:long = 0L;
  d[24]:long = 0L;
  d[23]:long = 0L;
  d[22]:long = 0L;
  d[21]:long = 0L;
  d[20]:long = 0L;
  d[19]:long = 0L;
  d[18]:long = 0L;
  d[17]:long = 0L;
  var e:int = 0[19911]:int;
  0[19911]:int = d + 128;
  d[32]:int = e;
  if (c > 10212) goto B_g;
  if (c == 479) goto B_b;
  if (c == 8165) goto B_f;
  if (c != 9189) goto B_a;
  if (eqz(b)) goto B_a;
  (d + 164)[0]:int = (c = b[0]:int);
  runtime_stringConcat(d + 56, 69172, 31, c, b[1]:int);
  (d + 168)[0]:int = (b = d[14]:int);
  runtime_stringConcat(d + 48, b, d[15]:int, 69203, 16);
  0[19911]:int = e;
  (d + 172)[0]:int = (b = d[12]:int);
  a.a = b;
  a.b = d[13]:int;
  g_a = d + 224;
  return ;
  label B_g:
  if (c > 15332) goto B_h;
  if (c == 10213) goto B_c;
  if (c != 14309) goto B_a;
  if (eqz(b)) goto B_a;
  (d + 220)[0]:int = (c = b[0]:int);
  0[19911]:int = e;
  a.b = b[1]:int;
  a.a = c;
  g_a = d + 224;
  return ;
  label B_h:
  if (c == 15333) goto B_e;
  if (c == 16357) goto B_d;
  goto B_a;
  label B_f:
  if (eqz(b)) goto B_a;
  (d + 136)[0]:int = (c = b[0]:int);
  runtime_stringConcat(d + 32, 70045, 20, c, b[1]:int);
  (d + 140)[0]:int = (c = d[8]:int);
  runtime_stringConcat(d + 24, c, d[9]:int, 70065, 4);
  (d + 144)[0]:int = (c = d[6]:int);
  f = d[7]:int;
  String_7(d + 16, b[2]:int);
  (d + 128 + 20)[0]:int = (b = d[4]:int);
  runtime_stringConcat(d + 8, c, f, b, d[5]:int);
  0[19911]:int = e;
  (d + 152)[0]:int = (b = d[2]:int);
  a.a = b;
  a.b = d[3]:int;
  g_a = d + 224;
  return ;
  label B_e:
  if (eqz(b)) goto B_a;
  (d + 156)[0]:int = (c = b[2]:int);
  Error_1(d + 40, b[0]:long, c);
  0[19911]:int = e;
  (d + 160)[0]:int = (b = d[10]:int);
  a.a = b;
  a.b = d[11]:int;
  g_a = d + 224;
  return ;
  label B_d:
  if (eqz(b)) goto B_a;
  (d + 176)[0]:int = (c = b[0]:int);
  runtime_stringConcat(d + 72, 69064, 30, c, b[1]:int);
  (d + 180)[0]:int = (b = d[18]:int);
  runtime_stringConcat(d + 64, b, d[19]:int, 69203, 16);
  0[19911]:int = e;
  (d + 184)[0]:int = (b = d[16]:int);
  a.a = b;
  a.b = d[17]:int;
  g_a = d + 224;
  return ;
  label B_c:
  if (eqz(b)) goto B_a;
  (d + 188)[0]:int = (c = b[0]:int);
  runtime_stringConcat(d + 112, c, b[1]:int, 70593, 1);
  (d + 192)[0]:int = (c = d[28]:int);
  (d + 196)[0]:int = (f = b[2]:int);
  runtime_stringConcat(d + 104, c, d[29]:int, f, b[3]:int);
  (d + 200)[0]:int = (c = d[26]:int);
  runtime_stringConcat(d + 96, c, d[27]:int, 70594, 2);
  (d + 204)[0]:int = (c = d[24]:int);
  (d + 208)[0]:int = (f = b[5]:int);
  var g:int = d[25]:int;
  Error(d + 88, f, b[4]:int);
  (d + 212)[0]:int = (b = d[22]:int);
  runtime_stringConcat(d + 80, c, g, b, d[23]:int);
  0[19911]:int = e;
  (d + 216)[0]:int = (b = d[20]:int);
  a.a = b;
  a.b = d[21]:int;
  g_a = d + 224;
  return ;
  label B_b:
  Error_1(d + 120, b[0]:long, b[2]:int);
  0[19911]:int = e;
  a.a = d[30]:int;
  a.b = d[31]:int;
  g_a = d + 224;
  return ;
  label B_a:
  runtime_nilPanic();
  unreachable;
}

function String_invoke_1(a:{ a:int, b:int }, b:{ a:long, b:int }) {
  var c:int_ptr = g_a - 16;
  g_a = c;
  String_8(c + 8, b.a, b.b);
  a.a = c[2];
  a.b = c[3];
  g_a = c + 16;
}

function String_3(a:{ a:int, b:int }, b:{ a:long, b:int }) {
  var e:int;
  var c:int = g_a - 32;
  g_a = c;
  c[5]:long@4 = 0L;
  c[3]:int = 3;
  c[4]:int = b;
  var d:int = 0[19911]:int;
  0[19911]:int = c + 8;
  c[2]:int = d;
  if (b) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  (c + 20)[0]:int = (e = b.b);
  String_8(c, b.a, e);
  0[19911]:int = d;
  (c + 24)[0]:int = (b = c[0]:int);
  a.a = b;
  a.b = c[1]:int;
  g_a = c + 32;
}

function String_4(a:{ a:int, b:int }, b:{ a:long, b:int }) {
  var e:int;
  var c:int = g_a - 32;
  g_a = c;
  c[7]:int = 0;
  c[5]:long@4 = 2L;
  var d:int = 0[19911]:int;
  0[19911]:int = c + 16;
  c[4]:int = d;
  if (b) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  (c + 24)[0]:int = (e = b.b);
  String_8(c + 8, b.a, e);
  0[19911]:int = d;
  (c + 28)[0]:int = (b = c[2]:int);
  a.a = b;
  a.b = c[3]:int;
  g_a = c + 32;
}

function String_5(a:{ a:int, b:int }, b:int_ptr) {
  var c:int_ptr = g_a - 32;
  g_a = c;
  c[7] = 0;
  c[5] = 2;
  c[6] = b;
  var d:int = 0[19911]:int;
  0[19911]:int = c + 16;
  c[4] = d;
  if (b) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  String_7(c + 8, b[0]);
  0[19911]:int = d;
  (c + 28)[0]:int = (b = c[2]);
  a.a = b;
  a.b = c[3];
  g_a = c + 32;
}

function String_6(a:{ a:int, b:int }, b:{ a:long, b:int }) {
  var e:int;
  var c:int = g_a - 32;
  g_a = c;
  c[7]:int = 0;
  c[5]:long@4 = 2L;
  var d:int = 0[19911]:int;
  0[19911]:int = c + 16;
  c[4]:int = d;
  if (b) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  (c + 24)[0]:int = (e = b.b);
  String_8(c + 8, b.a, e);
  0[19911]:int = d;
  (c + 28)[0]:int = (b = c[2]:int);
  a.a = b;
  a.b = c[3]:int;
  g_a = c + 32;
}

function String_invoke_2(a:{ a:int, b:int }, b:int) {
  var c:int_ptr = g_a - 16;
  g_a = c;
  String_7(c + 8, b);
  a.a = c[2];
  a.b = c[3];
  g_a = c + 16;
}

function String_invoke_3(a:{ a:int, b:int }, b:{ a:long, b:int }) {
  var e:int;
  var c:int = g_a - 48;
  g_a = c;
  c[9]:long@4 = 0L;
  c[7]:int = 3;
  var d:int = 0[19911]:int;
  0[19911]:int = c + 24;
  c[6]:int = d;
  c[9]:int = (e = b.b);
  c[8]:int = c + 8;
  var f:long = b.a;
  c[4]:int = 0;
  c[1]:long = 0L;
  String_8(c, f, e);
  0[19911]:int = d;
  c[10]:int = (b = c[0]:int);
  a.b = c[1]:int;
  a.a = b;
  g_a = c + 48;
}

function String_invoke_4(a:{ a:int, b:int }, b:{ a:long, b:int }) {
  var e:int;
  var c:int = g_a - 48;
  g_a = c;
  c[9]:long@4 = 0L;
  c[7]:int = 3;
  var d:int = 0[19911]:int;
  0[19911]:int = c + 24;
  c[6]:int = d;
  c[9]:int = (e = b.b);
  c[8]:int = c + 8;
  var f:long = b.a;
  c[4]:int = 0;
  c[1]:long = 0L;
  String_8(c, f, e);
  0[19911]:int = d;
  c[10]:int = (b = c[0]:int);
  a.b = c[1]:int;
  a.a = b;
  g_a = c + 48;
}

function runtime_hashmapHash(a:ubyte_ptr, b:int):int {
  var c:int = -2128831035;
  loop L_b {
    if (eqz(b)) goto B_a;
    b = b + -1;
    c = (c ^ a[0]) * 16777619;
    a = a + 1;
    continue L_b;
  }
  label B_a:
  return c;
}

function runtime_hashmapMake(a:int):int {
  var d:int;
  var b:int = g_a - 16;
  g_a = b;
  b[3]:int = 0;
  b[1]:long@4 = 2L;
  var c:int = 0[19911]:int;
  0[19911]:int = b;
  b[0]:int = c;
  b[2]:int = (d = runtime_alloc(((a & 255) << 4) + 88));
  var e:int = runtime_alloc(16);
  e[14]:byte = 1;
  e[13]:byte = a;
  e[12]:byte = 4;
  e[1]:int = d;
  0[19911]:int = c;
  b[3]:int = e;
  g_a = b + 16;
  return e;
}

function runtime_hashmapInsertIntoNewBucket(a:int, b:int, c:int, d:int):int {
  var g:byte_ptr;
  var h:int;
  var e:int = g_a - 16;
  g_a = e;
  e[3]:int = 0;
  e[1]:long@4 = 2L;
  var f:int = 0[19911]:int;
  0[19911]:int = e;
  e[0]:int = f;
  if (a) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  (e + 8)[0]:int = 
    (g = runtime_alloc((a[13]:ubyte + a[12]:ubyte << 3) + 12));
  (e + 12)[0]:int = g;
  a[2]:int = a[2]:int + 1;
  memcpy(g + 12, b, h = a[12]:ubyte);
  memcpy(g + (h << 3) + 12, c, a[13]:ubyte);
  0[19911]:int = f;
  g[0] = d;
  g_a = e + 16;
  return g;
}

function runtime_hashmapBinarySet(a:int, b:int, c:int) {
  var g:int;
  var aa:int;
  var ba:int;
  var ca:int;
  var d:int = g_a - 96;
  g_a = d;
  d[1]:long = 81604378624L;
  d[22]:int = 0;
  d[10]:long = 0L;
  d[9]:long = 0L;
  d[8]:long = 0L;
  d[7]:long = 0L;
  d[6]:long = 0L;
  d[5]:long = 0L;
  d[4]:long = 0L;
  d[3]:long = 0L;
  d[2]:long = 0L;
  var e:int = 0[19911]:int;
  0[19911]:int = d + 8;
  d[2]:int = e;
  if (eqz(a)) goto B_a;
  var f:int = runtime_hashmapHash(b, a[12]:ubyte);
  (d + 52)[0]:int = (g = a[1]:int);
  var h:int_ptr = f >> 24;
  var i:int = eqz(h) + h;
  if (g) goto B_c;
  (d + 56)[0]:int = 
    (f = runtime_hashmapInsertIntoNewBucket(a, b, c, i));
  (d + 60)[0]:int = f;
  a[1]:int = f;
  goto B_b;
  label B_c:
  (d + 64)[0]:int = (g = a[1]:int);
  f = g + 
      ((a[13]:ubyte + a[12]:ubyte << 3) + 12) * 
      (select_if(-1, -1 << (h = a[14]:ubyte) ^ -1, h > 31) & f);
  var j:int = 0;
  var k:int_ptr = d + 24;
  var l:int_ptr = d + 28;
  var m:int_ptr = d + 72;
  var n:int_ptr = d + 8 + 24;
  var o:int_ptr = d + 8 + 8;
  var p:int_ptr = d + 68;
  var q:int_ptr = d + 36;
  var r:int_ptr = d + 44;
  var s:int_ptr = d + 48;
  var t:int_ptr = d + 40;
  var u:int_ptr = d + 76;
  var v:int_ptr = d + 84;
  var w:int_ptr = d + 80;
  var x:int = i & 255;
  g = 0;
  var y:int = 0;
  var z:byte_ptr = 0;
  loop L_e {
    k[0] = y;
    l[0] = g;
    (d + 8 + 12)[0]:int = z;
    m[0] = (h = f);
    n[0] = j;
    o[0] = f;
    p[0] = h;
    q[0] = h;
    if (eqz(h)) goto B_d;
    f = 0;
    loop L_f {
      r[0] = y;
      s[0] = g;
      t[0] = z;
      if (f == 8) goto B_h;
      u[0] = (z = select_if(z, j = h + f, aa = g | j[0]:ubyte));
      v[0] = (g = select_if(g, ca = f * (ba = a[12]:ubyte) + h + 12, aa));
      w[0] = 
        (y = select_if(y, ba = (ba << 3) + f * a[13]:ubyte + h + 12, aa));
      if (j[0]:ubyte != x) goto B_g;
      if (eqz(runtime_memequal(b, ca, a[12]:ubyte) & 1)) goto B_g;
      memcpy(ba, c, a[13]:ubyte);
      goto B_b;
      label B_h:
      f = h[2];
      j = h;
      continue L_e;
      label B_g:
      f = f + 1;
      continue L_f;
    }
  }
  label B_d:
  if (g) goto B_i;
  if (eqz(j)) goto B_a;
  (d + 88)[0]:int = 
    (f = runtime_hashmapInsertIntoNewBucket(a, b, c, i));
  j[2]:int = f;
  goto B_b;
  label B_i:
  a[2]:int = a[2]:int + 1;
  memcpy(g, b, a[12]:ubyte);
  memcpy(y, c, a[13]:ubyte);
  if (eqz(z)) goto B_a;
  z[0] = i;
  label B_b:
  0[19911]:int = e;
  g_a = d + 96;
  return ;
  label B_a:
  runtime_nilPanic();
  unreachable;
}

function runtime_memequal(a:ubyte_ptr, b:ubyte_ptr, c:int):int {
  var d:int = 1;
  loop L_b {
    if (eqz(c)) goto B_a;
    c = c + -1;
    var e:int = b[0];
    var f:int = a[0];
    b = b + 1;
    a = a + 1;
    if (f == e) continue L_b;
  }
  d = 0;
  label B_a:
  return d;
}

function runtime_hashmapBinaryGet(a:int, b:int, c:int, d:int):int {
  var f:int_ptr;
  var i:int;
  if (eqz(a)) goto B_b;
  var e:int = runtime_hashmapHash(b, a[12]:ubyte);
  f = a[1]:int + 
      ((a[13]:ubyte + a[12]:ubyte << 3) + 12) * 
      (e & select_if(-1, -1 << (f = a[14]:ubyte) ^ -1, f > 31));
  e = e >> 24;
  var g:int = eqz(e) + e & 255;
  loop L_c {
    if (eqz(f)) goto B_a;
    e = 0;
    loop L_d {
      if (e == 8) goto B_f;
      if ((f + e)[0]:ubyte != g) goto B_e;
      var h:int = a[13]:ubyte;
      if (
        eqz(
          runtime_memequal(b, e * (i = a[12]:ubyte) + f + 12, a[12]:ubyte) & 1)) goto B_e;
      memcpy(c, (i << 3) + e * h + f + 12, a[13]:ubyte);
      return 1;
      label B_f:
      f = f[2];
      continue L_c;
      label B_e:
      e = e + 1;
      continue L_d;
    }
  }
  label B_b:
  runtime_nilPanic();
  unreachable;
  label B_a:
  memset(c, 0, a[13]:ubyte);
  return 0;
}

function runtime_slicePanic() {
  runtime_runtimePanic(70018, 18)
}

export function start() {
  var c:int;
  var d:long;
  var a:int = g_a - 304;
  g_a = a;
  a[25]:long = 98784247808L;
  a[74]:int = 0;
  a[36]:long = 0L;
  a[35]:long = 0L;
  a[34]:long = 0L;
  a[33]:long = 0L;
  a[32]:long = 0L;
  a[31]:long = 0L;
  a[30]:long = 0L;
  a[29]:long = 0L;
  a[28]:long = 0L;
  a[27]:long = 0L;
  a[26]:long = 0L;
  var b:int = 0[19911]:int;
  0[19911]:int = a + 200;
  a[50]:int = b;
  0[19873]:int = memory_size() << 16;
  runtime_calculateHeapAddresses();
  a[52]:int = (c = 0[19905]:int);
  a[53]:int = c;
  memset(c, 0, 0[19873]:int - c);
  0[19873]:int = memory_size() << 16;
  Get(a + 184, 9221120241336057861L, 0, 70501, 6);
  0[9956]:long = a[23]:long;
  0[19914]:int = (c = a[48]:int);
  a[54]:int = c;
  Get(a + 168, 9221120241336057861L, 0, 70507, 5);
  0[9958]:long = a[21]:long;
  0[19918]:int = (c = a[44]:int);
  a[55]:int = c;
  Get(a + 152, 9221120241336057861L, 0, 70512, 7);
  0[9961]:long = a[19]:long;
  0[19924]:int = (c = a[40]:int);
  a[56]:int = c;
  Get(a + 136, 9221120241336057861L, 0, 70519, 2);
  0[9963]:long = (d = a[17]:long);
  0[19928]:int = (c = a[36]:int);
  a[58]:int = c;
  a[57]:int = c;
  Get(a + 120, d, c, 70521, 9);
  0[9965]:long = a[15]:long;
  0[19932]:int = (c = a[32]:int);
  a[59]:int = c;
  Get(a + 104, 9221120241336057861L, 0, 70530, 10);
  0[9967]:long = a[13]:long;
  0[19936]:int = (c = a[28]:int);
  a[60]:int = c;
  a[61]:int = (c = 0[19932]:int);
  Get(a + 88, 0[9965]:long, c, 70540, 8);
  a[62]:int = (c = a[24]:int);
  Int_1(a[11]:long, c);
  a[63]:int = (c = 0[19932]:int);
  Get(a + 72, 0[9965]:long, c, 70548, 6);
  a[64]:int = (c = a[20]:int);
  Int_1(a[9]:long, c);
  a[65]:int = (c = 0[19932]:int);
  Get(a + 56, 0[9965]:long, c, 70554, 7);
  a[66]:int = (c = a[16]:int);
  Int_1(a[7]:long, c);
  a[67]:int = (c = 0[19932]:int);
  Get(a + 40, 0[9965]:long, c, 70561, 7);
  a[68]:int = (c = a[12]:int);
  Int_1(a[5]:long, c);
  a[69]:int = (c = 0[19932]:int);
  Get(a + 24, 0[9965]:long, c, 70568, 8);
  a[70]:int = (c = a[8]:int);
  Int_1(a[3]:long, c);
  a[71]:int = (c = 0[19932]:int);
  Get(a + 8, 0[9965]:long, c, 70576, 6);
  a[72]:int = (c = a[4]:int);
  Int_1(a[1]:long, c);
  0[19938]:int = (c = d_4486P0GSn3Ix0MkPsW4wzVYJM0j9[29]:int);
  a[73]:int = c;
  TestContextCreate(a);
  a[74]:int = (c = a[1]:int);
  var e:int = a[0]:int;
  if (eqz(e)) goto B_a;
  runtime_panic(e, c);
  unreachable;
  label B_a:
  0[79640]:byte = 1;
  runtime_scheduler();
  0[19911]:int = b;
  g_a = a + 304;
}

function Get(a:{ a:long, b:int }, b:long, c:{ a:int, b:int, c:int }, d:int, e:int) {
  var h:int;
  var f:int = g_a - 128;
  g_a = f;
  f[31]:int = 0;
  f[29]:long@4 = 0L;
  f[27]:long@4 = 0L;
  f[12]:long = 0L;
  f[21]:int = 10;
  f[2]:long = b;
  f[6]:int = c;
  f[26]:int = c;
  f[23]:int = c;
  var g:int = 0[19911]:int;
  0[19911]:int = f + 80;
  f[20]:int = g;
  f[22]:int = f + 16;
  h = Type_1(b, c);
  if ((h & -2) != 6) goto B_a;
  f[10]:int = 0;
  f[4]:long = 0L;
  f[6]:long = b;
  (f + 96)[0]:int = f + 32;
  syscall_js_valueGet(f + 56, f + 48, d, e, f, f);
  syscall_js_makeValue(f, f[7]:long);
  0[19911]:int = g;
  (f + 116)[0]:int = (g = f[2]:int);
  (f + 100)[0]:int = g;
  f[9]:long = 0L;
  (f + 112)[0]:int = f + 64;
  (f + 108)[0]:int = f + 64;
  f[8]:long = b;
  f[10]:int = g;
  f[4]:long = (b = f[0]:long);
  f[18]:int = c;
  a.b = g;
  a.a = b;
  g_a = f + 128;
  return ;
  label B_a:
  (f + 120)[0]:int = (c = runtime_alloc(12));
  (f + 124)[0]:int = c;
  c.c = h;
  c.b = 9;
  c.a = 70036;
  runtime_panic(8165, c);
  unreachable;
}

function Int_1(a:long, b:int):int {
  var e:double;
  var e:double;
  var e:double;
  var e:double;
  var e:double;
  var e:double;
  var g:int;
  var c:int = g_a - 80;
  g_a = c;
  c[18]:int = 0;
  c[16]:int = 0;
  c[7]:long = 0L;
  c[9]:int = 9;
  c[0]:long = a;
  c[2]:int = b;
  c[17]:int = b;
  c[13]:int = b;
  c[11]:int = b;
  var d:{ a:int, b:int, c:int } = 0[19911]:int;
  0[19911]:int = c + 32;
  c[8]:int = d;
  c[10]:int = c;
  c[12]:int = c + 16;
  c[3]:long = 0L;
  c[2]:long = a;
  c[6]:int = b;
  if (eqz(isNumber(a, b) & 1)) goto B_c;
  if (a != 9221120237041090561L) goto B_b;
  e = 0.0;
  goto B_a;
  label B_c:
  (c + 64)[0]:int = (d = runtime_alloc(12));
  (c + 72)[0]:int = d;
  d.c = Type_1(a, b);
  d.b = 9;
  d.a = 70253;
  runtime_panic(8165, d);
  unreachable;
  label B_b:
  (c + 56)[0]:int = (b = c + 16);
  (c + 60)[0]:int = b;
  e = f64_reinterpret_i64(a);
  label B_a:
  0[19911]:int = d;
  b = 
    select_if(0,
              select_if(2147483647, -2147483648, d = e >= -2147483648.0),
              e != e);
  var f:int = e <= 2147483647.0;
  if (eqz(abs(e) < 2147483648.0)) goto B_e;
  g = i32_trunc_f64_s(e);
  goto B_d;
  label B_e:
  g = -2147483648;
  label B_d:
  g_a = c + 80;
  return select_if(select_if(g, b, f), b, d);
}

export function TestContextCreate(a:{ a:int, b:int }) {
  var d:int;
  var e:int_ptr;
  var f:int;
  var b:int = g_a - 176;
  g_a = b;
  b[43]:int = 0;
  b[41]:long@4 = 0L;
  b[39]:long@4 = 0L;
  b[37]:long@4 = 0L;
  b[35]:long@4 = 8L;
  var c:int = 0[19911]:int;
  0[19911]:int = b + 136;
  b[34]:int = c;
  ContextCreate(b + 24, 769);
  b[37]:int = (d = b[8]:int);
  b[36]:int = (e = b[6]:int);
  f = b[7]:int;
  if (f) goto B_a;
  b[12]:int = e;
  b[5]:long = 0L;
  (b + 136 + 16)[0]:int = b + 40;
  ContextClone(b + 8, e);
  (b + 136 + 24)[0]:int = (d = b[4]:int);
  (b + 156)[0]:int = b[2]:int;
  f = b[3]:int;
  if (eqz(f)) goto B_b;
  e = b + 40;
  loop L_c {
    if (eqz(e)) goto B_a;
    var g:int = e[1];
    ContextDestroy(e[2]);
    e = g;
    continue L_c;
  }
  label B_b:
  (b + 72 + 8)[0]:long = 0L;
  (b + 72 + 16)[0]:long = 0L;
  (b + 72 + 24)[0]:long = 0L;
  b[9]:long = 0L;
  (b + 168)[0]:int = b + 72;
  (b + 164)[0]:int = b + 56;
  (b + 172)[0]:int = b + 104;
  (b + 104 + 24)[0]:long = 0L;
  (b + 104 + 16)[0]:long = 0L;
  (b + 104 + 8)[0]:long = 0L;
  b[13]:long = 0L;
  io_ReadFull(b);
  unreachable;
  label B_a:
  0[19911]:int = c;
  a.b = d;
  a.a = f;
  g_a = b + 176;
}

function runtime_scheduler() {
  var h:int_ptr;
  var i:int;
  var a:int = g_a - 32;
  g_a = a;
  a[5]:long@4 = 0L;
  a[3]:long@4 = 0L;
  a[1]:long@4 = 5L;
  var b:int = 0[19911]:int;
  0[19911]:int = a;
  a[0]:int = b;
  var c:int_ptr = a + 20;
  var d:int_ptr = a + 8;
  var e:int_ptr = a + 12;
  var f:int_ptr = a + 16;
  var g:int_ptr = a + 24;
  loop L_b {
    if (0[79640]:ubyte) goto B_a;
    c[0] = (h = 0[19996]:int);
    d[0] = h;
    if (eqz(h)) goto B_a;
    0[19996]:int = (i = h[0]);
    e[0] = i;
    f[0] = (i = 0[19997]:int);
    if (i != h) goto B_c;
    0[19997]:int = 0;
    label B_c:
    h[0] = 0;
    g[0] = (h = h[4]);
    call_indirect(h, h[0]);
    continue L_b;
  }
  label B_a:
  0[19911]:int = b;
  g_a = a + 32;
}

export function resume() {
  var a:int = g_a - 16;
  g_a = a;
  a[3]:int = 0;
  a[1]:long@4 = 2L;
  var b:int = 0[19911]:int;
  0[19911]:int = a;
  a[0]:int = b;
  var c:int_ptr = runtime_alloc(24);
  c[4] = 74760;
  a[2]:int = c;
  a[3]:int = c;
  runtime_resume_1(a, c);
  runtime_scheduler();
  0[19911]:int = b;
  g_a = a + 16;
}

function runtime_resume_1(a:int, b:int) {
  var f:int;
  var c:int = g_a - 16;
  g_a = c;
  c[3]:int = 0;
  c[1]:long@4 = 2L;
  var d:int = 0[19911]:int;
  0[19911]:int = c;
  c[0]:int = d;
  var e:{ a:int, b:int, c:int, d:int, e:byte } = runtime_alloc(20);
  e.c = b;
  e.b = 8;
  e.a = 9;
  c[2]:int = e;
  e.d = (f = setState(b, e));
  c[3]:int = f;
  syscall_js_handleEvent(0, b);
  0[19911]:int = d;
  e.e = 0;
  g_a = c + 16;
}

function runtime_resume_1_destroy(a:int) {
}

function runtime_resume_1_resume(a:int_ptr) {
  returnTo(a[2], a[3])
}

function syscall_js_handleEvent(a:int, b:int_ptr) {
  var f:{ a:long, b:int }
  var h:int;
  var j:long;
  var i:int;
  var c:int = g_a - 240;
  g_a = c;
  c[18]:long = 90194313216L;
  c[58]:int = 0;
  c[28]:long = 0L;
  c[27]:long = 0L;
  c[26]:long = 0L;
  c[25]:long = 0L;
  c[24]:long = 0L;
  c[23]:long = 0L;
  c[22]:long = 0L;
  c[21]:long = 0L;
  c[20]:long = 0L;
  c[19]:long = 0L;
  var d:int = 0[19911]:int;
  0[19911]:int = c + 144;
  c[36]:int = d;
  var e:int = runtime_alloc(80);
  e[14]:int = b;
  e[1]:int = 10;
  e[0]:int = 11;
  c[38]:int = e;
  e[15]:int = (f = setState(b, e));
  c[39]:int = f;
  c[14]:int = 0;
  c[6]:long = 0L;
  c[40]:int = c + 48;
  Get(c + 32, 9221120241336057862L, 0, 70389, 13);
  var g:long = c[4]:long;
  e[16]:int = (h = c[10]:int);
  e[5]:long = g;
  c[56]:int = h;
  c[42]:int = h;
  c[41]:int = h;
  c[14]:int = h;
  c[6]:long = g;
  c[43]:int = c + 128;
  if (g != 9221120237041090562L) goto B_d;
  returnTo(b, f);
  goto B_c;
  label B_d:
  (c + 176)[0]:int = (f = runtime_alloc(16));
  (c + 180)[0]:int = f;
  f.a = 9221120237041090562L;
  f.b = 0;
  (c + 208)[0]:int = c + 128;
  (c + 204)[0]:int = c + 128;
  (c + 220)[0]:int = c + 112;
  (c + 216)[0]:int = c + 112;
  (c + 196)[0]:int = c + 80;
  (c + 184)[0]:int = c + 64;
  c[18]:int = 0;
  c[8]:long = 9221120241336057862L;
  i = Type_1(9221120241336057862L, 0);
  if ((i & -2) != 6) goto B_b;
  c[22]:int = 0;
  c[10]:long = 0L;
  syscall_js_ValueOf(c + 16, 223, f);
  (c + 212)[0]:int = (f = c[6]:int);
  (c + 200)[0]:int = f;
  c[13]:long = 9221120241336057862L;
  c[22]:int = f;
  c[10]:long = (j = c[2]:long);
  c[12]:long = j;
  syscall_js_valueSet(c + 104, 70389, 13, c + 96, c, c);
  Get(c, g, h, 70402, 2);
  (c + 228)[0]:int = (h = c[2]:int);
  e[17]:int = (h = Int_1(c[0]:long, h));
  if (h) goto B_e;
  runtime_deadlock(c, b);
  e[72]:byte = 0;
  goto B_c;
  label B_e:
  if (eqz(0[79680]:ubyte)) goto B_g;
  if (eqz(b)) goto B_a;
  h = 0[19921]:int;
  0[19921]:int = b;
  (c + 232)[0]:int = h;
  b[0] = h;
  goto B_f;
  label B_g:
  0[79680]:byte = 1;
  runtime_runqueuePushBack(b);
  label B_f:
  e[72]:byte = 1;
  label B_c:
  0[19911]:int = d;
  g_a = c + 240;
  return ;
  label B_b:
  (c + 188)[0]:int = (e = runtime_alloc(12));
  (c + 192)[0]:int = e;
  e[2]:int = i;
  e[1]:int = 9;
  e[0]:int = 70230;
  runtime_panic(8165, e);
  unreachable;
  label B_a:
  runtime_nilPanic();
  unreachable;
}

export function go_scheduler() {
  runtime_scheduler()
}

function runtime_sliceAppend(a:{ a:int, b:int, c:int }, b:int, c:int, d:int, e:int, f:int) {
  var j:int;
  var i:int;
  var j:int;
  var j:int;
  var j:int;
  var i:int;
  var j:int;
  var g:int = g_a - 16;
  g_a = g;
  g[3]:int = 0;
  g[1]:long@4 = 2L;
  var h:int = 0[19911]:int;
  0[19911]:int = g;
  g[0]:int = h;
  if (eqz(f)) goto B_a;
  i = f + d;
  if (i > e) goto B_c;
  j = b;
  goto B_b;
  label B_c:
  e = e << 1;
  j = select_if(e, 1, e);
  loop L_d {
    e = j;
    j = e << 1;
    if (i > e) continue L_d;
  }
  (g + 8)[0]:int = (j = runtime_alloc(e));
  if (eqz(d)) goto B_b;
  memcpy(j, b, d);
  label B_b:
  (g + 12)[0]:int = j;
  memmove(j + d, c, f);
  0[19911]:int = h;
  a.c = e;
  a.b = i;
  a.a = j;
  g_a = g + 16;
  return ;
  label B_a:
  0[19911]:int = h;
  a.c = e;
  a.b = d;
  a.a = b;
  g_a = g + 16;
}

function runtime_stringConcat(a:{ a:int, b:int }, b:int, c:int, d:int, e:int) {
  var h:int;
  var i:int;
  var f:int = g_a - 64;
  g_a = f;
  f[7]:long = 0L;
  f[6]:long = 0L;
  f[9]:int = 6;
  f[2]:int = b;
  f[3]:int = c;
  f[4]:int = d;
  f[5]:int = e;
  var g:int = 0[19911]:int;
  0[19911]:int = f + 32;
  f[8]:int = g;
  f[10]:int = f + 8;
  f[11]:int = f + 16;
  if (c) goto B_a;
  0[19911]:int = g;
  a.b = e;
  a.a = d;
  g_a = f + 64;
  return ;
  label B_a:
  if (eqz(e)) goto B_b;
  (f + 56)[0]:int = (i = runtime_alloc(h = e + c));
  (f + 60)[0]:int = i;
  (f + 48)[0]:int = i;
  b = memcpy(i, b, c);
  memcpy(b + c, d, e);
  0[19911]:int = g;
  f[3]:long = 0L;
  (f + 52)[0]:int = f + 24;
  a.b = h;
  a.a = b;
  g_a = f + 64;
  return ;
  label B_b:
  0[19911]:int = g;
  a.b = c;
  a.a = b;
  g_a = f + 64;
}

function runtime_stringFromBytes(a:{ a:int, b:int }, b:int, c:int, d:int) {
  var g:int;
  var e:int = g_a - 64;
  g_a = e;
  e[13]:long@4 = 0L;
  e[11]:long@4 = 0L;
  e[9]:int = 5;
  e[4]:int = 0;
  e[1]:long = 0L;
  var f:int = 0[19911]:int;
  0[19911]:int = e + 32;
  e[8]:int = f;
  e[10]:int = e + 8;
  e[13]:int = (g = runtime_alloc(c));
  e[14]:int = g;
  e[11]:int = g;
  g = memcpy(g, b, c);
  0[19911]:int = f;
  e[3]:long = 0L;
  e[12]:int = e + 24;
  a.b = c;
  a.a = g;
  g_a = e + 64;
}

function Type_1(a:long, b:int):int {
  var f:long;
  var c:int = g_a - 32;
  g_a = c;
  var d:int = 0;
  c[7]:int = 0;
  c[5]:int = 2;
  c[0]:long = a;
  c[2]:int = b;
  var e:int = 0[19911]:int;
  0[19911]:int = c + 16;
  c[4]:int = e;
  c[6]:int = c;
  f = a + -9221120237041090562L;
  if (f <= 2L) goto B_f;
  if (eqz(a)) goto B_a;
  (c + 28)[0]:int = b;
  d = 3;
  if (isNumber(a, b) & 1) goto B_a;
  a = (a >> 32L & 7L) + -1L;
  if (a > 3L) goto B_b;
  d = 6;
  br_table[B_a, B_e, B_d, B_c, ..B_a](i32_wrap_i64(a));
  label B_f:
  br_table[B_h, B_g, B_g, ..B_h](i32_wrap_i64(f))
  label B_h:
  d = 1;
  goto B_a;
  label B_g:
  d = 2;
  goto B_a;
  label B_e:
  d = 4;
  goto B_a;
  label B_d:
  d = 5;
  goto B_a;
  label B_c:
  d = 7;
  goto B_a;
  label B_b:
  runtime_panic(34, 70368);
  unreachable;
  label B_a:
  0[19911]:int = e;
  g_a = c + 32;
  return d;
}

function syscall_js_makeValue(a:{ a:long, b:int }, b:long) {
  var c:int = g_a - 48;
  g_a = c;
  c[9]:long@4 = 0L;
  c[7]:long@4 = 0L;
  c[5]:long@4 = 5L;
  var d:int = 0[19911]:int;
  0[19911]:int = c + 16;
  c[4]:int = d;
  var e:long_ptr = 0;
  if ((b & 9221120237041090560L) != 9221120237041090560L) goto B_a;
  e = 0;
  if (eqz(b & 30064771072L)) goto B_a;
  (c + 16 + 8)[0]:int = (e = runtime_alloc(8));
  (c + 28)[0]:int = e;
  e[0] = b;
  label B_a:
  0[19911]:int = d;
  (c + 32)[0]:int = e;
  (c + 40)[0]:int = e;
  c[2]:int = 0;
  c[0]:long = 0L;
  (c + 36)[0]:int = c;
  a.b = e;
  a.a = b;
  g_a = c + 48;
}

function isNumber(a:long, b:int):int {
  var c:{ a:long, b:int } = g_a - 16;
  c.b = b;
  c.a = a;
  b = 1;
  if (a + -9221120237041090560L < 2L) goto B_b;
  if (a != 0L) goto B_a;
  b = 0;
  label B_b:
  return b;
  label B_a:
  return (a & 9221120237041090560L) != 9221120237041090560L;
}

function String_7(a:{ a:int, b:int }, b:int) {
  var c:int = 9;
  var d:int = 70069;
  br_table[B_b, B_i, B_h, B_g, B_f, B_e, B_d, B_c, ..B_a](b)
  label B_i:
  c = 4;
  d = 70078;
  goto B_b;
  label B_h:
  c = 7;
  d = 70082;
  goto B_b;
  label B_g:
  c = 6;
  d = 70089;
  goto B_b;
  label B_f:
  c = 6;
  d = 70095;
  goto B_b;
  label B_e:
  c = 6;
  d = 70101;
  goto B_b;
  label B_d:
  c = 6;
  d = 70107;
  goto B_b;
  label B_c:
  c = 8;
  d = 70113;
  label B_b:
  a.a = d;
  a.b = c;
  return ;
  label B_a:
  runtime_panic(34, 70184);
  unreachable;
}

function String_8(a:{ a:int, b:int }, b:long, c:int) {
  var d:int = g_a - 128;
  g_a = d;
  d[27]:long@4 = 0L;
  d[23]:long@4 = 0L;
  d[21]:long@4 = 0L;
  d[31]:int = 0;
  d[29]:long@4 = 0L;
  d[25]:long@4 = 0L;
  d[19]:int = 12;
  d[7]:long = b;
  d[16]:int = c;
  var e:int = 0[19911]:int;
  0[19911]:int = d + 72;
  d[18]:int = e;
  d[28]:int = c;
  d[24]:int = c;
  d[22]:int = c;
  d[21]:int = c;
  d[20]:int = d + 56;
  var f:int = 11;
  var g:int = 70153;
  br_table[B_b, B_h, B_g, B_f, B_i, B_e, B_d, B_c, ..B_a](Type_1(b, c))
  label B_i:
  syscall_js_jsString(d, b, c);
  0[19911]:int = e;
  (d + 92)[0]:int = (c = d[0]:int);
  a.a = c;
  a.b = d[1]:int;
  g_a = d + 128;
  return ;
  label B_h:
  f = 6;
  g = 70121;
  goto B_b;
  label B_g:
  syscall_js_jsString(d + 24, b, c);
  (d + 100)[0]:int = (c = d[6]:int);
  runtime_stringConcat(d + 16, 70164, 10, c, d[7]:int);
  (d + 104)[0]:int = (c = d[4]:int);
  runtime_stringConcat(d + 8, c, d[5]:int, 70183, 1);
  0[19911]:int = e;
  (d + 108)[0]:int = (c = d[2]:int);
  a.a = c;
  a.b = d[3]:int;
  g_a = d + 128;
  return ;
  label B_f:
  syscall_js_jsString(d + 48, b, c);
  (d + 116)[0]:int = (c = d[12]:int);
  runtime_stringConcat(d + 40, 70174, 9, c, d[13]:int);
  (d + 120)[0]:int = (c = d[10]:int);
  runtime_stringConcat(d + 32, c, d[11]:int, 70183, 1);
  0[19911]:int = e;
  (d + 124)[0]:int = (c = d[8]:int);
  a.a = c;
  a.b = d[9]:int;
  g_a = d + 128;
  return ;
  label B_e:
  f = 8;
  g = 70127;
  goto B_b;
  label B_d:
  f = 8;
  g = 70135;
  goto B_b;
  label B_c:
  f = 10;
  g = 70143;
  label B_b:
  0[19911]:int = e;
  a.b = f;
  a.a = g;
  g_a = d + 128;
  return ;
  label B_a:
  runtime_panic(34, 70184);
  unreachable;
}

function syscall_js_jsString(a:{ a:int, b:int }, b:long, c:int) {
  var f:int;
  var d:int = g_a - 112;
  g_a = d;
  d[27]:int = 0;
  d[25]:long@4 = 0L;
  d[23]:long@4 = 0L;
  d[21]:int = 6;
  d[3]:long = b;
  d[8]:int = c;
  d[5]:long = b;
  var e:int = 0[19911]:int;
  0[19911]:int = d + 80;
  d[20]:int = e;
  d[22]:int = d + 24;
  syscall_js_valuePrepareString(d + 8, d + 40, d, d);
  d[9]:long = 0L;
  d[23]:int = c;
  d[8]:long = b;
  d[18]:int = c;
  c = d[4]:int;
  d[25]:int = d + 64;
  d[24]:int = d + 64;
  if (c > -1) goto B_a;
  runtime_slicePanic();
  unreachable;
  label B_a:
  b = d[1]:long;
  (d + 104)[0]:int = (f = runtime_alloc(c));
  d[6]:long = b;
  syscall_js_valueLoadString(d + 48, f, c, c, d, d);
  d[7]:long = b;
  syscall_js_finalizeRef(d + 56, d, d);
  runtime_stringFromBytes(d, f, c, c);
  0[19911]:int = e;
  (d + 108)[0]:int = (c = d[0]:int);
  a.a = c;
  a.b = d[1]:int;
  g_a = d + 112;
}

function syscall_js_ValueOf(a:{ a:long, b:int }, b:int, c:int) {
  var f:long;
  var f:long;
  var f:long;
  var f:long;
  var f:long;
  var f:long;
  var f:long;
  var f:long;
  var f:long;
  var d:int = g_a - 320;
  g_a = d;
  d[28]:long = 90194313216L;
  d[78]:int = 0;
  d[38]:long = 0L;
  d[37]:long = 0L;
  d[36]:long = 0L;
  d[35]:long = 0L;
  d[34]:long = 0L;
  d[33]:long = 0L;
  d[32]:long = 0L;
  d[31]:long = 0L;
  d[30]:long = 0L;
  d[29]:long = 0L;
  var e:int = 0[19911]:int;
  0[19911]:int = d + 224;
  d[56]:int = e;
  if (b > 5230) goto B_j;
  br_table[B_d, B_b, B_c, ..B_k](b)
  label B_k:
  if (b == 223) goto B_i;
  if (b != 479) goto B_b;
  (d + 280)[0]:int = (b = c[2]:int);
  (d + 276)[0]:int = d + 208;
  f = c[0]:long;
  d[54]:int = 0;
  d[26]:long = 0L;
  JSValue(d + 168, f, b);
  (d + 284)[0]:int = (b = d[44]:int);
  f = d[21]:long;
  goto B_e;
  label B_j:
  if (b > 15332) goto B_l;
  if (b == 5231) goto B_h;
  if (b != 7141) goto B_b;
  if (eqz(c)) goto B_a;
  (d + 260)[0]:int = (b = c[2]:int);
  JSValue(d + 136, c[0]:long, b);
  (d + 264)[0]:int = (b = d[36]:int);
  f = d[17]:long;
  goto B_e;
  label B_l:
  if (b == 15333) goto B_f;
  if (b != 167397) goto B_b;
  if (c) goto B_g;
  goto B_a;
  label B_i:
  0[19911]:int = e;
  (d + 236)[0]:int = (b = c[2]:int);
  d[48]:int = 0;
  d[23]:long = 0L;
  (d + 232)[0]:int = d + 184;
  f = c[0]:long;
  a.b = b;
  a.a = f;
  g_a = d + 320;
  return ;
  label B_h:
  (d + 244)[0]:int = (b = c[2]:int);
  (d + 240)[0]:int = d + 208;
  f = c[0]:long;
  d[54]:int = 0;
  d[26]:long = 0L;
  JSValue(d + 104, f, b);
  (d + 248)[0]:int = (b = d[28]:int);
  f = d[13]:long;
  goto B_e;
  label B_g:
  (d + 252)[0]:int = (b = c[2]:int);
  JSValue(d + 120, c[0]:long, b);
  (d + 256)[0]:int = (b = d[32]:int);
  f = d[15]:long;
  goto B_e;
  label B_f:
  if (eqz(c)) goto B_a;
  (d + 268)[0]:int = (b = c[2]:int);
  JSValue(d + 152, c[0]:long, b);
  (d + 272)[0]:int = (b = d[40]:int);
  f = d[19]:long;
  label B_e:
  0[19911]:int = e;
  (d + 288)[0]:int = b;
  a.b = b;
  a.a = f;
  g_a = d + 320;
  return ;
  label B_d:
  0[19911]:int = e;
  a.b = 0;
  a.a = 9221120237041090562L;
  g_a = d + 320;
  return ;
  label B_c:
  0[19911]:int = e;
  a.b = 0;
  a.a = select_if(9221120237041090563L, 9221120237041090564L, c & 1);
  g_a = d + 320;
  return ;
  label B_b:
  if (b > 33) goto B_s;
  br_table[B_q, B_m, B_p, ..B_t](b + -22)
  label B_t:
  if (b == 4) goto B_r;
  if (b != 16) goto B_m;
  syscall_js_floatValue(d + 24, f64_convert_i32_u(c & 255));
  0[19911]:int = e;
  (d + 296)[0]:int = (b = d[8]:int);
  f = d[3]:long;
  a.b = b;
  a.a = f;
  g_a = d + 320;
  return ;
  label B_s:
  br_table[B_n, B_m, B_o, ..B_m](b + -34);
  label B_r:
  syscall_js_floatValue(d + 8, f64_convert_i32_s(c));
  0[19911]:int = e;
  (d + 292)[0]:int = (b = d[4]:int);
  f = d[1]:long;
  a.b = b;
  a.a = f;
  g_a = d + 320;
  return ;
  label B_q:
  syscall_js_floatValue(d + 40, f64_convert_i64_u(c[0]:long));
  0[19911]:int = e;
  (d + 300)[0]:int = (b = d[12]:int);
  f = d[5]:long;
  a.b = b;
  a.a = f;
  g_a = d + 320;
  return ;
  label B_p:
  syscall_js_floatValue(d + 56, f64_convert_i32_u(c));
  0[19911]:int = e;
  (d + 304)[0]:int = (b = d[16]:int);
  f = d[7]:long;
  a.b = b;
  a.a = f;
  g_a = d + 320;
  return ;
  label B_o:
  syscall_js_floatValue(d + 72, f64_convert_i32_u(c));
  0[19911]:int = e;
  (d + 308)[0]:int = (b = d[20]:int);
  f = d[9]:long;
  a.b = b;
  a.a = f;
  g_a = d + 320;
  return ;
  label B_n:
  syscall_js_stringVal(d + 200, c[0]:int, c[1]:int, d, d);
  syscall_js_makeValue(d + 88, d[25]:long);
  0[19911]:int = e;
  (d + 312)[0]:int = (b = d[24]:int);
  f = d[11]:long;
  a.b = b;
  a.a = f;
  g_a = d + 320;
  return ;
  label B_m:
  runtime_panic(34, 70200);
  unreachable;
  label B_a:
  runtime_nilPanic();
  unreachable;
}

function JSValue(a:{ a:long, b:int }, b:long, c:int) {
  var d:{ a:long, b:int } = g_a - 16;
  d.b = 0;
  d.a = 0L;
  a.b = c;
  a.a = b;
}

function syscall_js_floatValue(a:int, b:double) {
  var c:int = g_a - 32;
  c[3]:double = b;
  if (b == 0.0) goto B_b;
  if (b != b) goto B_a;
  c[4]:int = 0;
  c[1]:long = 0L;
  a[2]:int = 0;
  a[0]:double = b;
  return ;
  label B_b:
  a[2]:int = 0;
  a[0]:long = 9221120237041090561L;
  return ;
  label B_a:
  a[2]:int = 0;
  a[0]:long = 9221120237041090560L;
}

function Error_1(a:{ a:int, b:int }, b:long, c:int) {
  var d:int = g_a - 80;
  g_a = d;
  d[18]:int = 0;
  d[8]:long = 0L;
  d[13]:int = 5;
  d[10]:int = 0;
  d[4]:long = 0L;
  d[15]:int = c;
  var e:int = 0[19911]:int;
  0[19911]:int = d + 48;
  d[12]:int = e;
  d[14]:int = d + 32;
  Get(d + 16, b, c, 70273, 7);
  d[16]:int = (c = d[6]:int);
  String_8(d + 8, d[2]:long, c);
  d[17]:int = (c = d[2]:int);
  runtime_stringConcat(d, 70280, 18, c, d[3]:int);
  0[19911]:int = e;
  d[18]:int = (c = d[0]:int);
  a.a = c;
  a.b = d[1]:int;
  g_a = d + 80;
}

function syscall_js_handleEvent_destroy(a:int) {
}

function syscall_js_handleEvent_resume(a:int) {
  var e:int;
  var e:int;
  var f:long_ptr;
  var e:int;
  var e:int;
  var d:int;
  var e:int;
  var d:int;
  var g:long;
  var e:int;
  var d:int;
  var e:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var f:long_ptr;
  var f:long_ptr;
  var f:long_ptr;
  var d:int;
  var d:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var g:long;
  var d:int;
  var f:long_ptr;
  var i:int_ptr;
  var d:int;
  var d:int;
  var i:int_ptr;
  var f:long_ptr;
  var h:long;
  var g:long;
  var f:long_ptr;
  var g:long;
  var d:int;
  var e:int;
  var g:long;
  var e:int;
  var g:long;
  var e:int;
  var h:long;
  var e:int;
  var e:int;
  var g:long;
  var e:int;
  var h:long;
  var d:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var b:int = g_a - 544;
  g_a = b;
  b[64]:long = 0L;
  b[63]:long = 0L;
  b[62]:long = 0L;
  b[61]:long = 0L;
  b[60]:long = 0L;
  b[59]:long = 0L;
  b[58]:long = 0L;
  b[57]:long = 0L;
  b[56]:long = 0L;
  b[55]:long = 0L;
  b[54]:long = 0L;
  b[53]:long = 0L;
  b[52]:long = 0L;
  b[51]:long = 0L;
  b[50]:long = 0L;
  b[49]:long = 0L;
  b[48]:long = 0L;
  b[47]:long = 0L;
  b[46]:long = 0L;
  b[45]:long = 0L;
  b[44]:long = 0L;
  b[43]:long = 0L;
  b[42]:long = 0L;
  b[41]:long = 0L;
  b[40]:long = 0L;
  b[39]:long = 0L;
  b[38]:long = 0L;
  b[37]:long = 0L;
  b[36]:long = 0L;
  b[35]:long = 0L;
  b[34]:long = 0L;
  b[33]:long = 287762808832L;
  b[134]:int = 0;
  b[66]:long = 0L;
  b[65]:long = 0L;
  b[69]:int = a;
  b[68]:int = a;
  var c:int_ptr = 0[19911]:int;
  0[19911]:int = b + 264;
  b[66]:int = c;
  if (eqz(a[72]:ubyte)) goto B_d;
  b[58]:int = a[17]:int;
  d = runtime_hashmapBinaryGet(78864, b + 232, b + 248, 8);
  if (eqz(0[79680]:ubyte)) goto B_b;
  (b + 292)[0]:int = (e = 0[19921]:int);
  (b + 288)[0]:int = e;
  (b + 284)[0]:int = e;
  if (e) goto B_c;
  0[79680]:byte = 0;
  goto B_a;
  label B_d:
  runtime_panic(34, 70408);
  unreachable;
  label B_c:
  0[19921]:int = (f = e[0]:int);
  (b + 280)[0]:int = f;
  e[0]:int = 0;
  runtime_runqueuePushBack(e);
  goto B_a;
  label B_b:
  runtime_panic(34, 69616);
  unreachable;
  label B_a:
  if (eqz(d & 1)) goto B_e;
  a[3]:long = 0L;
  (b + 312)[0]:int = (e = a[16]:int);
  (b + 300)[0]:int = e;
  d = a + 32;
  d[0]:int = 0;
  (b + 264 + 32)[0]:int = a + 24;
  Get(b + 32, g = a[5]:long, e, 70416, 4);
  (b + 308)[0]:int = a + 8;
  (b + 352)[0]:int = (c = b[10]:int);
  (b + 304)[0]:int = c;
  h = b[4]:long;
  d[0]:int = c;
  a[3]:long = h;
  c = a + 16;
  c[0] = 0;
  a[1]:long = 0L;
  Get(b + 16, g, e, 70420, 4);
  (b + 520)[0]:int = (d = b[6]:int);
  (b + 500)[0]:int = d;
  (b + 492)[0]:int = d;
  (b + 340)[0]:int = d;
  (b + 328)[0]:int = d;
  (b + 320)[0]:int = d;
  (b + 316)[0]:int = d;
  g = b[2]:long;
  c[0] = d;
  a[1]:long = g;
  (b + 348)[0]:int = b + 232;
  (b + 344)[0]:int = b + 232;
  (b + 324)[0]:int = b + 248;
  b[64]:int = d;
  b[31]:long = g;
  a = Type_1(g, d);
  if ((a & -2) != 6) goto B_h;
  b[24]:long = g;
  f = syscall_js_valueLength(b + 192, b, b);
  if (f < 0) goto B_f;
  (b + 488)[0]:int = (e = runtime_alloc(f << 4));
  (b + 528)[0]:int = b + 192;
  (b + 524)[0]:int = b + 192;
  (b + 512)[0]:int = b + 232;
  (b + 496)[0]:int = b + 248;
  i = b + 536;
  var j:int_ptr = b + 532;
  var k:int_ptr = b + 516;
  c = 0;
  loop L_i {
    if (f != c) goto B_j;
    runtime_nilPanic();
    unreachable;
    label B_j:
    b[64]:int = d;
    b[31]:long = g;
    a = Type_1(g, d);
    if ((a & -2) != 6) goto B_g;
    b[60]:int = 0;
    b[29]:long = 0L;
    b[22]:long = g;
    syscall_js_valueIndex(b + 208, b + 176, c, b, b);
    syscall_js_makeValue(b, b[26]:long);
    i[0] = (a = b[2]:int);
    j[0] = a;
    k[0] = a;
    b[60]:int = a;
    h = b[0]:long;
    e[2]:int = a;
    e[0]:long = h;
    e = e + 16;
    c = c + 1;
    continue L_i;
  }
  label B_h:
  (b + 332)[0]:int = (e = runtime_alloc(12));
  (b + 336)[0]:int = e;
  e[2]:int = a;
  e[1]:int = 14;
  e[0]:int = 70239;
  runtime_panic(8165, e);
  unreachable;
  label B_g:
  (b + 504)[0]:int = (e = runtime_alloc(12));
  (b + 508)[0]:int = e;
  e[2]:int = a;
  e[1]:int = 11;
  e[0]:int = 70262;
  runtime_panic(8165, e);
  unreachable;
  label B_f:
  runtime_slicePanic();
  unreachable;
  label B_e:
  Get(b + 160, 9221120241336057861L, 0, 70424, 7);
  g = b[20]:long;
  e = b[42]:int;
  a[6]:long = 34L;
  (b + 360)[0]:int = a + 48;
  (b + 420)[0]:int = e;
  (b + 416)[0]:int = e;
  (b + 396)[0]:int = e;
  (b + 356)[0]:int = e;
  (a + 52)[0]:int = 70432;
  (b + 404)[0]:int = b + 192;
  (b + 400)[0]:int = b + 192;
  (b + 412)[0]:int = b + 208;
  (b + 408)[0]:int = b + 208;
  (b + 452)[0]:int = b + 232;
  (b + 364)[0]:int = b + 248;
  b[64]:int = e;
  b[31]:long = g;
  (b + 376)[0]:int = b + 176;
  (b + 368)[0]:int = (d = runtime_alloc(16));
  (b + 388)[0]:int = d;
  (b + 372)[0]:int = (f = runtime_alloc(8));
  (b + 392)[0]:int = f;
  b[46]:int = 0;
  b[22]:long = 0L;
  syscall_js_ValueOf(b + 144, 34, 70432);
  (b + 384)[0]:int = (i = b[38]:int);
  (b + 380)[0]:int = i;
  d[0]:long = (h = b[18]:long);
  d[2]:int = i;
  f[0] = h;
  b[28]:long = g;
  syscall_js_valueCall(b + 128, b + 224, 70440, 5, f, 1, 1, b, b);
  b[25]:long = 0L;
  b[24]:long = g;
  b[52]:int = d;
  b[53]:long@4 = 4294967297L;
  b[50]:int = e;
  h = b[16]:long;
  if (b[136]:ubyte) goto B_l;
  c = Type_1(g, e);
  if ((c & -2) != 6) goto B_m;
  Get(b + 112, g, e, 70440, 5);
  (b + 424)[0]:int = (a = b[30]:int);
  a = Type_1(b[14]:long, a);
  if (a != 7) goto B_k;
  b[60]:int = 0;
  b[29]:long = 0L;
  syscall_js_makeValue(b + 64, h);
  (b + 460)[0]:int = (e = b[18]:int);
  (b + 456)[0]:int = e;
  b[60]:int = e;
  b[29]:long = (g = b[8]:long);
  (b + 464)[0]:int = (a = runtime_alloc(16));
  (b + 468)[0]:int = a;
  a[0]:long = g;
  a[2]:int = e;
  runtime_panic(479, a);
  unreachable;
  label B_m:
  (b + 472)[0]:int = (a = runtime_alloc(12));
  (b + 476)[0]:int = a;
  a[2]:int = c;
  a[1]:int = 10;
  a[0]:int = 70355;
  runtime_panic(8165, a);
  unreachable;
  label B_l:
  e = a[14]:int;
  a = a[15]:int;
  syscall_js_makeValue(b + 48, h);
  (b + 484)[0]:int = (d = b[14]:int);
  (b + 480)[0]:int = d;
  returnTo(e, a);
  0[19911]:int = c;
  g_a = b + 544;
  return ;
  label B_k:
  runtime_stringConcat(b + 104, 70298, 33, 70440, 5);
  (b + 428)[0]:int = (e = b[26]:int);
  runtime_stringConcat(b + 96, e, b[27]:int, 70331, 24);
  (b + 432)[0]:int = (e = b[24]:int);
  c = b[25]:int;
  String_7(b + 88, a);
  (b + 436)[0]:int = (a = b[22]:int);
  runtime_stringConcat(b + 80, e, c, a, b[23]:int);
  (b + 440)[0]:int = (e = b[20]:int);
  c = b[21]:int;
  (b + 444)[0]:int = (a = runtime_alloc(8));
  (b + 448)[0]:int = a;
  a[1]:int = c;
  a[0]:int = e;
  runtime_panic(34, a);
  unreachable;
}

function Write(a:int, b:int, c:int, d:int) {
  if ((b + -1 & 255) > 1) goto B_a;
  b = 0;
  var e:int = select_if(d, 0, d > 0);
  loop L_b {
    if (e == b) goto B_d;
    if (d != b) goto B_c;
    runtime_lookupPanic();
    unreachable;
    label B_d:
    a[1]:long@4 = 0L;
    a[0]:int = d;
    return ;
    label B_c:
    runtime_putchar((c + b)[0]:ubyte);
    b = b + 1;
    continue L_b;
  }
  label B_a:
  a[2]:int = 78880;
  a[0]:long = 61456687038464L;
}

function Write_1(a:{ a:int, b:int, c:int }, b:{ a:int, b:int, c:int }, c:int, d:int) {
  var g:int;
  var h:int;
  var e:int = g_a - 96;
  g_a = e;
  e[23]:int = 0;
  e[21]:long@4 = 0L;
  e[19]:long@4 = 0L;
  e[17]:long@4 = 0L;
  e[15]:long@4 = 8L;
  var f:int = 0[19911]:int;
  0[19911]:int = e + 56;
  e[14]:int = f;
  if (eqz(b)) goto B_a;
  (e + 84)[0]:int = (g = b.b);
  (e + 80)[0]:int = g;
  h = b.a;
  if (h == 336) goto B_d;
  if (h == 11237) goto B_c;
  if (h != 10757) goto B_a;
  if (eqz(g)) goto B_a;
  Write(e + 8, g[0]:ubyte, c, d);
  (e + 88)[0]:int = (d = e[4]:int);
  c = e[3]:int;
  h = e[2]:int;
  goto B_b;
  label B_d:
  Write(e + 40, g, c, d);
  d = e[12]:int;
  c = e[11]:int;
  h = e[10]:int;
  goto B_b;
  label B_c:
  Write_1(e + 24, g, c, d);
  d = e[8]:int;
  c = e[7]:int;
  h = e[6]:int;
  label B_b:
  (e + 92)[0]:int = d;
  if (c) goto B_f;
  g = d;
  goto B_e;
  label B_f:
  (e + 64)[0]:int = (g = runtime_alloc(24));
  (e + 72)[0]:int = g;
  g[5]:int = d;
  g[4]:int = c;
  g[1]:int = 5;
  g[0]:int = 70596;
  (e + 56 + 12)[0]:int = (c = b.c);
  g[3]:int = (b + 12)[0]:int;
  g[2]:int = c;
  c = 10213;
  label B_e:
  0[19911]:int = f;
  (e + 76)[0]:int = g;
  a.c = g;
  a.b = c;
  a.a = h;
  g_a = e + 96;
  return ;
  label B_a:
  runtime_nilPanic();
  unreachable;
}

function strconv_appendQuotedWith(a:{ a:int, b:int, c:int }, b:int, c:int, d:int, e:int) {
  var f:int = g_a - 192;
  g_a = f;
  f[15]:long = 68719476736L;
  f[23]:long = 0L;
  f[22]:long = 0L;
  f[21]:long = 0L;
  f[20]:long = 0L;
  f[19]:long = 0L;
  f[18]:long = 0L;
  f[17]:long = 0L;
  f[16]:long = 0L;
  var g:int = 0[19911]:int;
  0[19911]:int = f + 120;
  f[30]:int = g;
  var h:int = 68;
  var i:int = 0;
  if (d < 69) goto B_b;
  i = 0;
  h = d + 2;
  if (h < 0) goto B_a;
  (f + 188)[0]:int = (b = runtime_alloc(h));
  label B_b:
  (f + 128)[0]:int = b;
  f[29]:int = 0;
  f[116]:byte = 34;
  (f + 132)[0]:int = f + 116;
  runtime_sliceAppend(f + 88, b, f + 116, i, h, 1);
  (f + 136)[0]:int = (b = f[22]:int);
  (f + 160)[0]:int = f + 104;
  (f + 152)[0]:int = f + 108;
  var j:int = f[24]:int;
  var k:int = f[23]:int;
  var l:int_ptr = f + 144;
  var m:int_ptr = f + 140;
  var n:int_ptr = f + 148;
  var o:int_ptr = f + 156;
  var p:int_ptr = f + 168;
  var q:int_ptr = f + 164;
  var r:int_ptr = f + 176;
  var s:int_ptr = f + 172;
  loop L_c {
    l[0] = b;
    m[0] = c;
    if (d > 0) goto B_d;
    f[28]:int = 0;
    (f + 180)[0]:int = f + 112;
    f[112]:byte = 34;
    runtime_sliceAppend(f + 72, b, f + 112, k, j, 1);
    0[19911]:int = g;
    (f + 184)[0]:int = (c = f[18]:int);
    a.c = f[20]:int;
    a.a = c;
    a.b = f[19]:int;
    g_a = f + 192;
    return ;
    label B_d:
    h = c[0]:byte;
    if (h < 0) goto B_g;
    i = h & 255;
    h = 1;
    goto B_f;
    label B_g:
    unicode_utf8_DecodeRuneInString(f + 64, c, d);
    i = f[16]:int;
    h = f[17]:int;
    if (h != 1) goto B_f;
    if (i != 65533) goto B_f;
    runtime_sliceAppend(f + 32, b, 73502, k, j, 2);
    n[0] = (b = f[8]:int);
    h = c[0]:ubyte;
    f[27]:int = 0;
    f[108]:byte = ((h >> 4) + 74015)[0]:ubyte;
    h = 1;
    runtime_sliceAppend(f + 16, b, f + 108, f[9]:int, f[10]:int, 1);
    o[0] = (b = f[4]:int);
    i = c[0]:ubyte;
    f[26]:int = 0;
    f[104]:byte = ((i & 15) + 74015)[0]:ubyte;
    runtime_sliceAppend(f, b, f + 104, f[5]:int, f[6]:int, 1);
    p[0] = (b = f[0]:int);
    q[0] = b;
    j = f[2]:int;
    k = f[1]:int;
    goto B_e;
    label B_f:
    strconv_appendEscapedRune(f + 48, b, k, j, i, 34, e);
    r[0] = (b = f[12]:int);
    s[0] = b;
    if (d < h) goto B_a;
    j = f[14]:int;
    k = f[13]:int;
    label B_e:
    d = d - h;
    c = c + h;
    continue L_c;
  }
  label B_a:
  runtime_slicePanic();
  unreachable;
}

function strconv_appendEscapedRune(a:{ a:int, b:int, c:int }, b:int, c:int, d:int, e:int, f:int_ptr, g:int_ptr) {
  var j:int_ptr;
  var h:int = g_a - 448;
  g_a = h;
  h[40]:long = 124554051584L;
  h[41]:long = 0L;
  h[110]:int = 0;
  h[54]:long = 0L;
  h[53]:long = 0L;
  h[52]:long = 0L;
  h[51]:long = 0L;
  h[50]:long = 0L;
  h[49]:long = 0L;
  h[48]:long = 0L;
  h[47]:long = 0L;
  h[46]:long = 0L;
  h[45]:long = 0L;
  h[44]:long = 0L;
  h[43]:long = 0L;
  h[42]:long = 0L;
  h[79]:int = 0;
  var i:int = 0[19911]:int;
  0[19911]:int = h + 320;
  h[80]:int = i;
  h[82]:int = h + 316;
  if (e == 92) goto B_c;
  if ((f & 255) == e) goto B_c;
  if (eqz(g & 1)) goto B_d;
  if (e > 127) goto B_a;
  if (strconv_IsPrint(e) & 1) goto B_b;
  goto B_a;
  label B_d:
  if (eqz(strconv_IsPrint(e) & 1)) goto B_a;
  runtime_sliceAppend(h + 272,
                      b,
                      h + 316,
                      c,
                      d,
                      unicode_utf8_EncodeRune(h + 316, 4, e));
  0[19911]:int = i;
  (h + 440)[0]:int = (e = h[68]:int);
  a.c = h[70]:int;
  a.a = e;
  a.b = h[69]:int;
  g_a = h + 448;
  return ;
  label B_c:
  h[78]:int = 0;
  (h + 332)[0]:int = h + 312;
  h[312]:byte = 92;
  runtime_sliceAppend(h + 16, b, h + 312, c, d, 1);
  (h + 336)[0]:int = (b = h[4]:int);
  h[77]:int = 0;
  (h + 340)[0]:int = h + 308;
  h[308]:byte = e;
  runtime_sliceAppend(h, b, h + 308, h[5]:int, h[6]:int, 1);
  0[19911]:int = i;
  (h + 344)[0]:int = (e = h[0]:int);
  a.c = h[2]:int;
  a.a = e;
  a.b = h[1]:int;
  g_a = h + 448;
  return ;
  label B_b:
  h[76]:int = 0;
  (h + 348)[0]:int = h + 304;
  h[304]:byte = e;
  runtime_sliceAppend(h + 32, b, h + 304, c, d, 1);
  0[19911]:int = i;
  (h + 352)[0]:int = (e = h[8]:int);
  a.c = h[10]:int;
  a.a = e;
  a.b = h[9]:int;
  g_a = h + 448;
  return ;
  label B_a:
  br_table[B_m, B_l, B_h, B_j, B_g, B_k, B_i, ..B_f](e + -7)
  label B_m:
  runtime_sliceAppend(h + 160, b, 73488, c, d, 2);
  (h + 356)[0]:int = (b = h[40]:int);
  c = h[42]:int;
  d = h[41]:int;
  goto B_e;
  label B_l:
  runtime_sliceAppend(h + 176, b, 73490, c, d, 2);
  (h + 364)[0]:int = (b = h[44]:int);
  c = h[46]:int;
  d = h[45]:int;
  goto B_e;
  label B_k:
  runtime_sliceAppend(h + 192, b, 73492, c, d, 2);
  (h + 368)[0]:int = (b = h[48]:int);
  c = h[50]:int;
  d = h[49]:int;
  goto B_e;
  label B_j:
  runtime_sliceAppend(h + 208, b, 73494, c, d, 2);
  (h + 372)[0]:int = (b = h[52]:int);
  c = h[54]:int;
  d = h[53]:int;
  goto B_e;
  label B_i:
  runtime_sliceAppend(h + 224, b, 73496, c, d, 2);
  (h + 376)[0]:int = (b = h[56]:int);
  c = h[58]:int;
  d = h[57]:int;
  goto B_e;
  label B_h:
  runtime_sliceAppend(h + 240, b, 73498, c, d, 2);
  (h + 380)[0]:int = (b = h[60]:int);
  c = h[62]:int;
  d = h[61]:int;
  goto B_e;
  label B_g:
  runtime_sliceAppend(h + 256, b, 73500, c, d, 2);
  (h + 384)[0]:int = (b = h[64]:int);
  c = h[66]:int;
  d = h[65]:int;
  goto B_e;
  label B_f:
  if (e > 31) goto B_n;
  runtime_sliceAppend(h + 80, b, 73502, c, d, 2);
  (h + 388)[0]:int = (b = h[20]:int);
  h[75]:int = 0;
  (h + 392)[0]:int = h + 300;
  h[300]:byte = ((e >> 4 & 15) + 74015)[0]:ubyte;
  runtime_sliceAppend(h + 64, b, h + 300, h[21]:int, h[22]:int, 1);
  (h + 396)[0]:int = (b = h[16]:int);
  h[74]:int = 0;
  (h + 400)[0]:int = h + 296;
  h[296]:byte = ((e & 15) + 74015)[0]:ubyte;
  runtime_sliceAppend(h + 48, b, h + 296, h[17]:int, h[18]:int, 1);
  (h + 404)[0]:int = (b = h[12]:int);
  c = h[14]:int;
  d = h[13]:int;
  goto B_e;
  label B_n:
  g = 65533;
  if (e >= 1114112) goto B_o;
  if (e >= 65536) goto B_p;
  g = e;
  goto B_o;
  label B_p:
  runtime_sliceAppend(h + 144, b, 73506, c, d, 2);
  (h + 424)[0]:int = (b = h[36]:int);
  (h + 432)[0]:int = h + 288;
  f = 28;
  c = h[38]:int;
  d = h[37]:int;
  g = h + 428;
  j = h + 436;
  loop L_q {
    g[0] = b;
    if (f < 0) goto B_e;
    h[72]:int = 0;
    h[288]:byte = ((e >> select_if(f, 31, f < 31) & 15) + 74015)[0]:ubyte;
    runtime_sliceAppend(h + 128, b, h + 288, d, c, 1);
    j[0] = (b = h[32]:int);
    f = f + -4;
    c = h[34]:int;
    d = h[33]:int;
    continue L_q;
  }
  label B_o:
  runtime_sliceAppend(h + 112, b, 73504, c, d, 2);
  (h + 408)[0]:int = (b = h[28]:int);
  (h + 416)[0]:int = h + 292;
  e = 12;
  c = h[30]:int;
  d = h[29]:int;
  f = h + 412;
  j = h + 420;
  loop L_r {
    f[0] = b;
    if (e < 0) goto B_e;
    h[73]:int = 0;
    h[292]:byte = ((g >> select_if(e, 31, e < 31) & 15) + 74015)[0]:ubyte;
    runtime_sliceAppend(h + 96, b, h + 292, d, c, 1);
    j[0] = (b = h[24]:int);
    e = e + -4;
    c = h[26]:int;
    d = h[25]:int;
    continue L_r;
  }
  label B_e:
  0[19911]:int = i;
  (h + 360)[0]:int = b;
  a.c = c;
  a.b = d;
  a.a = b;
  g_a = h + 448;
}

function strconv_IsPrint(a:int):int {
  var b:int;
  var c:int;
  var b:int;
  var c:int;
  var c:int;
  var d:int;
  var d:int;
  var c:int;
  var d:int;
  var e:int;
  var b:int;
  var d:int;
  var c:int;
  var c:int;
  var d:int;
  var d:int;
  var c:int;
  var c:int;
  var c:int;
  var c:int;
  var c:int;
  var b:int;
  if (a > 255) goto B_c;
  b = 1;
  if (a + -32 <= 94) goto B_b;
  b = 0;
  if (a < 161) goto B_b;
  return a != 173;
  label B_c:
  if (a > 65535) goto B_d;
  b = 0;
  c = strconv_bsearch16(75668, 434, a);
  if (c > 433) goto B_b;
  d = c & -2;
  if (d > 433) goto B_a;
  if (((d << 1) + 75668)[0]:ushort > (a & 65535)) goto B_b;
  c = c | 1;
  if (c > 433) goto B_a;
  if (((c << 1) + 75668)[0]:ushort < (a & 65535)) goto B_b;
  b = 1;
  c = strconv_bsearch16(76536, 132, a);
  if (c > 131) goto B_b;
  return ((c << 1) + 76536)[0]:ushort != (a & 65535);
  label B_d:
  c = 0;
  b = 468;
  loop L_f {
    if (b <= c) goto B_e;
    d = (b - c) / 2 + c;
    if (d >= 468) goto B_a;
    c = select_if(d + 1, c, e = ((d << 2) + 76800)[0]:int < a);
    b = select_if(b, d, e);
    continue L_f;
  }
  label B_e:
  b = 0;
  if (c > 467) goto B_b;
  d = c & -2;
  if (d > 467) goto B_a;
  if (((d << 2) + 76800)[0]:int > a) goto B_b;
  c = c | 1;
  if (c > 467) goto B_a;
  if (((c << 2) + 76800)[0]:int < a) goto B_b;
  b = 1;
  if (a > 131071) goto B_b;
  c = strconv_bsearch16(78672, 95, a);
  if (c > 94) goto B_b;
  b = ((c << 1) + 78672)[0]:ushort != (a & 65535);
  label B_b:
  return b;
  label B_a:
  runtime_lookupPanic();
  return unreachable;
}

function strconv_bsearch16(a:int, b:int, c:int):int {
  var g:int;
  var d:int = 0;
  var e:int = c & 65535;
  c = b;
  loop L_c {
    if (c <= d) goto B_b;
    var f:int = (c - d) / 2 + d;
    if (f >= b) goto B_a;
    c = select_if(c, f, g = a[f]:ushort < e);
    d = select_if(f + 1, d, g);
    continue L_c;
  }
  label B_b:
  return d;
  label B_a:
  runtime_lookupPanic();
  return unreachable;
}

function Shift(a:int_ptr, b:int) {
  if (a) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  if (eqz(a[200])) goto B_b;
  if (b < 1) goto B_c;
  loop L_e {
    if (b < 29) goto B_d;
    strconv_leftShift(a, 28);
    b = b + -28;
    continue L_e;
  }
  label B_d:
  strconv_leftShift(a, b);
  return ;
  label B_c:
  if (b > -1) goto B_b;
  loop L_g {
    if (b > -29) goto B_f;
    strconv_rightShift(a, 28);
    b = b + 28;
    continue L_g;
  }
  label B_f:
  strconv_rightShift(a, 0 - b);
  return ;
  label B_b:
}

function strconv_leftShift(a:int, b:int) {
  var j:ubyte_ptr;
  var k:ubyte_ptr;
  var k:ubyte_ptr;
  var j:ubyte_ptr;
  var j:ubyte_ptr;
  var k:ubyte_ptr;
  var j:ubyte_ptr;
  var f:int;
  var j:ubyte_ptr;
  var f:int;
  var f:int;
  var j:ubyte_ptr;
  var h:int;
  var h:int;
  var f:int;
  var f:int;
  var k:ubyte_ptr;
  var k:ubyte_ptr;
  var k:ubyte_ptr;
  var j:ubyte_ptr;
  var j:ubyte_ptr;
  var j:ubyte_ptr;
  var f:int;
  var f:int;
  var f:int;
  var g:int;
  var g:int;
  var k:ubyte_ptr;
  var f:int;
  if (a) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  var c:int = a[200]:int;
  if (c >= 801) goto B_d;
  var d:int = (b * 12 + 74912)[0]:int;
  var e:int = 0;
  f = b * 12;
  g = (f + 74920)[0]:int;
  h = select_if(g, 0, g > 0);
  var i:int = (f + 74916)[0]:int;
  f = 0;
  loop L_f {
    if (h == f) goto B_e;
    if (c != f) goto B_g;
    e = -1;
    goto B_e;
    label B_g:
    if (g == f) goto B_b;
    j = a + f;
    k = i + f;
    f = f + 1;
    j = j[0];
    if ((j & 255) == (k = k[0])) continue L_f;
  }
  e = select_if(-1, 0, (j & 255) < k);
  label B_e:
  f = a[200]:int;
  k = f + -1;
  h = e + d;
  f = h + f + -1;
  j = 0;
  goto B_c;
  label B_d:
  runtime_slicePanic();
  unreachable;
  label B_c:
  loop L_h {
    if (k > -1) goto B_i;
    loop L_j {
      if (eqz(j)) goto B_l;
      k = j / 10;
      j = k * -10 + j;
      if (f < 800) goto B_n;
      if (j) goto B_m;
      goto B_k;
      label B_n:
      if (f >= 800) goto B_b;
      (a + f)[0]:byte = j + 48;
      goto B_k;
      label B_m:
      a[809]:byte = 1;
      goto B_k;
      label B_l:
      a[201]:int = a[201]:int + h;
      a[200]:int = select_if(f = a[200]:int + h, 800, f < 800);
      strconv_trim(a);
      return ;
      label B_k:
      f = f + -1;
      j = k;
      continue L_j;
    }
    label B_i:
    if (k >= 800) goto B_b;
    j = ((a + k)[0]:ubyte + -48 << b) + j;
    g = j + (j = j / 10) * -10;
    if (f > 799) goto B_p;
    if (f >= 800) goto B_b;
    (a + f)[0]:byte = g + 48;
    goto B_o;
    label B_p:
    if (eqz(g)) goto B_o;
    a[809]:byte = 1;
    label B_o:
    k = k + -1;
    f = f + -1;
    continue L_h;
  }
  label B_b:
  runtime_lookupPanic();
  unreachable;
}

function strconv_rightShift(a:int, b:int) {
  var f:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var f:int;
  var e:int;
  var g:int;
  var e:int;
  var e:int;
  var h:int;
  var e:int;
  var e:int;
  var f:int;
  var e:int;
  var c:int = 0;
  var d:int = 0;
  loop L_e {
    if (d >> b) goto B_d;
    if (eqz(a)) goto B_c;
    if (c < a[200]:int) goto B_f;
    if (eqz(d)) goto B_g;
    loop L_h {
      if (d >> b) goto B_d;
      c = c + 1;
      d = d * 10;
      continue L_h;
    }
    label B_g:
    a[200]:int = 0;
    return ;
    label B_f:
    if (c == 800) goto B_a;
    d = d * 10 + (a + c)[0]:ubyte + -48;
    c = c + 1;
    continue L_e;
  }
  label B_d:
  if (eqz(a)) goto B_c;
  a[201]:int = a[201]:int - c + 1;
  e = 0;
  g = select_if(0, f = 800 - c, f > 800);
  h = a + c;
  f = -1 << b ^ -1;
  goto B_b;
  label B_c:
  runtime_nilPanic();
  unreachable;
  label B_b:
  loop L_i {
    if (c + e < a[200]:int) goto B_j;
    loop L_l {
      if (eqz(d)) goto B_k;
      c = d >> b;
      if (e < 800) goto B_n;
      if (eqz(c)) goto B_m;
      a[809]:byte = 1;
      goto B_m;
      label B_n:
      if (e >= 800) goto B_a;
      (a + e)[0]:byte = c + 48;
      e = e + 1;
      label B_m:
      d = (d & f) * 10;
      continue L_l;
    }
    label B_k:
    a[200]:int = e;
    strconv_trim(a);
    return ;
    label B_j:
    if (g == e) goto B_a;
    if (e == 800) goto B_a;
    var i:int = (h + e)[0]:ubyte;
    (a + e)[0]:byte = (d >> b) + 48;
    d = i + (d & f) * 10 + -48;
    e = e + 1;
    continue L_i;
  }
  label B_a:
  runtime_lookupPanic();
  unreachable;
}

function strconv_trim(a:int_ptr) {
  if (eqz(a)) goto B_b;
  var b:int = a + -1;
  var c:int = a[200];
  loop L_e {
    if (c <= 0) goto B_d;
    var d:int = c + -1;
    if (d >= 800) goto B_a;
    if ((b + c)[0]:ubyte != 48) goto B_c;
    a[200] = d;
    c = d;
    continue L_e;
  }
  label B_d:
  if (c) goto B_c;
  a[201] = 0;
  label B_c:
  return ;
  label B_b:
  runtime_nilPanic();
  unreachable;
  label B_a:
  runtime_lookupPanic();
  unreachable;
}

function strconv_formatBits(a:int, b:int, c:int, d:int, e:long, f:int) {
  var m:int;
  var m:int;
  var n:int;
  var n:int;
  var p:byte_ptr;
  var m:int;
  var o:byte_ptr;
  var n:int;
  var p:byte_ptr;
  var m:int;
  var n:int;
  var o:byte_ptr;
  var n:int;
  var n:int;
  var o:byte_ptr;
  var m:int;
  var m:int;
  var n:int;
  var n:int;
  var o:byte_ptr;
  var p:byte_ptr;
  var n:int;
  var n:int;
  var n:int;
  var n:int;
  var n:int;
  var n:int;
  var n:int;
  var g:int_ptr = g_a - 96;
  g_a = g;
  g[23] = 0;
  g[21] = 2;
  var h:int = 0[19911]:int;
  0[19911]:int = g + 80;
  g[20] = h;
  g[22] = g + 12;
  memset(g + 12, 0, 68);
  e = select_if(0L - e, e, f & 1);
  var i:int = g + 12 + -2;
  var j:int = 65;
  loop L_c {
    if (e < 1000000000L) goto B_b;
    var k:int = i + j;
    var l:long = e / 1000000000L;
    m = i32_wrap_i64(l * -1000000000L + e);
    n = 0;
    loop L_e {
      if (n == -8) goto B_d;
      o = m / 100;
      p = j + n;
      if (p + -1 > 64) goto B_a;
      var q:byte_ptr = k + n;
      (q + 1)[0]:byte = (((m = m - o * 100 << 1) | 1) + 73508)[0]:ubyte;
      if (p + -2 >= 65) goto B_a;
      q[0] = (m + 73508)[0]:ubyte;
      n = n + -2;
      m = o;
      continue L_e;
    }
    label B_d:
    j = j + n + -1;
    if (j > 64) goto B_a;
    m = m << 1 | 1;
    if (m >= 200) goto B_a;
    (k + n + 1)[0]:byte = (m + 73508)[0]:ubyte;
    e = l;
    continue L_c;
  }
  label B_b:
  n = j + -1;
  m = i32_wrap_i64(e);
  loop L_g {
    if (m < 100) goto B_f;
    o = m / 100;
    if (n > 64) goto B_a;
    p = g + 12 + n;
    p[0] = (((m = m - o * 100 << 1) | 1) + 73508)[0]:ubyte;
    if (n + -1 >= 65) goto B_a;
    (p + -1)[0]:byte = (m + 73508)[0]:ubyte;
    n = n + -2;
    m = o;
    continue L_g;
  }
  label B_f:
  if (n > 64) goto B_a;
  o = g + 12 + n;
  o[0] = (((p = m << 1) | 1) + 73508)[0]:ubyte;
  if (m <= 9) goto B_h;
  n = n + -1;
  if (n > 64) goto B_a;
  (o + -1)[0]:byte = (p + 73508)[0]:ubyte;
  label B_h:
  if (eqz(f & 1)) goto B_i;
  n = n + -1;
  if (n > 64) goto B_a;
  (g + 12 + n)[0]:byte = 45;
  label B_i:
  runtime_sliceAppend(g, b, g + 12 + n, c, d, 65 - n);
  0[19911]:int = h;
  (g + 92)[0]:int = (n = g[0]);
  a[2]:int = g[2];
  a[0]:int = n;
  n = g[1];
  a[3]:long@4 = 0L;
  a[1]:int = n;
  g_a = g + 96;
  return ;
  label B_a:
  runtime_lookupPanic();
  unreachable;
}

function strconv_bigFtoa(a:{ a:int, b:int, c:int }, b:int, c:int, d:int, e:int, f:long, g:int, h:int) {
  var k:int_ptr;
  var l:int;
  var l:int;
  var m:int_ptr;
  var n:long;
  var p:int_ptr;
  var l:int;
  var l:int;
  var t:int;
  var y:int;
  var ba:int;
  var l:int;
  var ca:int;
  var z:int;
  var l:int;
  var aa:int;
  var da:int;
  var ca:int;
  var aa:int;
  var da:int;
  var ca:int;
  var aa:int;
  var da:int;
  var y:int;
  var ba:int;
  var z:int;
  var z:int;
  var y:int;
  var x:int;
  var z:int;
  var z:int;
  var l:int;
  var l:int;
  var i:int = g_a - 128;
  g_a = i;
  i[31]:int = 0;
  i[29]:long@4 = 0L;
  i[27]:long@4 = 0L;
  i[25]:long@4 = 0L;
  i[23]:long@4 = 8L;
  var j:int = 0[19911]:int;
  0[19911]:int = i + 88;
  i[22]:int = j;
  i[24]:int = (k = runtime_alloc(812));
  i[28]:int = k;
  Assign(k, f);
  if (h) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  Shift(k, g - h[0]:int);
  (i + 24)[0]:long = 0L;
  (i + 29)[0]:long@1 = 0L;
  i[2]:long = 0L;
  (i + 124)[0]:int = i + 16;
  if (c < 0) goto B_c;
  h = d & 255;
  br_table[B_h, B_j, B_f, ..B_i](h + -101);
  label B_j:
  h = k[201] + c;
  goto B_g;
  label B_i:
  g = c;
  br_table[B_h, B_d, B_f, ..B_d](h + -69);
  label B_h:
  h = c + 1;
  label B_g:
  g = c;
  goto B_e;
  label B_f:
  h = select_if(c, 1, c);
  g = h;
  label B_e:
  Round(k, h);
  label B_d:
  h = i + 16 + 8;
  h[0]:long = 0L;
  (i + 16 + 13)[0]:long@1 = 0L;
  (i + 64 + 8)[0]:long = 0L;
  (i + 64 + 13)[0]:long@1 = 0L;
  h[0]:int = 800;
  i[2]:long = 0L;
  i[8]:long = 0L;
  (i + 120)[0]:int = i + 64;
  i[5]:int = 800;
  i[4]:int = k;
  i[7]:int = (h = k[200]);
  i[8]:int = (l = k[201]);
  goto B_b;
  label B_c:
  if (f != 0L) goto B_l;
  k[200] = 0;
  goto B_k;
  label B_l:
  l = h[2]:int + 1;
  if (l >= g) goto B_m;
  if ((k[201] - k[200]) * 332 >= (g - h[0]:int) * 100) goto B_k;
  label B_m:
  (i + 100)[0]:int = (m = runtime_alloc(812));
  Assign(m, (n = f << 1L) | 1L);
  Shift(m, (h[0]:int ^ -1) + g);
  var o:long = h[0]:uint;
  (i + 104)[0]:int = (p = runtime_alloc(812));
  Assign(
    p,
    (select_if(f, n, l = l == g | select_if(0L, 1L << o, o > 63L) < f) << 
     1L) + 
    -1L);
  Shift(p, (h[0]:int ^ -1) + g - (l ^ 1));
  var q:int = p - (h = m[201]);
  var r:int = 0;
  var s:int = 0 - h;
  var u:int = k + (t = k[201] - h);
  f = f & 1L;
  var v:int = i32_wrap_i64(f);
  var w:int = k[200];
  h = 0;
  loop L_n {
    x = t + h;
    if (x >= w) goto B_k;
    l = 48;
    g = 48;
    z = s + h + (y = p[201]);
    if (z <= -1) goto B_q;
    g = 48;
    if (z >= p[200]) goto B_q;
    if (z > 799) goto B_p;
    g = (q + h + y)[0]:ubyte;
    label B_q:
    if (x <= -1) goto B_r;
    if (x >= 800) goto B_p;
    l = (u + h)[0]:ubyte;
    label B_r:
    aa = 48;
    if (h >= (ba = m[200])) goto B_s;
    if (h > 799) goto B_p;
    aa = (m + h)[0]:ubyte;
    label B_s:
    g = (g & 255) != (ca = l & 255);
    if ((g | v) == 1) goto B_o;
    g = z + 1 == p[200];
    goto B_o;
    label B_p:
    runtime_lookupPanic();
    unreachable;
    label B_o:
    y = 2;
    da = r & 255;
    if (da) goto B_y;
    z = 1;
    if ((l + 1 & 255) < (aa & 255)) goto B_x;
    label B_y:
    if (da) goto B_aa;
    y = 1;
    if (ca != (aa & 255)) goto B_z;
    label B_aa:
    z = 1;
    if (da != 1) goto B_ba;
    y = 2;
    if (ca != 57 | (aa & 255) != 48) goto B_x;
    label B_ba:
    y = r;
    if (eqz(da)) goto B_w;
    label B_z:
    z = 1;
    if (eqz(f)) goto B_x;
    if ((y & 255) != 1) goto B_x;
    y = 1;
    z = h + 1 < ba;
    label B_x:
    if ((g & z) != 1) goto B_v;
    Round(k, x + 1);
    goto B_k;
    label B_w:
    y = 0;
    if (eqz(g)) goto B_u;
    goto B_t;
    label B_v:
    if (g) goto B_t;
    if (eqz(z)) goto B_u;
    RoundUp(k, x + 1);
    goto B_k;
    label B_u:
    h = h + 1;
    r = y;
    continue L_n;
    label B_t:
  }
  RoundDown(k, x + 1);
  label B_k:
  h = i + 16 + 8;
  h[0]:long = 0L;
  (i + 16 + 13)[0]:long@1 = 0L;
  (i + 40 + 8)[0]:long = 0L;
  (i + 40 + 13)[0]:long@1 = 0L;
  h[0]:int = 800;
  i[2]:long = 0L;
  i[5]:long = 0L;
  (i + 108)[0]:int = i + 40;
  i[5]:int = 800;
  i[4]:int = k;
  i[7]:int = (h = k[200]);
  i[8]:int = (l = k[201]);
  z = d & 255;
  br_table[B_ea, B_da, B_ca, ..B_fa](z + -101);
  label B_fa:
  g = c;
  br_table[B_ea, B_b, B_ca, ..B_b](z + -69);
  label B_ea:
  g = h + -1;
  goto B_b;
  label B_da:
  g = h - l;
  g = select_if(g, 0, g > 0);
  goto B_b;
  label B_ca:
  g = h;
  label B_b:
  strconv_formatDigits(i, b, c >> 31, e, k, 800, 800, h, l, 0, g, d);
  0[19911]:int = j;
  (i + 116)[0]:int = (h = i[0]:int);
  a.c = i[2]:int;
  a.a = h;
  a.b = i[1]:int;
  g_a = i + 128;
}

function Assign(a:int_ptr, b:long) {
  var c:long_ptr = g_a - 32;
  g_a = c;
  (c + 24)[0]:long = 0L;
  (c + 16)[0]:long = 0L;
  c[1] = 0L;
  var d:int = 0;
  loop L_d {
    if (eqz(b)) goto B_c;
    var e:long = b / 10L;
    if (d == 24) goto B_b;
    (c + 8 + d)[0]:byte = i32_wrap_i64(e * -10L + b) + 48;
    d = d + 1;
    b = e;
    continue L_d;
  }
  label B_c:
  if (eqz(a)) goto B_a;
  var f:int = c + 8 + -1;
  var g:int = 0;
  loop L_f {
    a[200] = g;
    if (d <= 0) goto B_e;
    if (g >= 800) goto B_b;
    (a + g)[0]:byte = (f + d)[0]:ubyte;
    g = a[200] + 1;
    d = d + -1;
    continue L_f;
  }
  label B_e:
  a[201] = g;
  strconv_trim(a);
  g_a = c + 32;
  return ;
  label B_b:
  runtime_lookupPanic();
  unreachable;
  label B_a:
  runtime_nilPanic();
  unreachable;
}

function Round(a:int, b:int) {
  var c:int;
  if (b <= -1) goto B_b;
  if (a) goto B_c;
  runtime_nilPanic();
  unreachable;
  label B_c:
  c = a[200]:int;
  if (c > b) goto B_a;
  label B_b:
  return ;
  label B_a:
  if (b >= 800) goto B_e;
  var d:ubyte_ptr = a + b;
  var e:int = d[0];
  if (b + 1 != c) goto B_g;
  if ((e & 255) != 53) goto B_g;
  if (a[809]:ubyte) goto B_d;
  if (b <= 0) goto B_f;
  if (eqz((d + -1)[0]:ubyte & 1)) goto B_f;
  goto B_d;
  label B_g:
  if ((e & 255) > 52) goto B_d;
  label B_f:
  RoundDown(a, b);
  return ;
  label B_e:
  runtime_lookupPanic();
  unreachable;
  label B_d:
  RoundUp(a, b);
}

function RoundUp(a:int, b:int) {
  var c:int;
  var d:int;
  var c:int;
  if (b <= -1) goto B_c;
  if (eqz(a)) goto B_b;
  if (a[200]:int <= b) goto B_c;
  loop L_e {
    if (b <= 0) goto B_d;
    c = b + -1;
    if (c >= 800) goto B_a;
    d = a + b;
    b = c;
    d = (d + -1)[0]:ubyte;
    if (d > 56) continue L_e;
  }
  (a + c)[0]:byte = d + 1;
  a[200]:int = c + 1;
  return ;
  label B_d:
  a[200]:int = 1;
  a[0]:byte = 49;
  a[201]:int = a[201]:int + 1;
  label B_c:
  return ;
  label B_b:
  runtime_nilPanic();
  unreachable;
  label B_a:
  runtime_lookupPanic();
  unreachable;
}

function RoundDown(a:int_ptr, b:int) {
  if (b <= -1) goto B_c;
  if (eqz(a)) goto B_b;
  if (a[200] > b) goto B_a;
  label B_c:
  return ;
  label B_b:
  runtime_nilPanic();
  unreachable;
  label B_a:
  a[200] = b;
  strconv_trim(a);
}

function strconv_formatDigits(a:{ a:int, b:int, c:int }, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int, j:int, k:int, l:int) {
  var o:int;
  var o:int;
  var o:int;
  var m:int = g_a - 176;
  g_a = m;
  (m + 101)[0]:long@1 = 0L;
  m[41]:long@4 = 0L;
  m[39]:long@4 = 0L;
  m[35]:long@4 = 0L;
  m[33]:long@4 = 0L;
  m[12]:long = 0L;
  m[11]:long = 0L;
  m[37]:long@4 = 0L;
  m[31]:int = 11;
  var n:int = 0[19911]:int;
  0[19911]:int = m + 120;
  m[30]:int = n;
  m[41]:int = e;
  m[39]:int = e;
  m[35]:int = e;
  m[33]:int = e;
  m[108]:byte = j & 1;
  m[26]:int = i;
  m[25]:int = h;
  m[24]:int = g;
  m[23]:int = f;
  m[22]:int = e;
  m[32]:int = m + 88;
  o = l & 255;
  br_table[B_d, B_c, B_a, ..B_e](o + -101);
  label B_e:
  br_table[B_d, B_b, B_a, ..B_b](o + -69);
  label B_d:
  strconv_fmtE(m + 24, b, d, e, f, g, h, i, j, k, l);
  0[19911]:int = n;
  (m + 136)[0]:int = (e = m[6]:int);
  a.c = m[8]:int;
  a.a = e;
  a.b = m[7]:int;
  g_a = m + 176;
  return ;
  label B_c:
  strconv_fmtF(m + 40, b, d, e, f, g, h, i, j, k);
  0[19911]:int = n;
  (m + 144)[0]:int = (e = m[10]:int);
  a.c = m[12]:int;
  a.a = e;
  a.b = m[11]:int;
  g_a = m + 176;
  return ;
  label B_b:
  m[29]:int = 0;
  (m + 148)[0]:int = m + 116;
  m[117]:byte = l;
  m[116]:byte = 37;
  runtime_sliceAppend(m + 8, b, m + 116, 1, 68, 2);
  0[19911]:int = n;
  (m + 152)[0]:int = (e = m[2]:int);
  a.c = m[4]:int;
  a.a = e;
  a.b = m[3]:int;
  g_a = m + 176;
  return ;
  label B_a:
  o = h < k;
  var p:int = i + -1;
  if (p < -4) goto B_g;
  if (
    p < select_if(6, select_if(select_if(h, k, h >= i), k, o), c & 1)) goto B_f;
  label B_g:
  strconv_fmtE(m + 56, b, d, e, f, g, h, i, j, select_if(h, k, o) + -1, l + -2);
  0[19911]:int = n;
  (m + 160)[0]:int = (e = m[14]:int);
  a.c = m[16]:int;
  a.a = e;
  a.b = m[15]:int;
  g_a = m + 176;
  return ;
  label B_f:
  strconv_fmtF(m + 72,
               b,
               d,
               e,
               f,
               g,
               h,
               i,
               j,
               select_if(k = select_if(h, k, i < k) - i, 0, k > 0));
  0[19911]:int = n;
  (m + 168)[0]:int = (e = m[18]:int);
  a.c = m[20]:int;
  a.a = e;
  a.b = m[19]:int;
  g_a = m + 176;
}

function strconv_fmtE(a:{ a:int, b:int, c:int }, b:int, c:int, d:int, e:int, f:int_ptr, g:int, h:int, i:int, j:int, k:int) {
  var l:int = g_a - 336;
  g_a = l;
  (l + 181)[0]:long@1 = 0L;
  l[32]:long = 0L;
  l[22]:long = 0L;
  l[21]:long = 0L;
  l[34]:long = 0L;
  l[29]:long = 103079215104L;
  l[30]:long = 0L;
  l[41]:long = 0L;
  l[40]:long = 0L;
  l[39]:long = 0L;
  l[38]:long = 0L;
  l[37]:long = 0L;
  l[36]:long = 0L;
  l[35]:long = 0L;
  l[33]:long = 0L;
  l[31]:long = 0L;
  var m:int = 0[19911]:int;
  0[19911]:int = l + 232;
  l[64]:int = d;
  var n:int = 1;
  l[188]:byte = i & 1;
  l[46]:int = h;
  l[45]:int = g;
  l[44]:int = f;
  l[42]:int = d;
  l[43]:int = e;
  l[69]:int = d;
  l[58]:int = m;
  l[60]:int = l + 168;
  if (c & 1) goto B_b;
  c = 68;
  goto B_a;
  label B_b:
  l[57]:int = 0;
  (l + 244)[0]:int = l + 228;
  l[228]:byte = 45;
  runtime_sliceAppend(l + 152, b, l + 228, 1, 68, 1);
  (l + 248)[0]:int = (b = l[38]:int);
  c = l[40]:int;
  n = l[39]:int;
  label B_a:
  (l + 252)[0]:int = b;
  if (g) goto B_d;
  e = 48;
  goto B_c;
  label B_d:
  if (eqz(e)) goto B_e;
  e = d[0]:ubyte;
  goto B_c;
  label B_e:
  runtime_lookupPanic();
  unreachable;
  label B_c:
  l[56]:int = 0;
  (l + 260)[0]:int = l + 224;
  l[224]:byte = e;
  runtime_sliceAppend(l + 136, b, l + 224, n, c, 1);
  (l + 264)[0]:int = (b = l[34]:int);
  n = l[36]:int;
  c = l[35]:int;
  if (j < 1) goto B_f;
  l[55]:int = 0;
  (l + 268)[0]:int = l + 220;
  l[220]:byte = 46;
  runtime_sliceAppend(l + 120, b, l + 220, c, n, 1);
  (l + 272)[0]:int = (b = l[30]:int);
  n = l[32]:int;
  c = l[31]:int;
  e = select_if(g, e = j + 1, g < e);
  if (e >= 2) goto B_j;
  e = 1;
  goto B_i;
  label B_j:
  if (e > f) goto B_h;
  runtime_sliceAppend(l + 104, b, d + 1, c, n, e + -1);
  (l + 332)[0]:int = (b = l[26]:int);
  n = l[28]:int;
  c = l[27]:int;
  label B_i:
  (l + 284)[0]:int = l + 216;
  d = l + 232 + 48;
  f = l + 288;
  goto B_g;
  label B_h:
  runtime_slicePanic();
  unreachable;
  label B_g:
  loop L_k {
    d[0]:int = b;
    if (e > j) goto B_f;
    l[54]:int = 0;
    l[216]:byte = 48;
    runtime_sliceAppend(l + 88, b, l + 216, c, n, 1);
    f[0] = (b = l[22]:int);
    e = e + 1;
    n = l[24]:int;
    c = l[23]:int;
    continue L_k;
  }
  label B_f:
  (l + 292)[0]:int = b;
  l[53]:int = 0;
  l[212]:byte = k;
  (l + 296)[0]:int = l + 212;
  runtime_sliceAppend(l + 72, b, l + 212, c, n, 1);
  (l + 300)[0]:int = (e = l[18]:int);
  l[49]:int = 0;
  (l + 304)[0]:int = l + 196;
  l[196]:byte = select_if(45, 43, (b = select_if(h + -1, 0, g)) < 0);
  runtime_sliceAppend(l + 56, e, l + 196, l[19]:int, l[20]:int, 1);
  (l + 308)[0]:int = (e = l[14]:int);
  n = l[16]:int;
  c = l[15]:int;
  b = b + (j = b >> 31) ^ j;
  if (b > 9) goto B_m;
  l[52]:int = 0;
  (l + 312)[0]:int = l + 208;
  l[208]:byte = 48;
  l[209]:byte = b + 48;
  runtime_sliceAppend(l + 8, e, l + 208, c, n, 2);
  e = l[4]:int;
  n = l[3]:int;
  b = l[2]:int;
  goto B_l;
  label B_m:
  if (b > 99) goto B_n;
  l[51]:int = 0;
  (l + 324)[0]:int = l + 204;
  l[204]:byte = (j = (b & 255) / 10) + 48;
  l[205]:byte = b - j * 10 | 48;
  runtime_sliceAppend(l + 24, e, l + 204, c, n, 2);
  e = l[8]:int;
  n = l[7]:int;
  b = l[6]:int;
  goto B_l;
  label B_n:
  l[50]:int = 0;
  (l + 328)[0]:int = l + 200;
  l[200]:byte = b / 100 + 48;
  l[202]:byte = b - (j = b / 10) * 10 | 48;
  l[201]:byte = (j & 255) % 10 | 48;
  runtime_sliceAppend(l + 40, e, l + 200, c, n, 3);
  e = l[12]:int;
  n = l[11]:int;
  b = l[10]:int;
  label B_l:
  0[19911]:int = m;
  (l + 316)[0]:int = b;
  (l + 320)[0]:int = b;
  a.c = e;
  a.b = n;
  a.a = b;
  g_a = l + 336;
}

function strconv_fmtF(a:{ a:int, b:int, c:int }, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int_ptr, j:int) {
  var n:int_ptr;
  var n:int_ptr;
  var k:int = g_a - 240;
  g_a = k;
  (k + 117)[0]:long@1 = 0L;
  k[25]:long = 0L;
  k[14]:long = 0L;
  k[13]:long = 0L;
  k[28]:long = 0L;
  k[19]:long = 81604378624L;
  k[20]:long = 0L;
  k[58]:int = 0;
  k[27]:long = 0L;
  k[26]:long = 0L;
  k[24]:long = 0L;
  k[23]:long = 0L;
  k[22]:long = 0L;
  k[21]:long = 0L;
  var l:int = 0[19911]:int;
  0[19911]:int = k + 152;
  k[51]:int = d;
  var m:int = 1;
  k[124]:byte = i & 1;
  k[30]:int = h;
  k[29]:int = g;
  k[28]:int = f;
  k[26]:int = d;
  k[27]:int = e;
  k[57]:int = d;
  k[38]:int = l;
  k[40]:int = k + 104;
  if (c & 1) goto B_b;
  c = 68;
  goto B_a;
  label B_b:
  k[37]:int = 0;
  (k + 164)[0]:int = k + 148;
  k[148]:byte = 45;
  runtime_sliceAppend(k + 88, b, k + 148, 1, 68, 1);
  (k + 168)[0]:int = (b = k[22]:int);
  c = k[24]:int;
  m = k[23]:int;
  label B_a:
  (k + 172)[0]:int = b;
  if (h > 0) goto B_d;
  k[33]:int = 0;
  (k + 220)[0]:int = k + 132;
  k[132]:byte = 48;
  runtime_sliceAppend(k + 72, b, k + 132, m, c, 1);
  (k + 224)[0]:int = (b = k[18]:int);
  f = k[20]:int;
  m = k[19]:int;
  goto B_c;
  label B_d:
  i = select_if(g, h, g < h);
  if (i > f) goto B_f;
  runtime_sliceAppend(k + 56, b, d, m, c, i);
  (k + 232)[0]:int = (b = k[14]:int);
  (k + 180)[0]:int = k + 144;
  c = h - i;
  f = k[16]:int;
  m = k[15]:int;
  i = k + 176;
  n = k + 184;
  goto B_e;
  label B_f:
  runtime_slicePanic();
  unreachable;
  label B_e:
  loop L_g {
    i[0] = b;
    if (eqz(c)) goto B_c;
    k[36]:int = 0;
    k[144]:byte = 48;
    runtime_sliceAppend(k + 40, b, k + 144, m, f, 1);
    n[0] = (b = k[10]:int);
    c = c + -1;
    f = k[12]:int;
    m = k[11]:int;
    continue L_g;
  }
  label B_c:
  (k + 188)[0]:int = b;
  if (j < 1) goto B_h;
  k[35]:int = 0;
  (k + 192)[0]:int = k + 140;
  k[140]:byte = 46;
  runtime_sliceAppend(k + 24, b, k + 140, m, f, 1);
  (k + 196)[0]:int = (b = k[6]:int);
  (k + 208)[0]:int = k + 136;
  f = k[8]:int;
  m = k[7]:int;
  i = k + 200;
  n = k + 212;
  loop L_i {
    i[0] = b;
    if (eqz(j)) goto B_h;
    c = 48;
    if (h < 0) goto B_k;
    if (h >= g) goto B_k;
    if (h >= e) goto B_j;
    c = (d + h)[0]:ubyte;
    label B_k:
    k[34]:int = 0;
    k[136]:byte = c;
    runtime_sliceAppend(k + 8, b, k + 136, m, f, 1);
    n[0] = (b = k[2]:int);
    h = h + 1;
    j = j + -1;
    f = k[4]:int;
    m = k[3]:int;
    continue L_i;
    label B_j:
  }
  runtime_lookupPanic();
  unreachable;
  label B_h:
  0[19911]:int = l;
  (k + 216)[0]:int = b;
  a.c = f;
  a.b = m;
  a.a = b;
  g_a = k + 240;
}

function Normalize(a:{ a:long, b:int }) {
  var c:int;
  var e:int;
  var f:int;
  if (eqz(a)) goto B_b;
  var b:long = a.a;
  if (eqz(b)) goto B_c;
  var d:long = select_if(b >> 32L, b, c = b > 4294967295L);
  d = select_if(d >> 16L, d, e = d > 65535L);
  var g:int = i32_wrap_i64(select_if(d >> 8L, d, f = d > 255L));
  if (g >= 256) goto B_a;
  a.b = 
    a.b - 
    (c = 64 - 
         select_if((c = select_if((c = c << 5) | 16, c, e)) | 8, c, f) + 
         (g + 69654)[0]:ubyte);
  a.a = select_if(0L, b << i64_extend_i32_u(c), c > 63);
  label B_c:
  return ;
  label B_b:
  runtime_nilPanic();
  unreachable;
  label B_a:
  runtime_lookupPanic();
  unreachable;
}

function frexp10(a:{ a:int, b:int }, b:int_ptr) {
  var e:int;
  if (eqz(b)) goto B_a;
  var c:int = b[2];
  var d:int = c + 64;
  c = ((-46 - c) * 28 / 93 + 348) / 8;
  loop L_b {
    if (c > 86) goto B_d;
    e = 1;
    var f:int = d + ((c << 4) + 71944)[0]:int;
    if (f < -60) goto B_c;
    e = -1;
    if (f > -32) goto B_c;
    Multiply(b,
             ((e = c << 4) + 71936)[0]:long,
             (e + 71944)[0]:int,
             (e + 71948)[0]:ubyte);
    a.b = c;
    a.a = 348 - (c << 3);
    return ;
    label B_d:
    runtime_lookupPanic();
    unreachable;
    label B_c:
    c = c + e;
    continue L_b;
  }
  label B_a:
  runtime_nilPanic();
  unreachable;
}

function Multiply(a:{ a:long, b:int }, b:long, c:int, d:int) {
  var f:long;
  var g:long;
  var h:long;
  var e:{ a:long, b:int, c:byte } = g_a - 16;
  g_a = e;
  e.b = c;
  e.a = b;
  e.c = d & 1;
  if (a) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  a.b = c + a.b + 64;
  a.a = 
    ((f = a.a) * b >> 63L) + (g = f >> 32L) * (h = b >> 32L) + 
    ((b = ((f = f & 4294967295L) * (b = b & 4294967295L) >> 32L) + g * b) >> 
     32L) + 
    ((b & 4294967295L) + f * h >> 32L);
  g_a = e + 16;
}

function strconv_adjustLastDigit(a:int, b:long, c:long, d:long, e:long, f:long):int {
  var g:int = 0;
  if (f << 1L > e) goto B_b;
  var h:long = (e >> 1L) + f;
  loop L_d {
    if (h + b >= c) goto B_f;
    if (a) goto B_e;
    goto B_a;
    label B_f:
    if (b > d - f) goto B_b;
    if (b < f) goto B_b;
    if (e + b <= h + c) goto B_b;
    if (eqz(a)) goto B_a;
    g = 1;
    if (a[3]:int != 1) goto B_b;
    if (eqz(a[1]:int)) goto B_c;
    if ((a[0]:int)[0]:ubyte != 48) goto B_b;
    a[3]:long@4 = 0L;
    goto B_b;
    label B_e:
    var i:int = a[3]:int + -1;
    if (i >= a[1]:int) goto B_c;
    i = a[0]:int + i;
    i[0]:byte = i[0]:ubyte + -1;
    b = b + e;
    continue L_d;
  }
  label B_c:
  runtime_lookupPanic();
  unreachable;
  label B_b:
  return g;
  label B_a:
  runtime_nilPanic();
  return unreachable;
}

function strconv_appendQuotedRuneWith(a:{ a:int, b:int, c:int }, b:int, c:int, d:int) {
  var e:int = g_a - 96;
  g_a = e;
  e[15]:int = 0;
  e[21]:long@4 = 0L;
  e[19]:long@4 = 0L;
  e[17]:int = 5;
  var f:int = 0[19911]:int;
  0[19911]:int = e + 64;
  e[16]:int = f;
  e[60]:byte = 39;
  e[18]:int = e + 60;
  runtime_sliceAppend(e + 40, b, e + 60, 0, 68, 1);
  e[19]:int = (b = e[10]:int);
  strconv_appendEscapedRune(
    e + 24,
    b,
    e[11]:int,
    e[12]:int,
    select_if(c, select_if(c, 65533, c + -57344 < 1056768), c < 55296),
    39,
    d);
  e[14]:int = 0;
  e[20]:int = (c = e[6]:int);
  e[56]:byte = 39;
  e[21]:int = e + 56;
  runtime_sliceAppend(e + 8, c, e + 56, e[7]:int, e[8]:int, 1);
  0[19911]:int = f;
  e[22]:int = (c = e[2]:int);
  a.c = e[4]:int;
  a.a = c;
  a.b = e[3]:int;
  g_a = e + 96;
}

function argNumber(a:{ a:int, b:int, c:byte }, b:int, c:int, d:int) {
  if (d > 31) goto B_b;
  if (d > 31) goto B_a;
  label B_b:
  a.c = 0;
  a.b = d;
  a.a = c;
  return ;
  label B_a:
  runtime_lookupPanic();
  unreachable;
}

function badVerb(a:int, b:int_ptr) {
  var e:int;
  var f:ubyte_ptr;
  var c:int = g_a - 48;
  g_a = c;
  c[11]:int = 0;
  c[9]:long@4 = 0L;
  c[7]:long@4 = 0L;
  c[5]:long@4 = 0L;
  c[3]:long@4 = 8L;
  var d:int = 0[19911]:int;
  0[19911]:int = c + 8;
  c[2]:int = d;
  if (eqz(a)) goto B_b;
  a[127]:byte = 1;
  writeString(a, 74211, 2);
  writeRune(a, b);
  writeByte(a, 40);
  (c + 16)[0]:int = (a + 16)[0]:int;
  if (eqz(a[3]:int)) goto B_c;
  (c + 20)[0]:int = (b = a[4]:int);
  (c + 8 + 16)[0]:int = reflect_TypeOf(a[3]:int, b);
  writeString(a, 69127, 1);
  writeByte(a, 61);
  (c + 28)[0]:int = (b = a[4]:int);
  printArg(a, a[3]:int, b, 118);
  goto B_a;
  label B_c:
  (c + 8 + 24)[0]:int = (e = (b = a + 24)[0]);
  if (eqz(IsValid(a[5]:int, e, (f = a + 28)[0]) & 1)) goto B_d;
  (c + 8 + 28)[0]:int = (e = b[0]);
  (c + 40)[0]:int = Type(a[5]:int, e, f[0]);
  writeString(a, 69127, 1);
  writeByte(a, 61);
  (c + 44)[0]:int = (b = b[0]);
  printValue(a, a[5]:int, b, f[0], 118, 0);
  goto B_a;
  label B_d:
  writeString(a, 74206, 5);
  goto B_a;
  label B_b:
  runtime_nilPanic();
  unreachable;
  label B_a:
  writeByte(a, 41);
  0[19911]:int = d;
  a[127]:byte = 0;
  g_a = c + 48;
}

function writeString(a:int, b:int, c:int) {
  var f:int;
  var d:int = g_a - 32;
  g_a = d;
  d[7]:int = 0;
  d[5]:long@4 = 2L;
  var e:int = 0[19911]:int;
  0[19911]:int = d + 16;
  d[4]:int = e;
  if (a) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  (d + 24)[0]:int = (f = a[0]:int);
  runtime_sliceAppend(d, f, b, a[1]:int, a[2]:int, c);
  0[19911]:int = e;
  var g:long = d[1]:long@4;
  a[0]:int = (e = d[0]:int);
  (d + 28)[0]:int = e;
  a[1]:long@4 = g;
  g_a = d + 32;
}

function writeRune(a:int, b:int) {
  var e:int;
  var g:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var c:int = g_a - 80;
  g_a = c;
  c[17]:long@4 = 0L;
  c[15]:long@4 = 0L;
  c[13]:long@4 = 0L;
  c[11]:long@4 = 7L;
  var d:int = 0[19911]:int;
  0[19911]:int = c + 40;
  c[10]:int = d;
  if (b > 127) goto B_b;
  if (eqz(a)) goto B_a;
  (c + 60)[0]:int = (e = a[0]:int);
  c[8]:int = 0;
  c[32]:byte = b;
  (c + 64)[0]:int = c + 32;
  runtime_sliceAppend(c, e, c + 32, a[1]:int, a[2]:int, 1);
  0[19911]:int = d;
  var f:long = c[1]:long@4;
  a[0]:int = (e = c[0]:int);
  (c + 68)[0]:int = e;
  a[1]:long@4 = f;
  g_a = c + 80;
  return ;
  label B_b:
  if (eqz(a)) goto B_a;
  (c + 72)[0]:int = (g = a[0]:int);
  (c + 52)[0]:int = c + 36;
  var h:int = a[1]:int;
  var i:int = h + 4;
  e = a[2]:int;
  var j:int_ptr = c + 48;
  var k:int_ptr = c + 56;
  var l:int = h;
  loop L_d {
    j[0] = g;
    if (i <= e) goto B_c;
    c[9]:int = 0;
    c[36]:byte = 0;
    runtime_sliceAppend(c + 16, g, c + 36, l, e, 1);
    k[0] = (g = c[4]:int);
    e = c[6]:int;
    l = c[5]:int;
    continue L_d;
  }
  label B_c:
  if (h > -5) goto B_e;
  if (i > e) goto B_e;
  l = unicode_utf8_EncodeRune(g + h, 4, b) + h;
  if (l > e) goto B_e;
  a[2]:int = e;
  a[1]:int = l;
  a[0]:int = g;
  0[19911]:int = d;
  g_a = c + 80;
  return ;
  label B_e:
  runtime_slicePanic();
  unreachable;
  label B_a:
  runtime_nilPanic();
  unreachable;
}

function writeByte(a:int, b:int) {
  var e:int;
  var c:int = g_a - 48;
  g_a = c;
  c[9]:long@4 = 0L;
  c[7]:long@4 = 3L;
  var d:int = 0[19911]:int;
  0[19911]:int = c + 24;
  c[6]:int = d;
  if (a) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  (c + 32)[0]:int = (e = a[0]:int);
  c[5]:int = 0;
  c[20]:byte = b;
  (c + 36)[0]:int = c + 20;
  runtime_sliceAppend(c + 8, e, c + 20, a[1]:int, a[2]:int, 1);
  0[19911]:int = d;
  var f:long = c[3]:long@4;
  a[0]:int = (d = c[2]:int);
  (c + 40)[0]:int = d;
  a[1]:long@4 = f;
  g_a = c + 48;
}

function printArg(a:int, b:int, c:int, d:int) {
  var g:int;
  var h:int;
  var e:int = g_a - 112;
  g_a = e;
  e[27]:int = 0;
  e[25]:long@4 = 0L;
  e[23]:long@4 = 0L;
  e[21]:long@4 = 0L;
  e[19]:long@4 = 0L;
  e[17]:long@4 = 10L;
  var f:int = 0[19911]:int;
  0[19911]:int = e + 64;
  e[16]:int = f;
  if (a) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  a[3]:int = b;
  a[5]:long@4 = 0L;
  (a + 16)[0]:int = c;
  (e + 40)[0]:byte = 0;
  (a + 28)[0]:int = 0;
  e[4]:long = 0L;
  (e + 104)[0]:int = e + 32;
  if (eqz(b)) goto B_c;
  if (d == 84) goto B_f;
  if (d == 112) goto B_e;
  if (b > 33) goto B_o;
  br_table[B_n, B_g, B_m, ..B_p](b + -2)
  label B_p:
  br_table[B_l, B_g, B_k, ..B_h](b + -22);
  label B_o:
  if (b == 34) goto B_j;
  if (b == 127) goto B_i;
  if (b != 519) goto B_g;
  fmtBytes(a, c[0]:int, c[1]:int, c[2]:int, d, 74058, 6);
  goto B_b;
  label B_n:
  fmtBool(a, c & 1, d);
  goto B_b;
  label B_m:
  fmtInteger_1(a, i64_extend_i32_s(c), 1, d);
  goto B_b;
  label B_l:
  fmtInteger_1(a, c[0]:long, 0, d);
  goto B_b;
  label B_k:
  fmtInteger_1(a, i64_extend_i32_u(c), 0, d);
  goto B_b;
  label B_j:
  fmtString(a, c[0]:int, c[1]:int, d);
  goto B_b;
  label B_i:
  (e + 96)[0]:int = (b = c[1]:int);
  (e + 88)[0]:int = b;
  (e + 84)[0]:int = b;
  (e + 80)[0]:int = b;
  e[6]:long = 0L;
  (e + 76)[0]:int = e + 48;
  e[12]:int = (g = c[0]:int);
  e[13]:int = b;
  e[56]:byte = (c = c[8]:ubyte);
  if (eqz(IsValid(g, b, c) & 1)) goto B_q;
  CanInterface(g, b, c);
  Interface(e + 16, g, b, c);
  (e + 92)[0]:int = (h = e[5]:int);
  var i:int = e[4]:int;
  a[4]:int = h;
  a[3]:int = i;
  if (handleMethods(a, d) & 1) goto B_b;
  label B_q:
  printValue(a, g, b, c, d, 0);
  goto B_b;
  label B_h:
  if (b == 16) goto B_d;
  label B_g:
  if (handleMethods(a, d) & 1) goto B_b;
  reflect_ValueOf(e + 8, b, c);
  (e + 100)[0]:int = (b = e[3]:int);
  printValue(a, e[2]:int, b, 2, d, 0);
  goto B_b;
  label B_f:
  (e + 108)[0]:int = reflect_TypeOf(b, c);
  fmtS(a + 32, 69127, 1);
  0[19911]:int = f;
  g_a = e + 112;
  return ;
  label B_e:
  reflect_ValueOf(e + 24, b, c);
  (e + 72)[0]:int = (b = e[7]:int);
  fmtPointer(a, e[6]:int, b, 2, 112);
  0[19911]:int = f;
  g_a = e + 112;
  return ;
  label B_d:
  fmtInteger_1(a, i64_extend_i32_u(c & 255), 0, d);
  goto B_b;
  label B_c:
  if (d == 84) goto B_r;
  if (d == 118) goto B_r;
  badVerb(a, d);
  goto B_b;
  label B_r:
  padString(a + 32, 74206, 5);
  label B_b:
  0[19911]:int = f;
  g_a = e + 112;
}

function printValue(a:int, b:int, c:int, d:int, e:int, f:int) {
  var i:int;
  var j:int;
  var i:int;
  var j:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var la:int;
  var j:int;
  var i:int;
  var i:int;
  var la:int;
  var j:int;
  var m:int;
  var i:int;
  var la:int;
  var j:int;
  var la:int;
  var j:int;
  var la:int;
  var i:int;
  var j:int;
  var la:int;
  var i:int;
  var j:int;
  var i:int;
  var i:int;
  var j:int;
  var la:int;
  var i:int;
  var i:int;
  var l:int_ptr;
  var m:int;
  var n:long_ptr;
  var o:long_ptr@1;
  var i:int;
  var p:int_ptr;
  var q:int_ptr;
  var r:int_ptr;
  var s:int_ptr;
  var t:int_ptr;
  var u:int_ptr;
  var j:int;
  var v:int_ptr;
  var j:int;
  var w:int_ptr;
  var x:int_ptr;
  var j:int;
  var y:int_ptr;
  var la:int;
  var z:int_ptr;
  var la:int;
  var aa:int_ptr;
  var la:int;
  var ba:int_ptr;
  var j:int;
  var ca:int_ptr;
  var j:int;
  var da:int_ptr;
  var j:int;
  var la:int;
  var la:int;
  var m:int;
  var la:int;
  var i:int;
  var ea:int_ptr;
  var fa:int_ptr;
  var ga:int_ptr;
  var ha:int_ptr;
  var la:int;
  var la:int;
  var j:int;
  var la:int;
  var j:int;
  var la:int;
  var j:int;
  var ia:int_ptr;
  var ja:int_ptr;
  var ka:int_ptr;
  var la:int;
  var j:int;
  var k:int;
  var i:int;
  var g:int = g_a - 640;
  g_a = g;
  g[77]:long = 0L;
  g[76]:long = 0L;
  g[75]:long = 0L;
  g[74]:long = 0L;
  g[73]:long = 0L;
  g[72]:long = 0L;
  g[71]:long = 0L;
  g[70]:long = 0L;
  g[69]:long = 0L;
  g[68]:long = 0L;
  g[67]:long = 0L;
  g[66]:long = 0L;
  g[65]:long = 0L;
  g[64]:long = 0L;
  g[63]:long = 0L;
  g[62]:long = 0L;
  g[61]:long = 0L;
  g[60]:long = 0L;
  g[59]:long = 0L;
  g[58]:long = 0L;
  g[57]:long = 0L;
  g[56]:long = 0L;
  g[55]:long = 0L;
  g[54]:long = 0L;
  g[53]:long = 0L;
  g[52]:long = 0L;
  g[51]:long = 0L;
  g[50]:long = 0L;
  g[49]:long = 0L;
  g[48]:long = 0L;
  g[47]:long = 0L;
  g[46]:long = 283467841536L;
  g[26]:long = 0L;
  g[79]:long = 0L;
  g[78]:long = 0L;
  g[216]:byte = d;
  var h:int = 0[19911]:int;
  0[19911]:int = g + 368;
  g[92]:int = h;
  g[52]:int = b;
  g[53]:int = c;
  g[94]:int = g + 208;
  if (f < 1) goto B_d;
  if (eqz(IsValid(b, c, d) & 1)) goto B_d;
  CanInterface(b, c, d);
  if (eqz(a)) goto B_a;
  Interface(g + 200, b, c, d);
  (g + 592)[0]:int = (i = g[51]:int);
  j = g[50]:int;
  (a + 16)[0]:int = i;
  a[3]:int = j;
  if (eqz(handleMethods(a, e) & 1)) goto B_c;
  goto B_b;
  label B_d:
  if (eqz(a)) goto B_a;
  label B_c:
  a[5]:int = b;
  a[3]:long@4 = 0L;
  (a + 24)[0]:int = c;
  (a + 28)[0]:byte = d;
  g[28]:long = 0L;
  g[232]:byte = d;
  (g + 596)[0]:int = g + 224;
  g[57]:int = c;
  g[56]:int = b;
  br_table[B_e, B_f, B_g, B_g, B_g, B_g, B_g, B_h, B_h, B_h, B_h, B_h, B_h, B_i, B_j, B_k, B_l, B_m, B_u, B_u, B_r, B_v, B_s, B_s, B_u, B_z, B_y, ..B_w](
    Kind(b, c, d))
  label B_z:
  if (eqz((a + 44)[0]:ubyte)) goto B_p;
  (g + 600)[0]:int = Type(b, c, d);
  writeString(a, 69127, 1);
  if (IsNil(b, c, d) & 1) goto B_x;
  writeByte(a, 123);
  goto B_o;
  label B_y:
  if (eqz((a + 44)[0]:ubyte)) goto B_aa;
  (g + 608)[0]:int = Type(b, c, d);
  writeString(a, 69127, 1);
  label B_aa:
  writeByte(a, 123);
  (g + 476)[0]:int = g + 328;
  (g + 404)[0]:int = g + 288;
  (g + 420)[0]:int = g + 328;
  (g + 472)[0]:int = g + 288;
  k = f + 1;
  l = g + 368 + 32;
  m = g + 288 + 8;
  n = g + 304;
  o = g + 309;
  p = g + 456;
  q = g + 440;
  r = g + 424;
  s = g + 460;
  t = g + 408;
  u = g + 444;
  v = g + 428;
  w = g + 468;
  x = g + 368 + 44;
  y = g + 452;
  z = g + 432;
  aa = g + 416;
  ba = g + 448;
  ca = g + 464;
  da = g + 436;
  ea = g + 492;
  fa = g + 488;
  ga = g + 484;
  ha = g + 480;
  ia = g + 496;
  ja = g + 500;
  ka = g + 504;
  i = 0;
  goto B_q;
  label B_x:
  writeString(a, 74137, 5);
  0[19911]:int = h;
  g_a = g + 640;
  return ;
  label B_w:
  (g + 584)[0]:int = g + 328;
  g[41]:long = 0L;
  g[336]:byte = d;
  g[83]:int = c;
  g[82]:int = b;
  if (eqz(IsValid(b, c, d) & 1)) goto B_ba;
  writeByte(a, 63);
  (g + 588)[0]:int = Type(b, c, d);
  writeString(a, 69127, 1);
  writeByte(a, 63);
  goto B_b;
  label B_ba:
  writeString(a, 74206, 5);
  goto B_b;
  label B_v:
  if (f) goto B_u;
  if (eqz(Pointer(b, c, d))) goto B_u;
  (g + 568)[0]:int = (c = g[57]:int);
  g[34]:long = 0L;
  g[280]:byte = 0;
  (g + 564)[0]:int = g + 272;
  Elem(g + 184, b = g[56]:int, c, d = g[232]:ubyte);
  (g + 636)[0]:int = (f = g[47]:int);
  (g + 576)[0]:int = f;
  (g + 572)[0]:int = f;
  g[280]:byte = (i = g[192]:ubyte);
  g[69]:int = f;
  g[68]:int = (j = g[46]:int);
  la = Kind(j, f, i);
  if (la > 26) goto B_u;
  if (1 << la & 113246208) goto B_t;
  label B_u:
  (g + 580)[0]:int = c;
  fmtPointer(a, b, c, d, e);
  goto B_b;
  label B_t:
  writeByte(a, 38);
  printValue(a, j, f, i, e, 1);
  0[19911]:int = h;
  g_a = g + 640;
  return ;
  label B_s:
  br_table[B_ia, B_ha, B_ia, ..B_ja](e + -113)
  label B_ja:
  if (e == 120) goto B_ia;
  if (e != 88) goto B_ha;
  label B_ia:
  (g + 528)[0]:int = (i = Type(b, c, d));
  (g + 532)[0]:int = (i = elem(i));
  (g + 536)[0]:int = i;
  if (Kind_1(i) != 8) goto B_ha;
  if (Kind(b, c, d) == 22) goto B_ea;
  (g + 624)[0]:int = (f = g[57]:int);
  (g + 552)[0]:int = f;
  (g + 548)[0]:int = f;
  (g + 544)[0]:int = g + 328;
  j = g[232]:ubyte;
  la = g[56]:int;
  if (d & 1) goto B_ga;
  c = 0;
  b = Len(la, f, j);
  if (b < 0) goto B_n;
  (g + 540)[0]:int = (i = runtime_alloc(b));
  (g + 620)[0]:int = i;
  m = g + 628;
  loop L_ka {
    if (b != c) goto B_la;
    fmtBytes(a, i, b, b, e, 69127, 1);
    0[19911]:int = h;
    g_a = g + 640;
    return ;
    label B_la:
    Index(g + 168, la, f, j, c);
    m[0]:int = (d = g[43]:int);
    (i + c)[0]:byte = Uint(g[42]:int, d, g[176]:ubyte);
    c = c + 1;
    continue L_ka;
  }
  label B_ha:
  if (eqz((a + 44)[0]:ubyte)) goto B_da;
  (g + 632)[0]:int = Type(b, c, d);
  writeString(a, 69127, 1);
  if (Kind(b, c, d) != 22) goto B_ma;
  if (IsNil(b, c, d) & 1) goto B_fa;
  label B_ma:
  writeByte(a, 123);
  j = f + 1;
  f = 0;
  la = g + 556;
  goto B_ca;
  label B_ga:
  Len(la, f, j);
  Slice(la, f, j);
  unreachable;
  label B_fa:
  writeString(a, 74137, 5);
  0[19911]:int = h;
  g_a = g + 640;
  return ;
  label B_ea:
  Bytes(b, c, d);
  unreachable;
  label B_da:
  writeByte(a, 91);
  j = f + 1;
  f = 0;
  la = g + 560;
  loop L_na {
    if (f >= Len(b, c, d)) goto B_pa;
    if (eqz(f)) goto B_oa;
    writeByte(a, 32);
    goto B_oa;
    label B_pa:
    writeByte(a, 93);
    goto B_b;
    label B_oa:
    Index(g + 152, b, c, d, f);
    la[0]:int = (i = g[39]:int);
    printValue(a, g[38]:int, i, g[160]:ubyte, e, j);
    f = f + 1;
    continue L_na;
  }
  label B_ca:
  loop L_qa {
    if (f >= Len(b, c, d)) goto B_sa;
    if (eqz(f)) goto B_ra;
    writeString(a, 74204, 2);
    goto B_ra;
    label B_sa:
    writeByte(a, 125);
    goto B_b;
    label B_ra:
    Index(g + 136, b, c, d, f);
    la[0]:int = (i = g[35]:int);
    printValue(a, g[34]:int, i, g[144]:ubyte, e, j);
    f = f + 1;
    continue L_qa;
  }
  label B_r:
  (g + 612)[0]:int = (d = g[57]:int);
  (g + 512)[0]:int = d;
  g[32]:long = 0L;
  g[264]:byte = 0;
  (g + 508)[0]:int = g + 256;
  Elem(g + 120, j = g[56]:int, d, la = g[232]:ubyte);
  (g + 524)[0]:int = (c = g[31]:int);
  (g + 520)[0]:int = c;
  (g + 516)[0]:int = c;
  g[264]:byte = (b = g[128]:ubyte);
  g[65]:int = c;
  g[64]:int = (i = g[30]:int);
  if (eqz(IsValid(i, c, b) & 1)) goto B_ta;
  printValue(a, i, c, b, e, f + 1);
  goto B_b;
  label B_ta:
  if (eqz((a + 44)[0]:ubyte)) goto B_ua;
  (g + 616)[0]:int = Type(j, d, la);
  writeString(a, 69127, 1);
  writeString(a, 74137, 5);
  goto B_b;
  label B_ua:
  writeString(a, 74206, 5);
  goto B_b;
  label B_q:
  loop L_va {
    if (i >= NumField_1(b, c, d)) goto B_ya;
    if (eqz(i)) goto B_za;
    if (eqz(a[44]:ubyte)) goto B_ab;
    writeString(a, 74204, 2);
    goto B_za;
    label B_ab:
    writeByte(a, 32);
    label B_za:
    if (a[43]:ubyte) goto B_xa;
    if (a[44]:ubyte) goto B_xa;
    goto B_wa;
    label B_ya:
    writeByte(a, 125);
    goto B_b;
    label B_xa:
    l[0] = (f = Type(b, c, d));
    m[0]:long = 0L;
    n[0] = 0L;
    o[0] = 0L;
    g[36]:long = 0L;
    g[80]:int = 0;
    rawField(g + 80, f, i);
    p[0] = (f = g[20]:int);
    q[0] = f;
    r[0] = f;
    s[0] = (j = g[22]:int);
    t[0] = f;
    u[0] = j;
    v[0] = j;
    w[0] = (la = g[25]:int);
    x[0] = j;
    y[0] = la;
    z[0] = la;
    aa[0] = la;
    la = g[21]:int;
    j = g[24]:int;
    g[91]:int = 0;
    memset(g + 328, 0, 33);
    ba[0] = j;
    ca[0] = j;
    da[0] = j;
    if (eqz(la)) goto B_wa;
    writeString(a, f, la);
    writeByte(a, 58);
    label B_wa:
    m[0]:byte = d;
    la = g + 328 + 8;
    la[0]:byte = 0;
    g[36]:long = 0L;
    g[41]:long = 0L;
    g[73]:int = c;
    g[72]:int = b;
    Field(g + 64, b, c, d, i);
    ea[0] = (f = g[17]:int);
    fa[0] = f;
    ga[0] = f;
    ha[0] = f;
    la[0]:byte = (j = g[72]:ubyte);
    g[83]:int = f;
    g[82]:int = (la = g[16]:int);
    if (Kind(la, f, j) != 20) goto B_bb;
    if (IsNil(la, f, j) & 1) goto B_bb;
    Elem(g + 48, la, f, j);
    ia[0] = (f = g[13]:int);
    g[336]:byte = (j = g[56]:ubyte);
    g[83]:int = f;
    g[82]:int = (la = g[12]:int);
    label B_bb:
    ja[0] = f;
    ka[0] = f;
    printValue(a, la, f, j, e, k);
    i = i + 1;
    continue L_va;
  }
  label B_p:
  writeString(a, 74054, 4);
  label B_o:
  (g + 384)[0]:int = g + 328;
  g[41]:long = 0L;
  g[336]:byte = d;
  g[83]:int = c;
  g[82]:int = b;
  (g + 388)[0]:int = (a = Type(b, c, d));
  if (Kind_1(a) != 25) goto B_cb;
  a = Len(b, c, d);
  if (a <= -1) goto B_n;
  (g + 392)[0]:int = runtime_alloc(a = a * 12);
  (g + 396)[0]:int = runtime_alloc(a);
  MapRange(b, c, d);
  unreachable;
  label B_cb:
  (g + 248)[0]:byte = 0;
  g[30]:long = 0L;
  (g + 604)[0]:int = g + 240;
  goto B_a;
  label B_n:
  runtime_slicePanic();
  unreachable;
  label B_m:
  String_1(g + 40, b, c, d);
  (g + 380)[0]:int = (c = g[10]:int);
  fmtString(a, c, g[11]:int, e);
  goto B_b;
  label B_l:
  Complex(g + 24, b, c, d);
  fmtComplex(a, g[3]:double, g[4]:double, 128, e);
  goto B_b;
  label B_k:
  Complex(g + 8, b, c, d);
  fmtComplex(a, g[1]:double, g[2]:double, 64, e);
  goto B_b;
  label B_j:
  fmtFloat(a, Float(b, c, d), 64, e);
  goto B_b;
  label B_i:
  fmtFloat(a, Float(b, c, d), 32, e);
  goto B_b;
  label B_h:
  fmtInteger_1(a, Uint(b, c, d), 0, e);
  goto B_b;
  label B_g:
  fmtInteger_1(a, Int(b, c, d), 1, e);
  goto B_b;
  label B_f:
  fmtBool(a, Bool(b, c, d), e);
  goto B_b;
  label B_e:
  if (eqz(f)) goto B_eb;
  if (e == 118) goto B_db;
  badVerb(a, e);
  goto B_b;
  label B_eb:
  writeString(a, 74031, 23);
  goto B_b;
  label B_db:
  writeString(a, 74206, 5);
  label B_b:
  0[19911]:int = h;
  g_a = g + 640;
  return ;
  label B_a:
  runtime_nilPanic();
  unreachable;
}

function catchPanic() {
}

function fmt0x64(a:int, b:long, c:int) {
  if (a) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  var d:int = a + 40;
  var e:int = d[0]:ubyte;
  d[0]:byte = c & 1;
  fmtInteger(a + 32, b, 16, 0, 118, 74168);
  d[0]:byte = e & 1;
}

function fmtInteger(a:int, b:long, c:int, d:int, e:int, f:ubyte_ptr) {
  var m:int;
  var o:byte_ptr;
  var n:int;
  var o:byte_ptr;
  var o:byte_ptr;
  var n:int;
  var o:byte_ptr;
  var o:byte_ptr;
  var n:int;
  var o:byte_ptr;
  var o:byte_ptr;
  var o:byte_ptr;
  var m:int;
  var o:byte_ptr;
  var o:byte_ptr;
  var o:byte_ptr;
  var o:byte_ptr;
  var o:byte_ptr;
  var o:byte_ptr;
  var o:byte_ptr;
  var n:int;
  var o:byte_ptr;
  var o:byte_ptr;
  var o:byte_ptr;
  var o:byte_ptr;
  var o:byte_ptr;
  var o:byte_ptr;
  var o:byte_ptr;
  var o:byte_ptr;
  var o:byte_ptr;
  var o:byte_ptr;
  var o:byte_ptr;
  var o:byte_ptr;
  var o:byte_ptr;
  var o:byte_ptr;
  var o:byte_ptr;
  var m:int;
  var g:int = g_a - 16;
  g_a = g;
  g[3]:int = 0;
  g[1]:long@4 = 2L;
  var h:int = 0[19911]:int;
  0[19911]:int = g;
  g[0]:int = h;
  if (a) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  var i:long = 0L - b;
  var j:int = b < 0L & d;
  var k:int = a + 24;
  var l:int = 68;
  if (a[4]:ubyte) goto B_c;
  if (eqz((a + 5)[0]:ubyte)) goto B_b;
  label B_c:
  d = a[4]:int + a[5]:int + 3;
  if (d < 69) goto B_b;
  (g + 12)[0]:int = (k = runtime_alloc(d));
  l = d;
  label B_b:
  b = select_if(i, b, j);
  (g + 8)[0]:int = k;
  if (eqz((a + 5)[0]:ubyte)) goto B_e;
  m = a[5]:int;
  if (b != 0L) goto B_d;
  if (m) goto B_d;
  d = a + 10;
  l = d[0]:ubyte;
  d[0]:byte = 0;
  writePadding(a, a[4]:int);
  0[19911]:int = h;
  d[0]:byte = l & 1;
  g_a = g + 16;
  return ;
  label B_e:
  m = 0;
  if (eqz((a + 10)[0]:ubyte)) goto B_d;
  if (eqz(a[4]:ubyte)) goto B_d;
  m = a[4]:int;
  if (j) goto B_f;
  if ((a + 7)[0]:ubyte) goto B_f;
  if (eqz((a + 9)[0]:ubyte)) goto B_d;
  label B_f:
  m = m + -1;
  label B_d:
  br_table[B_l, B_m, B_m, B_k, B_i, B_m, B_m, B_j, ..B_m](c + -2 << 31)
  label B_m:
  runtime_panic(34, 74096);
  unreachable;
  label B_l:
  n = k + -1;
  d = l;
  loop L_n {
    if (b < 2L) goto B_h;
    o = d + -1;
    if (o >= l) goto B_g;
    (n + d)[0]:byte = (i32_wrap_i64(b) & 1) | 48;
    b = b >> 1L;
    d = o;
    continue L_n;
  }
  label B_k:
  n = k + -1;
  d = l;
  loop L_o {
    if (b < 8L) goto B_h;
    o = d + -1;
    if (o >= l) goto B_g;
    (n + d)[0]:byte = (i32_wrap_i64(b) & 7) | 48;
    b = b >> 3L;
    d = o;
    continue L_o;
  }
  label B_j:
  n = k + -1;
  d = l;
  loop L_p {
    if (b < 16L) goto B_h;
    o = d + -1;
    if (o >= l) goto B_g;
    (n + d)[0]:byte = (f + (i32_wrap_i64(b) & 15))[0]:ubyte;
    b = b >> 4L;
    d = o;
    continue L_p;
  }
  label B_i:
  n = k + -1;
  d = l;
  loop L_q {
    if (b < 10L) goto B_h;
    i = b / 10L;
    o = d + -1;
    if (o >= l) goto B_g;
    (n + d)[0]:byte = b + i * -10L + 48L;
    b = i;
    d = o;
    continue L_q;
  }
  label B_h:
  o = d + -1;
  if (o >= l) goto B_g;
  (k + o)[0]:byte = (n = (f + i32_wrap_i64(b))[0]:ubyte);
  o = 1 - d;
  d = d + -3;
  loop L_s {
    if (d + 2 < 1) goto B_r;
    if (m <= l + o) goto B_r;
    if (d + 1 >= l) goto B_g;
    n = 48;
    (k + d + 1)[0]:byte = 48;
    o = o + 1;
    d = d + -1;
    continue L_s;
  }
  label B_r:
  o = d + 2;
  if (eqz((a + 8)[0]:ubyte)) goto B_t;
  if (c == 2) goto B_v;
  if (c == 8) goto B_u;
  if (c != 16) goto B_t;
  if (d + 1 >= l) goto B_g;
  o = k + d;
  (o + 1)[0]:byte = f[16];
  if (d >= l) goto B_g;
  o[0] = 48;
  o = d;
  goto B_t;
  label B_v:
  if (d + 1 >= l) goto B_g;
  o = k + d;
  (o + 1)[0]:byte = 98;
  if (d >= l) goto B_g;
  o[0] = 48;
  o = d;
  goto B_t;
  label B_u:
  if (l <= o) goto B_g;
  if ((n & 255) == 48) goto B_t;
  o = d + 1;
  if (o >= l) goto B_g;
  (k + d + 1)[0]:byte = 48;
  label B_t:
  if (e != 79) goto B_w;
  d = o + -1;
  if (d >= l) goto B_g;
  (k + d)[0]:byte = 111;
  o = o + -2;
  if (o >= l) goto B_g;
  (k + o)[0]:byte = 48;
  label B_w:
  if (eqz(j)) goto B_z;
  d = 45;
  o = o + -1;
  if (o >= l) goto B_g;
  goto B_y;
  label B_z:
  if (eqz((a + 7)[0]:ubyte)) goto B_aa;
  d = 43;
  o = o + -1;
  if (o >= l) goto B_g;
  goto B_y;
  label B_aa:
  if (eqz((a + 9)[0]:ubyte)) goto B_x;
  d = 32;
  o = o + -1;
  if (o >= l) goto B_g;
  label B_y:
  (k + o)[0]:byte = d;
  label B_x:
  d = a + 10;
  m = d[0]:ubyte;
  d[0]:byte = 0;
  if (l > l) goto B_ba;
  if (l < o) goto B_ba;
  pad(a, k + o, l - o);
  0[19911]:int = h;
  a[10]:byte = m & 1;
  g_a = g + 16;
  return ;
  label B_ba:
  runtime_slicePanic();
  unreachable;
  label B_g:
  runtime_lookupPanic();
  unreachable;
}

function fmtBool(a:int, b:int, c:int) {
  br_table[B_a, B_b, B_a, ..B_b](c + -116)
  label B_b:
  badVerb(a, c);
  return ;
  label B_a:
  if (eqz(a)) goto B_c;
  a = a + 32;
  if (eqz(b & 1)) goto B_d;
  padString(a, 74159, 4);
  return ;
  label B_d:
  padString(a, 74163, 5);
  return ;
  label B_c:
  runtime_nilPanic();
  unreachable;
}

function padString(a:int, b:int, c:int) {
  var j:int;
  var k:int;
  var h:int;
  var g:int;
  var f:int;
  var g:int;
  var d:int = g_a - 32;
  g_a = d;
  d[7]:int = 0;
  d[5]:long@4 = 0L;
  d[3]:long@4 = 4L;
  var e:int = 0[19911]:int;
  0[19911]:int = d + 8;
  d[2]:int = e;
  if (a) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  if (eqz(a[4]:ubyte)) goto B_e;
  f = a[4]:int;
  if (eqz(f)) goto B_e;
  (d + 20)[0]:int = d;
  g = 0;
  loop L_f {
    if (g >= c) goto B_k;
    if (g >= c) goto B_d;
    h = (b + g)[0]:byte;
    if (h > -1) goto B_h;
    var i:int = h & 255;
    h = (i + 68656)[0]:ubyte;
    if (h == 241) goto B_h;
    if (g + (j = h & 7) > c) goto B_h;
    d[1]:byte = (k = ((h = h >> 3 & 30) + 68913)[0]:ubyte);
    d[0]:byte = (h = (h + 68912)[0]:ubyte);
    var l:int = g + 1;
    if (l >= c) goto B_d;
    l = (b + l)[0]:ubyte;
    if (l < (h & 255)) goto B_j;
    if ((k & 255) < l) goto B_j;
    h = 2;
    if (i + -194 < 30) goto B_i;
    h = g + 2;
    if (h >= c) goto B_d;
    l = (b + h)[0]:byte;
    if (l > -1) goto B_j;
    h = 1;
    if ((l & 255) > 191) goto B_i;
    h = 3;
    if ((i & 240) == 224) goto B_i;
    h = g + 3;
    if (h >= c) goto B_d;
    h = select_if(1,
                  select_if(1, j, (h = (b + h)[0]:ubyte) > 191),
                  (h << 24) >> 24 > -1);
    goto B_i;
    label B_k:
    if (eqz((a + 6)[0]:ubyte)) goto B_c;
    (d + 24)[0]:int = (g = a[0]:int);
    writeString(g, b, c);
    writePadding(a, f);
    goto B_b;
    label B_j:
    h = 1;
    label B_i:
    g = h + g;
    goto B_g;
    label B_h:
    g = g + 1;
    label B_g:
    f = f + -1;
    continue L_f;
  }
  label B_e:
  (d + 28)[0]:int = (g = a[0]:int);
  writeString(g, b, c);
  0[19911]:int = e;
  g_a = d + 32;
  return ;
  label B_d:
  runtime_lookupPanic();
  unreachable;
  label B_c:
  writePadding(a, f);
  (d + 16)[0]:int = (g = a[0]:int);
  writeString(g, b, c);
  label B_b:
  0[19911]:int = e;
  g_a = d + 32;
}

function fmtBytes(a:int, b:int, c:int, d:int, e:int, f:{ a:int, b:int, c:int }, g:int) {
  var n:int;
  var o:int;
  var p:long;
  var h:int = g_a - 64;
  g_a = h;
  h[13]:long@4 = 0L;
  h[11]:long@4 = 0L;
  h[9]:long@4 = 5L;
  var i:int = 0[19911]:int;
  0[19911]:int = h + 32;
  h[8]:int = i;
  br_table[B_k, B_o, B_m, B_o, B_o, B_p, B_o, B_i, ..B_q](e + -113)
  label B_q:
  if (e == 88) goto B_j;
  if (e != 100) goto B_o;
  label B_p:
  if (a) goto B_n;
  goto B_a;
  label B_o:
  (h + 40)[0]:int = (f = runtime_alloc(12));
  (h + 32 + 12)[0]:int = f;
  f.c = d;
  f.b = c;
  f.a = b;
  reflect_ValueOf(h + 8, 519, f);
  (h + 48)[0]:int = (f = h[3]:int);
  printValue(a, h[2]:int, f, 2, e, 0);
  goto B_c;
  label B_n:
  if (eqz((a + 44)[0]:ubyte)) goto B_e;
  writeString(a, f, g);
  if (eqz(b)) goto B_l;
  writeByte(a, 123);
  f = 0;
  e = select_if(c, 0, c > 0);
  goto B_d;
  label B_m:
  if (eqz(a)) goto B_a;
  if (eqz((a + 37)[0]:ubyte)) goto B_g;
  (h + 32 + 20)[0]:int = h + 24;
  e = (a + 52)[0]:int + -1;
  f = 0;
  loop L_r {
    if (f >= c) goto B_g;
    if (e > -1) goto B_s;
    if (f <= d) goto B_f;
    goto B_h;
    label B_s:
    if (f >= c) goto B_b;
    g = 1;
    var j:{ a:byte, b:ubyte, c:byte, d:byte } = b + f;
    var k:int = j.a;
    if (k >= 0) goto B_t;
    if (c > d) goto B_h;
    if (f > c) goto B_h;
    g = 0;
    var l:int = c - f;
    if (l <= 0) goto B_t;
    var m:int = 1;
    k = k & 255;
    if (k + -194 > 50) goto B_u;
    h[25]:byte = 
      (n = ((g = (m = (k + 68656)[0]:ubyte) >> 3 & 30) + 68913)[0]:ubyte);
    h[24]:byte = (o = (g + 68912)[0]:ubyte);
    g = 1;
    if (l < (m & 7)) goto B_t;
    if (l < 2) goto B_b;
    m = j.b;
    if (m < (o & 255)) goto B_t;
    if ((n & 255) < m) goto B_t;
    m = 2;
    if (k + -224 > 20) goto B_u;
    if (l < 3) goto B_b;
    m = j.c;
    if (m > -1) goto B_t;
    if ((m & 255) > 191) goto B_t;
    m = 3;
    if (k + -240 > 4) goto B_u;
    if (l < 4) goto B_b;
    k = j.d;
    if (k > -1) goto B_t;
    m = 4;
    if ((k & 255) > 191) goto B_t;
    label B_u:
    g = m;
    label B_t:
    e = e + -1;
    f = g + f;
    continue L_r;
  }
  label B_l:
  writeString(a, 74137, 5);
  0[19911]:int = i;
  g_a = h + 64;
  return ;
  label B_k:
  if (eqz(a)) goto B_a;
  runtime_stringFromBytes(h + 16, b, c, d);
  (h + 56)[0]:int = (f = h[4]:int);
  fmtQ(a + 32, f, h[5]:int);
  goto B_c;
  label B_j:
  if (eqz(a)) goto B_a;
  fmtBx(a + 32, b, c, 74142);
  goto B_c;
  label B_i:
  if (eqz(a)) goto B_a;
  fmtBx(a + 32, b, c, 74168);
  goto B_c;
  label B_h:
  runtime_slicePanic();
  unreachable;
  label B_g:
  f = c;
  label B_f:
  pad(a + 32, b, f);
  goto B_c;
  label B_e:
  d = a + 32;
  writeByte(a, 91);
  g = select_if(c, 0, c > 0);
  f = 0;
  loop L_w {
    if (g == f) goto B_v;
    if (c == f) goto B_b;
    p = (b + f)[0]:ubyte;
    if (eqz(f)) goto B_x;
    writeByte(a, 32);
    label B_x:
    fmtInteger(d, p, 10, 0, e, 74168);
    f = f + 1;
    continue L_w;
  }
  label B_v:
  writeByte(a, 93);
  goto B_c;
  label B_d:
  loop L_z {
    if (e == f) goto B_y;
    if (c == f) goto B_b;
    p = (b + f)[0]:ubyte;
    if (eqz(f)) goto B_aa;
    writeString(a, 74204, 2);
    label B_aa:
    fmt0x64(a, p, 1);
    f = f + 1;
    continue L_z;
  }
  label B_y:
  writeByte(a, 125);
  label B_c:
  0[19911]:int = i;
  g_a = h + 64;
  return ;
  label B_b:
  runtime_lookupPanic();
  unreachable;
  label B_a:
  runtime_nilPanic();
  unreachable;
}

function fmtQ(a:int, b:int, c:int) {
  var f:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var d:int = g_a - 80;
  g_a = d;
  d[19]:int = 0;
  d[17]:long@4 = 0L;
  d[15]:long@4 = 0L;
  d[13]:long@4 = 6L;
  var e:int = 0[19911]:int;
  0[19911]:int = d + 48;
  d[12]:int = e;
  truncateString(d + 40, a, b, c);
  d[14]:int = (f = d[10]:int);
  if (a) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  var g:int = d[11]:int;
  if (eqz((a + 8)[0]:ubyte)) goto B_b;
  var h:int_ptr = d + 60;
  c = f;
  b = g;
  loop L_c {
    h[0] = c;
    if (b < 1) goto B_e;
    unicode_utf8_DecodeRuneInString(d + 16, c, b);
    if (b >= (i = d[5]:int)) goto B_f;
    runtime_slicePanic();
    unreachable;
    label B_f:
    j = d[4]:int;
    b = b - i;
    c = c + i;
    if (i <= 1) goto B_d;
    if (j != 65279) continue L_c;
    goto B_b;
    label B_e:
    runtime_stringConcat(d + 32, 74084, 1, f, g);
    (d + 64)[0]:int = (b = d[8]:int);
    runtime_stringConcat(d + 24, b, d[9]:int, 74084, 1);
    (d + 68)[0]:int = (b = d[6]:int);
    padString(a, b, d[7]:int);
    0[19911]:int = e;
    g_a = d + 80;
    return ;
    label B_d:
    if (j == 65533) goto B_b;
    if (j > 31) goto B_g;
    if (j != 9) goto B_b;
    label B_g:
    if (j == 96) goto B_b;
    if (j != 127) continue L_c;
  }
  label B_b:
  strconv_appendQuotedWith(d, a + 24, f, g, (a + 7)[0]:ubyte);
  (d + 76)[0]:int = (b = d[0]:int);
  (d + 48 + 24)[0]:int = b;
  pad(a, b, d[1]:int);
  0[19911]:int = e;
  g_a = d + 80;
}

function fmtBx(a:int, b:int, c:int, d:int) {
  fmtSbx(a, 0, 0, b, c, d)
}

function pad(a:int, b:int, c:int) {
  var h:int;
  var h:int;
  var h:int;
  var j:int;
  var h:int;
  var k:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var g:int;
  var f:int;
  var g:int;
  var d:int = g_a - 32;
  g_a = d;
  d[7]:int = 0;
  d[5]:long@4 = 0L;
  d[3]:long@4 = 4L;
  var e:int = 0[19911]:int;
  0[19911]:int = d + 8;
  d[2]:int = e;
  if (a) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  if (eqz(a[4]:ubyte)) goto B_e;
  f = a[4]:int;
  if (eqz(f)) goto B_e;
  (d + 20)[0]:int = d;
  g = 0;
  loop L_f {
    if (g >= c) goto B_l;
    if (g >= c) goto B_d;
    h = (b + g)[0]:byte;
    if (h <= -1) goto B_k;
    goto B_j;
    label B_l:
    if (eqz((a + 6)[0]:ubyte)) goto B_c;
    (d + 24)[0]:int = (g = a[0]:int);
    write(g, b, c);
    writePadding(a, f);
    goto B_b;
    label B_k:
    var i:int = h & 255;
    h = (i + 68656)[0]:ubyte;
    if (h == 241) goto B_j;
    if (g + (j = h & 7) > c) goto B_j;
    d[1]:byte = (k = ((h = h >> 3 & 30) + 68913)[0]:ubyte);
    d[0]:byte = (h = (h + 68912)[0]:ubyte);
    var l:int = g + 1;
    if (l >= c) goto B_d;
    l = (b + l)[0]:ubyte;
    if (l < (h & 255)) goto B_i;
    if ((k & 255) < l) goto B_i;
    h = 2;
    if (i + -194 < 30) goto B_h;
    h = g + 2;
    if (h >= c) goto B_d;
    l = (b + h)[0]:byte;
    if (l > -1) goto B_i;
    h = 1;
    if ((l & 255) > 191) goto B_h;
    h = 3;
    if ((i & 240) == 224) goto B_h;
    h = g + 3;
    if (h >= c) goto B_d;
    h = select_if(1,
                  select_if(1, j, (h = (b + h)[0]:ubyte) > 191),
                  (h << 24) >> 24 > -1);
    goto B_h;
    label B_j:
    g = g + 1;
    goto B_g;
    label B_i:
    h = 1;
    label B_h:
    g = h + g;
    label B_g:
    f = f + -1;
    continue L_f;
  }
  label B_e:
  (d + 28)[0]:int = (g = a[0]:int);
  write(g, b, c);
  0[19911]:int = e;
  g_a = d + 32;
  return ;
  label B_d:
  runtime_lookupPanic();
  unreachable;
  label B_c:
  writePadding(a, f);
  (d + 16)[0]:int = (g = a[0]:int);
  write(g, b, c);
  label B_b:
  0[19911]:int = e;
  g_a = d + 32;
}

function fmtComplex(a:int, b:double, c:double, d:int, e:int) {
  var f:int;
  var f:int;
  var f:int;
  f = e + -88;
  if (f > 15) goto B_d;
  if (1 << f & 58369) goto B_c;
  label B_d:
  if (e + -69 < 3) goto B_c;
  br_table[B_c, B_b, B_c, ..B_b](e + -118);
  label B_c:
  if (eqz(a)) goto B_a;
  f = a + 39;
  var g:int = f[0]:ubyte;
  writeByte(a, 40);
  fmtFloat(a, b, d = d / 2, e);
  f[0]:byte = 1;
  fmtFloat(a, c, d, e);
  writeString(a, 74135, 2);
  f[0]:byte = g & 1;
  return ;
  label B_b:
  badVerb(a, e);
  return ;
  label B_a:
  runtime_nilPanic();
  unreachable;
}

function fmtFloat(a:int, b:double, c:int, d:int) {
  if (d > 97) goto B_h;
  br_table[B_c, B_b, B_d, ..B_g](d + -69);
  label B_h:
  br_table[B_d, B_f, B_f, B_c, B_c, B_d, ..B_i](d + -98)
  label B_i:
  br_table[B_e, B_f, B_d, ..B_f](d + -118);
  label B_g:
  if (d == 88) goto B_d;
  label B_f:
  badVerb(a, d);
  return ;
  label B_e:
  if (eqz(a)) goto B_a;
  fmtFloat_1(a + 32, b, c, 103, -1);
  return ;
  label B_d:
  if (eqz(a)) goto B_a;
  fmtFloat_1(a + 32, b, c, d, -1);
  return ;
  label B_c:
  if (eqz(a)) goto B_a;
  fmtFloat_1(a + 32, b, c, d, 6);
  return ;
  label B_b:
  if (eqz(a)) goto B_a;
  fmtFloat_1(a + 32, b, c, 102, 6);
  return ;
  label B_a:
  runtime_nilPanic();
  unreachable;
}

function fmtFloat_1(a:int, b:double, c:int, d:ubyte_ptr, e:int_ptr) {
  var i:int;
  var i:int;
  var k:long;
  var l:int_ptr;
  var h:long;
  var i:int;
  var o:int;
  var h:long;
  var h:long;
  var i:int;
  var i:int;
  var h:long;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var h:long;
  var h:long;
  var h:long;
  var h:long;
  var i:int;
  var h:long;
  var h:long;
  var h:long;
  var h:long;
  var i:int;
  var h:long;
  var h:long;
  var h:long;
  var h:long;
  var h:long;
  var h:long;
  var h:long;
  var h:long;
  var i:int;
  var h:long;
  var h:long;
  var h:long;
  var s:int;
  var h:long;
  var i:int;
  var h:long;
  var h:long;
  var h:long;
  var s:int;
  var u:int_ptr;
  var i:int;
  var h:long;
  var h:long;
  var u:int_ptr;
  var w:int_ptr;
  var x:long;
  var u:int_ptr;
  var u:int_ptr;
  var s:int;
  var s:int;
  var v:int;
  var y:int_ptr;
  var u:int_ptr;
  var z:long;
  var aa:int;
  var w:int_ptr;
  var s:int;
  var x:long;
  var z:long;
  var w:int_ptr;
  var x:long;
  var aa:int;
  var x:long;
  var x:long;
  var x:long;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var s:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var h:long;
  var i:int;
  var s:int;
  var i:int;
  var i:int;
  var h:long;
  var i:int;
  var h:long;
  var i:int;
  var i:int;
  var ba:int_ptr;
  var s:int;
  var i:int;
  var i:int;
  var i:int;
  var z:long;
  var z:long;
  var z:long;
  var w:int_ptr;
  var z:long;
  var da:long;
  var aa:int;
  var w:int_ptr;
  var s:int;
  var u:int_ptr;
  var ca:int_ptr;
  var ba:int_ptr;
  var ba:int_ptr;
  var t:int;
  var v:int;
  var da:long;
  var x:long;
  var s:int;
  var aa:int;
  var aa:int;
  var y:int_ptr;
  var w:int_ptr;
  var s:int;
  var da:long;
  var x:long;
  var z:long;
  var w:int_ptr;
  var da:long;
  var aa:int;
  var y:int_ptr;
  var da:long;
  var x:long;
  var w:int_ptr;
  var h:long;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var t:int;
  var s:int;
  var h:long;
  var ba:int_ptr;
  var h:long;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var ba:int_ptr;
  var i:int;
  var i:int;
  var aa:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var ca:int_ptr;
  var v:int;
  var i:int;
  var i:int;
  var ca:int_ptr;
  var t:int;
  var i:int;
  var s:int;
  var y:int_ptr;
  var u:int_ptr;
  var i:int;
  var i:int;
  var ca:int_ptr;
  var t:int;
  var i:int;
  var s:int;
  var w:int_ptr;
  var r:int_ptr;
  var s:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var f:int = g_a - 976;
  g_a = f;
  f[105]:long = 0L;
  f[104]:long = 0L;
  f[103]:long = 0L;
  f[102]:long = 0L;
  f[101]:long = 0L;
  f[100]:long = 0L;
  f[99]:long = 0L;
  f[98]:long = 0L;
  f[97]:long = 0L;
  f[96]:long = 0L;
  f[95]:long = 0L;
  f[94]:long = 0L;
  f[93]:long = 0L;
  f[92]:long = 0L;
  f[91]:long = 0L;
  f[90]:long = 0L;
  f[89]:long = 0L;
  f[88]:long = 0L;
  f[87]:long = 0L;
  f[86]:long = 0L;
  f[85]:long = 0L;
  f[84]:long = 0L;
  f[83]:long = 0L;
  f[82]:long = 0L;
  f[81]:long = 0L;
  f[80]:long = 0L;
  f[79]:long = 0L;
  f[78]:long = 0L;
  f[77]:long = 0L;
  f[76]:long = 0L;
  f[75]:long = 0L;
  f[74]:long = 399431958528L;
  f[242]:int = 0;
  f[120]:long = 0L;
  f[119]:long = 0L;
  f[118]:long = 0L;
  f[117]:long = 0L;
  f[116]:long = 0L;
  f[115]:long = 0L;
  f[114]:long = 0L;
  f[113]:long = 0L;
  f[112]:long = 0L;
  f[111]:long = 0L;
  f[110]:long = 0L;
  f[109]:long = 0L;
  f[108]:long = 0L;
  f[107]:long = 0L;
  f[106]:long = 0L;
  var g:int = 0[19911]:int;
  0[19911]:int = f + 592;
  f[148]:int = g;
  if (a) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  if (eqz((a + 5)[0]:ubyte)) goto B_b;
  e = a[5]:int;
  label B_b:
  (f + 844)[0]:int = f + 488;
  (f + 848)[0]:int = f + 472;
  (f + 852)[0]:int = f + 456;
  (f + 908)[0]:int = f + 440;
  if (c == 64) goto B_e;
  if (c != 32) goto B_d;
  (f + 660)[0]:int = f + 508;
  (f + 664)[0]:int = f + 508;
  (f + 656)[0]:int = f + 508;
  h = i64_extend_i32_u(i32_reinterpret_f32(f32_demote_f64(b)));
  i = 75644;
  goto B_c;
  label B_e:
  (f + 940)[0]:int = f + 560;
  (f + 944)[0]:int = f + 560;
  (f + 936)[0]:int = f + 560;
  h = i64_reinterpret_f64(b);
  i = 75656;
  goto B_c;
  label B_d:
  runtime_panic(34, 73720);
  unreachable;
  label B_c:
  var j:int = a + 24;
  (f + 668)[0]:int = i;
  var m:long = 
    select_if(0L, 1L << (k = i64_extend_i32_u(c = i[0]:int)), l = c > 63);
  var n:long = m + -1L & h;
  var p:int_ptr = c + (o = i[1]:int);
  var q:int_ptr = p < 64 & h >> i64_extend_i32_u(p) != 0L;
  o = select_if(0, i32_wrap_i64(h >> k), l) & 
      (l = select_if(-1, -1 << o ^ -1, o > 31));
  if (o != l) goto B_k;
  (f + 672)[0]:int = 
    (i = select_if(select_if(73708, 73712, q), 73716, c = eqz(n)));
  runtime_sliceAppend(f + 80, j, i, 1, 68, select_if(4, 3, c));
  (f + 676)[0]:int = (c = f[20]:int);
  l = f[22]:int;
  i = f[21]:int;
  goto B_j;
  label B_k:
  h = select_if(m, 0L, o) | n;
  r = i[2]:int + select_if(o, 1, o);
  o = d & 255;
  if (o == 88) goto B_o;
  if (o == 120) goto B_o;
  if (o != 98) goto B_n;
  (f + 680)[0]:int = f + 508;
  (f + 700)[0]:int = f + 516;
  (f + 708)[0]:int = f + 512;
  if (q) goto B_q;
  c = 68;
  o = 1;
  goto B_p;
  label B_q:
  f[127]:int = 0;
  f[508]:byte = 45;
  runtime_sliceAppend(f + 240, j, f + 508, 1, 68, 1);
  (f + 684)[0]:int = (j = f[60]:int);
  c = f[62]:int;
  o = f[61]:int;
  label B_p:
  (f + 688)[0]:int = j;
  strconv_formatBits(f + 216, j, o, c, h, 0);
  (f + 696)[0]:int = f[57]:int;
  (f + 692)[0]:int = (c = f[54]:int);
  f[129]:int = 0;
  f[516]:byte = 112;
  runtime_sliceAppend(f + 200, c, f + 516, f[55]:int, f[56]:int, 1);
  (f + 592 + 112)[0]:int = (c = f[50]:int);
  o = f[52]:int;
  j = f[51]:int;
  i = r - i[0]:int;
  if (i < 0) goto B_r;
  f[128]:int = 0;
  f[512]:byte = 43;
  runtime_sliceAppend(f + 184, c, f + 512, j, o, 1);
  (f + 712)[0]:int = (c = f[46]:int);
  o = f[48]:int;
  j = f[47]:int;
  label B_r:
  (f + 716)[0]:int = c;
  strconv_formatBits(f + 160, c, j, o, i64_extend_i32_s(i), i >> 31);
  (f + 728)[0]:int = (c = f[40]:int);
  (f + 724)[0]:int = f[43]:int;
  (f + 720)[0]:int = c;
  l = f[42]:int;
  i = f[41]:int;
  goto B_j;
  label B_o:
  (f + 736)[0]:int = f + 508;
  (f + 748)[0]:int = f + 516;
  (f + 756)[0]:int = f + 512;
  (f + 772)[0]:int = f + 560;
  (f + 780)[0]:int = f + 544;
  (f + 788)[0]:int = f + 540;
  (f + 792)[0]:int = f + 536;
  (f + 796)[0]:int = f + 532;
  (f + 800)[0]:int = f + 528;
  (f + 812)[0]:int = f + 524;
  (f + 820)[0]:int = f + 520;
  i = select_if(0, r, eqz(h));
  h = select_if(0L, h << i64_extend_i32_u(c = 60 - c), c > 63);
  loop L_t {
    if (eqz(h)) goto B_s;
    if ((h & 1152921504606846976L) != 0L) goto B_s;
    i = i + -1;
    h = h << 1L;
    continue L_t;
  }
  label B_s:
  if (e > 14) goto B_u;
  n = h >> (k = i64_extend_i32_u(60 - (c = e << 2)));
  h = 
    n + 
    i64_extend_i32_u(
      ((h << i64_extend_i32_u(c) & 1152921504606846975L) | (n & 1L)) > 
      576460752303423488L) << 
    k;
  if (eqz(h & 2305843009213693952L)) goto B_u;
  i = i + 1;
  h = h >> 1L;
  label B_u:
  (f + 732)[0]:int = (p = select_if(73999, 74015, (d & 255) == 88));
  if (q) goto B_w;
  c = 68;
  o = 1;
  goto B_v;
  label B_w:
  f[127]:int = 0;
  f[508]:byte = 45;
  runtime_sliceAppend(f + 416, j, f + 508, 1, 68, 1);
  (f + 740)[0]:int = (j = f[104]:int);
  c = f[106]:int;
  o = f[105]:int;
  label B_v:
  (f + 744)[0]:int = j;
  f[129]:int = 0;
  f[517]:byte = d;
  f[516]:byte = 48;
  f[518]:byte = (i32_wrap_i64(h >> 60L) & 1) | 48;
  runtime_sliceAppend(f + 400, j, f + 516, o, c, 3);
  (f + 752)[0]:int = (c = f[100]:int);
  h = h << 4L;
  o = f[102]:int;
  j = f[101]:int;
  if (e > -1) goto B_m;
  if (eqz(h)) goto B_m;
  f[128]:int = 0;
  f[512]:byte = 46;
  runtime_sliceAppend(f + 352, c, f + 512, j, o, 1);
  (f + 760)[0]:int = (c = f[88]:int);
  n = i64_extend_i32_u(16);
  o = f[90]:int;
  j = f[89]:int;
  q = f + 764;
  s = f + 816;
  loop L_x {
    q[0] = c;
    if (eqz(h)) goto B_l;
    k = h >> 60L;
    if (k >= n) goto B_i;
    l = (p + i32_wrap_i64(k))[0]:ubyte;
    f[131]:int = 0;
    f[524]:byte = l;
    runtime_sliceAppend(f + 336, c, f + 524, j, o, 1);
    s[0]:int = (c = f[84]:int);
    h = h << 4L;
    o = f[86]:int;
    j = f[85]:int;
    continue L_x;
  }
  label B_n:
  (f + 840)[0]:int = (c = runtime_alloc(24));
  if (e > -1) goto B_da;
  (f + 472 + 8)[0]:long = 0L;
  (f + 456 + 8)[0]:long = 0L;
  f[61]:long = 0L;
  f[62]:long = 0L;
  f[59]:long = 0L;
  f[57]:long = 0L;
  (f + 860)[0]:int = f + 560;
  (f + 856)[0]:int = f + 544;
  f[61]:long = h;
  f[572]:byte = 0;
  f[142]:int = 0;
  f[70]:long = 0L;
  f[556]:byte = 0;
  f[138]:int = 0;
  f[68]:long = 0L;
  l = i[0]:int;
  f[500]:byte = q;
  f[124]:int = (o = r - l);
  if (o > 0) goto B_fa;
  if (
    select_if(0L, -1L << (k = i64_extend_i32_u(p = 0 - o)) & h, p = p > 63) != 
    h) goto B_fa;
  o = 0;
  f[124]:int = 0;
  f[61]:long = (k = select_if(0L, h >> k, p));
  n = k;
  l = 0;
  m = k;
  s = 0;
  goto B_ea;
  label B_fa:
  s = o + -1;
  l = select_if(
        s,
        o + -2,
        p = select_if(0L, 1L << i64_extend_i32_u(l), l > 63) != h | 
            r - i[2]:int == 1);
  k = h << 1L;
  n = select_if(k, h << 2L, p) + -1L;
  m = k | 1L;
  k = h;
  label B_ea:
  f[59]:long = n;
  f[120]:int = l;
  f[484]:byte = (p = q & 1);
  f[57]:long = m;
  f[116]:int = s;
  f[468]:byte = p;
  p = runtime_alloc(32);
  c[1]:long@4 = 137438953504L;
  c[0]:int = p;
  (f + 864)[0]:int = p;
  (f + 868)[0]:int = f + 560;
  if (k != 0L) goto B_ga;
  c[20]:byte = q;
  c[3]:long@4 = 0L;
  goto B_z;
  label B_ga:
  if (eqz(o)) goto B_ca;
  goto B_ba;
  label B_da:
  t = e;
  o = d & 255;
  br_table[B_ka, B_ha, B_ja, ..B_la](o + -101);
  label B_la:
  t = e;
  u = e;
  br_table[B_ka, B_ia, B_ja, ..B_ia](o + -69);
  label B_ka:
  u = e + 1;
  t = e;
  goto B_ia;
  label B_ja:
  t = select_if(e, 1, e);
  u = t;
  label B_ia:
  if (u > 15) goto B_ha;
  o = runtime_alloc(24);
  c[1]:long@4 = 103079215128L;
  c[0]:int = o;
  (f + 904)[0]:int = o;
  (f + 912)[0]:int = f + 560;
  f[56]:long = 0L;
  f[452]:byte = q;
  f[112]:int = r - i[0]:int;
  f[55]:long = h;
  if (h != 0L) goto B_ma;
  c[20]:byte = q;
  c[3]:long@4 = 0L;
  goto B_y;
  label B_ma:
  if (eqz(u)) goto B_oa;
  Normalize(f + 440);
  frexp10(f + 152, f + 440);
  v = 0;
  k = f[55]:long;
  m = 
    k - 
    select_if(
      0L,
      (x = 
         i64_extend_i32_u(
           p = select_if(
                 0,
                 i32_wrap_i64(k >> (n = i64_extend_i32_u(w = 0 - f[112]:int))),
                 o = w > 63))) << 
      n,
      o);
  k = 1L;
  y = f[38]:int;
  o = 0;
  loop L_pa {
    if (o == 20) goto B_ra;
    if (k <= x) goto B_qa;
    v = o;
    label B_ra:
    o = 0;
    z = 1L;
    if (v > u) goto B_sa;
    l = p;
    aa = 0;
    goto B_na;
    label B_sa:
    l = v - u;
    if (l > 19) goto B_i;
    aa = 
      p - (l = p / (s = i32_wrap_i64(z = ((l << 3) + 73328)[0]:long))) * s;
    goto B_na;
    label B_qa:
    o = o + 1;
    k = k * 10L;
    continue L_pa;
  }
  label B_oa:
  runtime_panic(34, 73728);
  unreachable;
  label B_na:
  (f + 584)[0]:long = 0L;
  (f + 576)[0]:long = 0L;
  (f + 568)[0]:long = 0L;
  f[70]:long = 0L;
  s = f + 560 + 31;
  loop L_ya {
    if (l) goto B_za;
    ba = f + 592;
    p = 0;
    ca = f + 916;
    l = o;
    loop L_bb {
      if (eqz(l)) goto B_ab;
      ca[0] = (s = c[0]:int);
      if (p >= c[1]:int) goto B_i;
      (s + p)[0]:byte = (ba + l)[0]:ubyte;
      p = p + 1;
      l = l + 1;
      continue L_bb;
    }
    label B_ab:
    c[4]:int = v + y;
    c[3]:int = (l = 0 - o);
    o = u + o;
    if (o >= 1) goto B_db;
    k = 1L;
    goto B_cb;
    label B_db:
    if (z != 1L) goto B_xa;
    if (aa) goto B_xa;
    k = 1L;
    da = select_if(0L, 1L << n, p = w > 63);
    ba = f + 920;
    loop L_fb {
      if (o < 1) goto B_eb;
      if (k * 20L > da) goto B_ha;
      ba[0] = (s = c[0]:int);
      if (l >= c[1]:int) goto B_i;
      k = k * 10L;
      (s + l)[0]:byte = 
        select_if(48, i32_wrap_i64(x = (m = m * 10L) >> n) + 48, p);
      m = m - select_if(0L, x << n, p);
      o = o + -1;
      l = l + 1;
      continue L_fb;
    }
    label B_eb:
    c[3]:int = l;
    label B_cb:
    x = select_if(0L, z << n, o = w > 63);
    if (
      x < (n = m | select_if(0L, i64_extend_i32_u(aa) << n, o))) goto B_wa;
    if (k << 1L > x) goto B_va;
    if (k + n << 1L < x) goto B_ta;
    if (n - k << 1L <= x) goto B_ha;
    i = l + -1;
    p = select_if(i, -1, i < -1);
    l = f + 928;
    loop L_gb {
      if (i <= -1) goto B_ua;
      l[0] = (o = c[0]:int);
      if (i >= c[1]:int) goto B_i;
      if ((o + i)[0]:ubyte == 57) goto B_hb;
      p = i;
      goto B_ua;
      label B_hb:
      c[3]:int = c[3]:int + -1;
      i = i + -1;
      continue L_gb;
    }
    label B_za:
    p = l / 10;
    if (o + 31 > 31) goto B_i;
    (s + o)[0]:byte = p * -10 + l + 48;
    o = o + -1;
    l = p;
    continue L_ya;
  }
  label B_xa:
  runtime_panic(34, 73736);
  unreachable;
  label B_wa:
  runtime_panic(34, 73744);
  unreachable;
  label B_va:
  runtime_panic(34, 73752);
  unreachable;
  label B_ua:
  (f + 924)[0]:int = (i = c[0]:int);
  o = c[1]:int;
  if (p >= 0) goto B_ib;
  if (eqz(o)) goto B_i;
  i[0]:byte = 49;
  l = 1;
  c[3]:int = 1;
  c[4]:int = c[4]:int + 1;
  goto B_ta;
  label B_ib:
  if (p >= o) goto B_i;
  i = i + p;
  i[0]:byte = i[0]:ubyte + 1;
  l = c[3]:int;
  label B_ta:
  i = l + -1;
  l = f + 932;
  loop L_jb {
    if (i <= -1) goto B_y;
    l[0] = (o = c[0]:int);
    if (i >= c[1]:int) goto B_i;
    o = o + i;
    p = i + -1;
    i = p;
    if (o[0]:ubyte == 48) continue L_jb;
  }
  c[3]:int = p + 2;
  goto B_y;
  label B_ha:
  strconv_bigFtoa(f + 136, j, t, d, q, h, r, i);
  (f + 900)[0]:int = (c = f[34]:int);
  l = f[36]:int;
  i = f[35]:int;
  goto B_j;
  label B_ca:
  if (n != k) goto B_ba;
  if (l) goto B_ba;
  p = q ^ q;
  if (p & 1) goto B_ba;
  if (k != m) goto B_ba;
  if (s) goto B_ba;
  if (p & 1) goto B_ba;
  (f + 576)[0]:long = 0L;
  (f + 568)[0]:long = 0L;
  f[70]:long = 0L;
  o = f + 560 + 23;
  i = 0;
  loop L_lb {
    if (eqz(k)) goto B_kb;
    h = k / 10L;
    if (i + 23 > 23) goto B_i;
    (o + i)[0]:byte = i32_wrap_i64(h * -10L + k) + 48;
    i = i + -1;
    k = h;
    continue L_lb;
  }
  label B_kb:
  o = 0;
  l = 0 - i;
  s = f + 584;
  ba = f + 872;
  loop L_nb {
    if (eqz(i)) goto B_mb;
    ba[0] = (p = c[0]:int);
    if (o >= c[1]:int) goto B_i;
    (p + o)[0]:byte = (s + i)[0]:ubyte;
    i = i + 1;
    o = o + 1;
    continue L_nb;
  }
  label B_mb:
  c[4]:int = l;
  c[3]:int = l;
  o = f + 880;
  loop L_ob {
    if (l > 0) goto B_pb;
    if (l) goto B_aa;
    c[4]:int = 0;
    goto B_aa;
    label B_pb:
    o[0]:int = (i = c[0]:int);
    l = c[3]:int + -1;
    if (l >= c[1]:int) goto B_i;
    if ((i + l)[0]:ubyte != 48) goto B_aa;
    c[3]:int = l;
    continue L_ob;
  }
  label B_ba:
  Normalize(f + 456);
  if (o <= (p = f[116]:int)) goto B_qb;
  f[124]:int = p;
  f[61]:long = select_if(0L, k << i64_extend_i32_u(o = o - p), o > 63);
  label B_qb:
  if (l <= p) goto B_rb;
  f[120]:int = p;
  f[59]:long = select_if(0L, n << i64_extend_i32_u(o = l - p), o > 63);
  label B_rb:
  frexp10(f + 128, f + 456);
  y = f[32]:int;
  Multiply(f + 472,
           k = ((o = f[33]:int << 4) + 71936)[0]:long,
           l = (o + 71944)[0]:int,
           o = (o + 71948)[0]:ubyte);
  Multiply(f + 488, k, l, o);
  f[59]:long = (k = f[59]:long + -1L);
  m = 1L;
  f[57]:long = (z = f[57]:long + 1L);
  x = z - k;
  aa = 0;
  n = 
    z - 
    select_if(
      0L,
      (da = 
         i64_extend_i32_u(
           p = select_if(
                 0,
                 i32_wrap_i64(z >> (k = i64_extend_i32_u(w = 0 - f[116]:int))),
                 o = w > 63))) << 
      k,
      o);
  var ea:long = z - f[61]:long;
  o = 0;
  loop L_tb {
    if (o == 20) goto B_vb;
    if (m <= da) goto B_ub;
    aa = o;
    label B_vb:
    o = aa + -1;
    s = (o << 3) + 73328;
    l = 0;
    u = f + 884;
    v = w > 63;
    loop L_yb {
      if (o == -1) goto B_xb;
      if (o > 19) goto B_i;
      m = s[0]:long;
      u[0] = (ca = c[0]:int);
      ba = p / (t = i32_wrap_i64(m));
      if (l >= c[1]:int) goto B_i;
      (ca + l)[0]:byte = ba + 48;
      da = select_if(0L, i64_extend_i32_u(p = p - ba * t) << k, v) + n;
      if (da < x) goto B_wb;
      o = o + -1;
      s = s + -8;
      l = l + 1;
      continue L_yb;
    }
    label B_xb:
    c[3]:int = aa;
    c[4]:int = aa + y;
    c[20]:byte = f[500]:ubyte & 1;
    m = 1L;
    s = f + 876;
    o = w > 63;
    loop L_zb {
      da = m;
      s[0]:int = (l = c[0]:int);
      p = c[3]:int;
      if (p >= c[1]:int) goto B_i;
      (l + p)[0]:byte = 
        (l = select_if(0, i32_wrap_i64((n = n * 10L) >> k), o)) + 48;
      c[3]:int = c[3]:int + 1;
      n = n - select_if(0L, i64_extend_i32_s(l) << k, o);
      if (n >= (z = (m = da * 10L) * x)) continue L_zb;
    }
    if (strconv_adjustLastDigit(c,
                                n,
                                m * ea,
                                z,
                                select_if(0L, 1L << k, w > 63),
                                da * 20L) & 
        1) goto B_z;
    goto B_sb;
    label B_wb:
    c[4]:int = aa + y;
    c[3]:int = l + 1;
    c[20]:byte = f[500]:ubyte & 1;
    if (
      eqz(
        strconv_adjustLastDigit(c, da, ea, x, select_if(0L, m << k, w > 63), 2L) & 
        1)) goto B_sb;
    goto B_z;
    label B_ub:
    o = o + 1;
    m = m * 10L;
    continue L_tb;
  }
  label B_sb:
  strconv_bigFtoa(f + 112, j, e, d, q, h, r, i);
  (f + 888)[0]:int = (c = f[28]:int);
  l = f[30]:int;
  i = f[29]:int;
  goto B_j;
  label B_aa:
  c[20]:byte = q;
  label B_z:
  i = d & 255;
  br_table[B_ac, B_cc, B_bc, ..B_dc](i + -101);
  label B_dc:
  t = e;
  br_table[B_ac, B_y, B_bc, ..B_y](i + -69);
  label B_cc:
  i = c[3]:int - c[4]:int;
  t = select_if(i, 0, i > 0);
  goto B_y;
  label B_bc:
  t = c[3]:int;
  goto B_y;
  label B_ac:
  i = c[3]:int + -1;
  t = select_if(i, 0, i > 0);
  label B_y:
  (f + 892)[0]:int = (i = c[0]:int);
  strconv_formatDigits(f + 96,
                       j,
                       e >> 31,
                       q,
                       i,
                       c[1]:int,
                       c[2]:int,
                       c[3]:int,
                       c[4]:int,
                       c[20]:ubyte,
                       t,
                       d);
  (f + 896)[0]:int = (c = f[24]:int);
  l = f[26]:int;
  i = f[25]:int;
  goto B_j;
  label B_m:
  if (e < 1) goto B_l;
  f[132]:int = 0;
  f[528]:byte = 46;
  runtime_sliceAppend(f + 384, c, f + 528, j, o, 1);
  (f + 804)[0]:int = (c = f[96]:int);
  n = i64_extend_i32_u(16);
  o = f[98]:int;
  j = f[97]:int;
  s = f + 808;
  ba = f + 824;
  l = e;
  loop L_ec {
    s[0]:int = c;
    if (eqz(l)) goto B_l;
    k = h >> 60L;
    if (k >= n) goto B_i;
    q = (p + i32_wrap_i64(k))[0]:ubyte;
    f[130]:int = 0;
    f[520]:byte = q;
    runtime_sliceAppend(f + 368, c, f + 520, j, o, 1);
    ba[0] = (c = f[92]:int);
    l = l + -1;
    h = h << 4L;
    o = f[94]:int;
    j = f[93]:int;
    continue L_ec;
  }
  label B_l:
  (f + 768)[0]:int = c;
  f[140]:int = 0;
  f[560]:byte = select_if(112, 80, ((d | 32) & 255) == (d & 255));
  runtime_sliceAppend(f + 320, c, f + 560, j, o, 1);
  (f + 776)[0]:int = (c = f[80]:int);
  f[136]:int = 0;
  f[544]:byte = select_if(45, 43, i < 0);
  runtime_sliceAppend(f + 304, c, f + 544, f[81]:int, f[82]:int, 1);
  (f + 784)[0]:int = (o = f[76]:int);
  j = f[78]:int;
  l = f[77]:int;
  c = i + (c = i >> 31) ^ c;
  if (c > 99) goto B_gc;
  f[135]:int = 0;
  f[540]:byte = (i = c / 10) + 48;
  f[541]:byte = c - i * 10 + 48;
  runtime_sliceAppend(f + 256, o, f + 540, l, j, 2);
  l = f[66]:int;
  i = f[65]:int;
  c = f[64]:int;
  goto B_fc;
  label B_gc:
  if (c > 999) goto B_hc;
  f[134]:int = 0;
  f[536]:byte = (i = c & 65535) / 100 + 48;
  f[538]:byte = c - (i = i / 10) * 10 | 48;
  f[537]:byte = (i & 255) % 10 | 48;
  runtime_sliceAppend(f + 272, o, f + 536, l, j, 3);
  l = f[70]:int;
  i = f[69]:int;
  c = f[68]:int;
  goto B_fc;
  label B_hc:
  f[133]:int = 0;
  f[532]:byte = c / 1000 + 48;
  f[534]:byte = (i = c / 10) % 10 | 48;
  f[533]:byte = (c / 100 & 255) % 10 | 48;
  f[535]:byte = c - i * 10 | 48;
  runtime_sliceAppend(f + 288, o, f + 532, l, j, 4);
  l = f[74]:int;
  i = f[73]:int;
  c = f[72]:int;
  label B_fc:
  (f + 832)[0]:int = c;
  (f + 836)[0]:int = c;
  (f + 828)[0]:int = c;
  label B_j:
  (f + 948)[0]:int = c;
  (f + 952)[0]:int = c;
  if (i <= 1) goto B_i;
  br_table[B_kc, B_jc, B_kc, ..B_jc](c[1]:ubyte + -43)
  label B_kc:
  if (i > l) goto B_f;
  c = c + 1;
  l = l + -1;
  i = i + -1;
  goto B_ic;
  label B_jc:
  c[0]:byte = 43;
  label B_ic:
  (f + 600)[0]:int = c;
  if (eqz((a + 9)[0]:ubyte)) goto B_lc;
  if (eqz(i)) goto B_i;
  if (c[0]:ubyte != 43) goto B_lc;
  if ((a + 7)[0]:ubyte) goto B_lc;
  c[0]:byte = 32;
  label B_lc:
  if (i < 2) goto B_i;
  o = c[1]:ubyte;
  if (o == 78) goto B_nc;
  if (o != 73) goto B_mc;
  label B_nc:
  o = a + 10;
  j = o[0]:ubyte;
  o[0]:byte = 0;
  o = c + 1;
  if (o[0]:ubyte != 78) goto B_oc;
  if (a[9]:ubyte) goto B_oc;
  if ((a + 7)[0]:ubyte) goto B_oc;
  if (i > l) goto B_f;
  i = i + -1;
  c = o;
  label B_oc:
  (f + 604)[0]:int = c;
  pad(a, c, i);
  0[19911]:int = g;
  a[10]:byte = j & 1;
  g_a = f + 976;
  return ;
  label B_mc:
  if (d == 98) goto B_pc;
  if (eqz((a + 8)[0]:ubyte & 1)) goto B_pc;
  ca = 0;
  j = 0;
  br_table[B_rc, B_qc, B_rc, ..B_sc](d + -118)
  label B_sc:
  if (d == 103) goto B_rc;
  j = 0;
  if (d != 71) goto B_qc;
  label B_rc:
  j = select_if(6, e, e == -1);
  label B_qc:
  t = 6;
  (f + 608)[0]:int = (q = runtime_alloc(6));
  e = f + 616;
  ba = f + 612;
  v = (d | 32) == 120;
  r = f + 620;
  y = f + 960;
  w = f + 956;
  s = -1;
  aa = 0;
  u = 0;
  o = 1;
  loop L_tc {
    e[0] = c;
    ba[0] = q;
    if (i <= o) goto B_ed;
    if (i <= o) goto B_i;
    d = c + o;
    p = d[0];
    if (p > 79) goto B_dd;
    if (p != 46) goto B_cd;
    aa = 1;
    goto B_uc;
    label B_ed:
    if (aa & 1) goto B_zc;
    if (i == 2) goto B_bd;
    goto B_ad;
    label B_dd:
    if (p == 80) goto B_wc;
    if (p == 101) goto B_yc;
    if (p == 112) goto B_wc;
    goto B_xc;
    label B_cd:
    if (p == 69) goto B_yc;
    goto B_xc;
    label B_bd:
    j = j - (c[1]:ubyte == 48);
    label B_ad:
    f[108]:int = 0;
    (f + 644)[0]:int = f + 432;
    f[432]:byte = 46;
    runtime_sliceAppend(f + 64, c, f + 432, i, l, 1);
    (f + 648)[0]:int = (c = f[16]:int);
    l = f[18]:int;
    i = f[17]:int;
    label B_zc:
    (f + 632)[0]:int = f + 436;
    o = f + 628;
    p = f + 636;
    loop L_gd {
      o[0]:int = c;
      if (j < 1) goto B_fd;
      f[109]:int = 0;
      f[436]:byte = 48;
      runtime_sliceAppend(f + 32, c, f + 436, i, l, 1);
      p[0] = (c = f[8]:int);
      j = j + -1;
      l = f[10]:int;
      i = f[9]:int;
      continue L_gd;
    }
    label B_fd:
    runtime_sliceAppend(f + 48, c, q, i, l, ca);
    (f + 640)[0]:int = (c = f[12]:int);
    l = f[14]:int;
    i = f[13]:int;
    goto B_pc;
    label B_yc:
    if (v) goto B_xc;
    if (i > l) goto B_f;
    if (i < o) goto B_f;
    runtime_sliceAppend(f + 16, q, d, ca, t, i + s);
    y[0] = (q = f[4]:int);
    if (o > l) goto B_f;
    t = f[6]:int;
    ca = f[5]:int;
    goto B_vc;
    label B_xc:
    j = j - ((u = u | p != 48) & 1);
    goto B_uc;
    label B_wc:
    if (i > l) goto B_f;
    if (i < o) goto B_f;
    runtime_sliceAppend(f, q, d, ca, t, i + s);
    w[0] = (q = f[0]:int);
    if (o > l) goto B_f;
    t = f[2]:int;
    ca = f[1]:int;
    label B_vc:
    i = o;
    label B_uc:
    (f + 592 + 32)[0]:int = c;
    r[0] = q;
    s = s + -1;
    o = o + 1;
    continue L_tc;
  }
  label B_pc:
  (f + 652)[0]:int = c;
  if ((a + 7)[0]:ubyte) goto B_hd;
  if (eqz(i)) goto B_i;
  if (c[0]:ubyte == 43) goto B_h;
  label B_hd:
  if (eqz((a + 10)[0]:ubyte)) goto B_g;
  if (eqz(a[4]:ubyte)) goto B_g;
  if (a[4]:int <= i) goto B_g;
  (f + 964)[0]:int = (o = a[0]:int);
  if (eqz(i)) goto B_i;
  writeByte(o, c[0]:ubyte);
  writePadding(a, a[4]:int - i);
  (f + 968)[0]:int = (o = a[0]:int);
  if (i > l) goto B_f;
  write(o, c + 1, i + -1);
  0[19911]:int = g;
  g_a = f + 976;
  return ;
  label B_i:
  runtime_lookupPanic();
  unreachable;
  label B_h:
  if (i > l) goto B_f;
  pad(a, c + 1, i + -1);
  0[19911]:int = g;
  g_a = f + 976;
  return ;
  label B_g:
  pad(a, c, i);
  0[19911]:int = g;
  g_a = f + 976;
  return ;
  label B_f:
  runtime_slicePanic();
  unreachable;
}

function fmtInteger_1(a:byte_ptr, b:long, c:int, d:int) {
  var h:int;
  var g:byte_ptr;
  var h:int;
  var j:int;
  var g:byte_ptr;
  var g:byte_ptr;
  var g:byte_ptr;
  var g:byte_ptr;
  var h:int;
  var g:byte_ptr;
  var g:byte_ptr;
  var h:int;
  var g:byte_ptr;
  var h:int;
  var h:int;
  var j:int;
  var l:int;
  var g:byte_ptr;
  var g:byte_ptr;
  var j:int;
  var h:int;
  var i:int;
  var j:int;
  var g:byte_ptr;
  var h:int;
  var g:byte_ptr;
  var g:byte_ptr;
  var g:byte_ptr;
  var g:byte_ptr;
  var g:byte_ptr;
  var j:int;
  var e:int = g_a - 64;
  g_a = e;
  e[15]:int = 0;
  e[13]:long@4 = 0L;
  e[11]:long@4 = 0L;
  e[9]:long@4 = 6L;
  var f:int = 0[19911]:int;
  0[19911]:int = e + 32;
  e[8]:int = f;
  if (d > 110) goto B_q;
  br_table[B_l, B_h, B_m, ..B_r](d + -98)
  label B_r:
  br_table[B_f, B_o, B_o, B_i, ..B_p](d + -85);
  label B_q:
  br_table[B_k, B_o, B_g, B_o, B_o, B_o, B_o, B_n, B_o, B_j, ..B_o](
    d + -111);
  label B_p:
  if (d == 79) goto B_k;
  label B_o:
  badVerb(a, d);
  goto B_a;
  label B_n:
  if (eqz(a)) goto B_e;
  if (eqz((a + 44)[0]:ubyte)) goto B_s;
  if (eqz(c & 1)) goto B_b;
  label B_s:
  fmtInteger(a + 32, b, 10, c, 118, 74168);
  goto B_a;
  label B_m:
  if (eqz(a)) goto B_e;
  fmtInteger(a + 32, b, 10, c, 100, 74168);
  goto B_a;
  label B_l:
  if (eqz(a)) goto B_e;
  fmtInteger(a + 32, b, 2, c, 98, 74168);
  goto B_a;
  label B_k:
  if (eqz(a)) goto B_e;
  fmtInteger(a + 32, b, 8, c, d, 74168);
  goto B_a;
  label B_j:
  if (eqz(a)) goto B_e;
  fmtInteger(a + 32, b, 16, c, 120, 74168);
  goto B_a;
  label B_i:
  if (eqz(a)) goto B_e;
  fmtInteger(a + 32, b, 16, c, 88, 74142);
  goto B_a;
  label B_h:
  if (eqz(a)) goto B_e;
  d = a + 56;
  pad(a + 32,
      d,
      unicode_utf8_EncodeRune(
        d,
        4,
        select_if(65533, i32_wrap_i64(b), b > 1114111L)));
  goto B_a;
  label B_g:
  if (eqz(a)) goto B_e;
  d = select_if(65533, i32_wrap_i64(b), b > 1114111L);
  c = a + 56;
  g = a + 32;
  if (eqz((a + 39)[0]:ubyte)) goto B_t;
  strconv_appendQuotedRuneWith(e, c, d, 1);
  (e + 44)[0]:int = (d = e[0]:int);
  (e + 40)[0]:int = d;
  pad(g, d, e[1]:int);
  goto B_a;
  label B_t:
  strconv_appendQuotedRuneWith(e + 16, c, d, 0);
  (e + 52)[0]:int = (d = e[4]:int);
  (e + 48)[0]:int = d;
  pad(g, d, e[5]:int);
  goto B_a;
  label B_f:
  if (eqz(a)) goto B_e;
  h = a + 56;
  if (eqz((a + 37)[0]:ubyte)) goto B_d;
  i = (a + 52)[0]:int;
  if (i < 5) goto B_d;
  c = i + 9;
  if (c >= 69) goto B_u;
  c = 68;
  goto B_c;
  label B_u:
  (e + 60)[0]:int = (h = runtime_alloc(c));
  goto B_c;
  label B_e:
  runtime_nilPanic();
  unreachable;
  label B_d:
  c = 68;
  i = 4;
  label B_c:
  (e + 56)[0]:int = h;
  if (b > 1114111L) goto B_y;
  if (eqz((a + 40)[0]:ubyte & 1)) goto B_y;
  g = i32_wrap_i64(b);
  if (eqz(strconv_IsPrint(g) & 1)) goto B_y;
  if (eqz(c)) goto B_v;
  d = -1;
  (h + (j = c + -1))[0]:byte = 39;
  if (g < 128) goto B_z;
  d = -2;
  if (g < 2048) goto B_z;
  d = 1;
  if ((g & -2048) == 55296) goto B_z;
  d = select_if(-3, -4, g < 65536);
  label B_z:
  if (c > c) goto B_w;
  if (c < (d = d + j)) goto B_w;
  unicode_utf8_EncodeRune(h + d, c - d, g);
  g = d + -1;
  if (g >= c) goto B_v;
  (h + g)[0]:byte = 39;
  j = d + -2;
  if (j >= c) goto B_v;
  (h + j)[0]:byte = 32;
  goto B_x;
  label B_y:
  j = c;
  label B_x:
  var k:int = a + 32;
  var m:int = h + (l = j + -1);
  d = 0;
  loop L_ba {
    g = l + d;
    if (b < 16L) goto B_aa;
    if (g >= c) goto B_v;
    (m + d)[0]:byte = ((i32_wrap_i64(b) & 15) + 74142)[0]:ubyte;
    d = d + -1;
    b = b >> 4L;
    continue L_ba;
  }
  label B_aa:
  if (g >= c) goto B_v;
  var n:int = j + h;
  (n + d + -1)[0]:byte = (i32_wrap_i64(b) + 74142)[0]:ubyte;
  l = i + -1;
  h = n + -3;
  loop L_da {
    m = j + d;
    g = m + -2;
    if (l + d < 1) goto B_ca;
    if (g >= c) goto B_v;
    (h + d + 1)[0]:byte = 48;
    d = d + -1;
    continue L_da;
  }
  label B_ca:
  if (g >= c) goto B_v;
  g = n + d;
  (g + -2)[0]:byte = 43;
  if (c <= m + -3) goto B_v;
  g = g + -3;
  g[0] = 85;
  l = a + 42;
  m = l[0]:ubyte;
  l[0]:byte = 0;
  if (c > c) goto B_w;
  pad(k, g, c - j - d + 3);
  a[42] = m & 1;
  goto B_a;
  label B_w:
  runtime_slicePanic();
  unreachable;
  label B_v:
  runtime_lookupPanic();
  unreachable;
  label B_b:
  fmt0x64(a, b, 1);
  label B_a:
  0[19911]:int = f;
  g_a = e + 64;
}

function fmtPointer(a:int, b:int, c:int, d:int, e:int) {
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var h:int;
  var f:int = g_a - 32;
  g_a = f;
  f[0]:long = 0L;
  f[7]:int = 0;
  f[5]:int = 2;
  f[8]:byte = d;
  var g:int = 0[19911]:int;
  0[19911]:int = f + 16;
  f[4]:int = g;
  f[1]:int = c;
  f[0]:int = b;
  f[6]:int = f;
  h = Kind(b, c, d);
  if (h > 25) goto B_i;
  if (eqz(1 << h & 57409536)) goto B_i;
  h = Pointer(b, c, d);
  br_table[B_e, B_g, B_j, B_j, B_j, B_j, B_j, B_h, B_j, B_e, ..B_k](
    e + -111)
  label B_k:
  br_table[B_e, B_j, B_e, ..B_l](e + -98)
  label B_l:
  if (e == 88) goto B_e;
  label B_j:
  badVerb(a, e);
  goto B_a;
  label B_i:
  badVerb(a, e);
  0[19911]:int = g;
  g_a = f + 32;
  return ;
  label B_h:
  if (eqz(a)) goto B_f;
  if (eqz((a + 44)[0]:ubyte)) goto B_d;
  writeByte(a, 40);
  (f + 28)[0]:int = Type(b, c, d);
  writeString(a, 69127, 1);
  writeString(a, 74085, 2);
  if (h) goto B_c;
  writeString(a, 74087, 3);
  goto B_b;
  label B_g:
  if (eqz(a)) goto B_f;
  fmt0x64(a, i64_extend_i32_u(h), (a + 40)[0]:ubyte ^ 1);
  goto B_a;
  label B_f:
  runtime_nilPanic();
  unreachable;
  label B_e:
  fmtInteger_1(a, i64_extend_i32_u(h), 0, e);
  goto B_a;
  label B_d:
  if (eqz(h)) goto B_m;
  fmt0x64(a, i64_extend_i32_u(h), (a + 40)[0]:ubyte ^ 1);
  goto B_a;
  label B_m:
  padString(a + 32, 74206, 5);
  goto B_a;
  label B_c:
  fmt0x64(a, i64_extend_i32_u(h), 1);
  label B_b:
  writeByte(a, 41);
  label B_a:
  0[19911]:int = g;
  g_a = f + 32;
}

function fmtString(a:int, b:int, c:int, d:int) {
  br_table[B_b, B_g, B_e, B_g, B_g, B_f, B_g, B_d, ..B_h](d + -113)
  label B_h:
  if (d == 88) goto B_c;
  label B_g:
  badVerb(a, d);
  return ;
  label B_f:
  if (eqz(a)) goto B_a;
  d = a + 32;
  if (eqz((a + 44)[0]:ubyte)) goto B_i;
  fmtQ(d, b, c);
  return ;
  label B_i:
  fmtS(d, b, c);
  return ;
  label B_e:
  if (eqz(a)) goto B_a;
  fmtS(a + 32, b, c);
  return ;
  label B_d:
  if (eqz(a)) goto B_a;
  fmtSx(a + 32, b, c, 74168);
  return ;
  label B_c:
  if (eqz(a)) goto B_a;
  fmtSx(a + 32, b, c, 74142);
  return ;
  label B_b:
  if (eqz(a)) goto B_a;
  fmtQ(a + 32, b, c);
  return ;
  label B_a:
  runtime_nilPanic();
  unreachable;
}

function fmtS(a:int, b:int, c:int) {
  var d:int = g_a - 32;
  g_a = d;
  d[5]:long@4 = 1L;
  var e:int = 0[19911]:int;
  0[19911]:int = d + 16;
  d[4]:int = e;
  truncateString(d + 8, a, b, c);
  d[6]:int = (b = d[2]:int);
  padString(a, b, d[3]:int);
  0[19911]:int = e;
  g_a = d + 32;
}

function fmtSx(a:int, b:int, c:int, d:int) {
  fmtSbx(a, b, c, 0, 0, d)
}

function handleMethods(a:int, b:int):int {
  var f:int;
  var f:int;
  var f:int;
  var h:int;
  var f:int;
  var g:int;
  var g:int;
  var f:int;
  var g:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var f:int;
  var g:int;
  var c:int = g_a - 224;
  g_a = c;
  var d:int = 0;
  c[55]:int = 0;
  c[53]:long@4 = 0L;
  c[51]:long@4 = 0L;
  c[49]:long@4 = 0L;
  c[47]:long@4 = 0L;
  c[45]:long@4 = 0L;
  c[43]:int = 12;
  c[103]:byte = 0;
  var e:int = 0[19911]:int;
  0[19911]:int = c + 168;
  c[42]:int = e;
  c[44]:int = c + 103;
  if (eqz(a)) goto B_a;
  if (a[127]:ubyte) goto B_b;
  if (b != 119) goto B_c;
  (c + 204)[0]:int = (f = (a + 16)[0]:int);
  g = a[3]:int;
  b = error_typeassert(g) & 1;
  if (eqz(b)) goto B_d;
  if (eqz(a[128]:ubyte)) goto B_d;
  (c + 208)[0]:int = (a + 136)[0]:int;
  if (a[33]:int) goto B_d;
  a[33]:int = select_if(g, 0, b);
  a[34]:int = select_if(f, 0, b);
  b = 118;
  goto B_c;
  label B_d:
  a[33]:long@4 = 0L;
  a[128]:byte = 0;
  badVerb(a, 119);
  0[19911]:int = e;
  g_a = c + 224;
  return 1;
  label B_c:
  (c + 168 + 44)[0]:int = (a + 16)[0]:int;
  if (eqz((a + 44)[0]:ubyte)) goto B_e;
  (c + 216)[0]:int = a[4]:int;
  goto B_b;
  label B_e:
  f = b + -113;
  if (f > 7) goto B_g;
  if (1 << f & 165) goto B_f;
  label B_g:
  if (b != 88) goto B_b;
  label B_f:
  (c + 220)[0]:int = (h = a[4]:int);
  d = 0;
  f = a[3]:int;
  g = error_typeassert(f) & 1;
  if (eqz(g)) goto B_i;
  (c + 180)[0]:int = (d = a[4]:int);
  (c + 132)[0]:int = 5;
  (c + 104 + 16)[0]:int = d;
  c[103]:byte = 1;
  c[32]:int = 74073;
  c[31]:int = b;
  c[28]:int = a;
  c[13]:long = 0L;
  (c + 168 + 16)[0]:int = c + 104;
  c[29]:int = a[3]:int;
  Error(c + 8, select_if(h, 0, g), select_if(f, 0, g));
  (c + 188)[0]:int = (d = c[2]:int);
  fmtString(a, d, c[3]:int, b);
  a = c + 104;
  loop L_j {
    if (eqz(a)) goto B_h;
    a = a[1]:int;
    catchPanic();
    continue L_j;
  }
  label B_i:
  if (f > 4068) goto B_l;
  if (f > 259) goto B_m;
  if (f == 88) goto B_k;
  if (f == 127) goto B_k;
  if (f != 223) goto B_b;
  goto B_k;
  label B_m:
  if (f == 260) goto B_k;
  if (f == 479) goto B_k;
  if (f != 2821) goto B_b;
  goto B_k;
  label B_l:
  if (f > 8324) goto B_n;
  if (f == 4069) goto B_k;
  if (f == 5231) goto B_k;
  if (f != 7141) goto B_b;
  goto B_k;
  label B_n:
  if (f == 8325) goto B_k;
  if (f == 167397) goto B_k;
  if (f != 15333) goto B_b;
  label B_k:
  (c + 136 + 28)[0]:int = 6;
  c[36]:int = a;
  (c + 192)[0]:int = (d = a[4]:int);
  (c + 152)[0]:int = d;
  g = 1;
  c[103]:byte = 1;
  c[40]:int = 74078;
  c[39]:int = b;
  c[17]:long = 0L;
  (c + 168 + 28)[0]:int = c + 136;
  c[37]:int = a[3]:int;
  if (f > 4068) goto B_t;
  d = 69127;
  if (f > 259) goto B_u;
  if (f == 88) goto B_o;
  if (f == 127) goto B_q;
  if (f != 223) goto B_a;
  String_invoke_1(c + 64, h);
  g = c[17]:int;
  d = c[16]:int;
  goto B_o;
  label B_u:
  if (f == 260) goto B_s;
  if (f == 479) goto B_r;
  if (f != 2821) goto B_a;
  String(h);
  goto B_o;
  label B_t:
  if (f > 8324) goto B_w;
  if (f == 4069) goto B_v;
  if (f == 5231) goto B_p;
  if (f != 7141) goto B_a;
  String_3(c + 32, h);
  g = c[9]:int;
  d = c[8]:int;
  goto B_o;
  label B_w:
  if (f == 8325) goto B_y;
  if (f == 15333) goto B_x;
  if (f != 167397) goto B_a;
  String_4(c + 24, h);
  g = c[7]:int;
  d = c[6]:int;
  goto B_o;
  label B_y:
  String_5(c + 40, h);
  g = c[11]:int;
  d = c[10]:int;
  goto B_o;
  label B_x:
  String_6(c + 48, h);
  g = c[13]:int;
  d = c[12]:int;
  goto B_o;
  label B_v:
  String_2(c + 56, h);
  g = c[15]:int;
  d = c[14]:int;
  goto B_o;
  label B_s:
  String_7(c + 72, h);
  g = c[19]:int;
  d = c[18]:int;
  goto B_o;
  label B_r:
  String_invoke_3(c + 80, h);
  g = c[21]:int;
  d = c[20]:int;
  goto B_o;
  label B_q:
  String_invoke(c + 88, h);
  g = c[23]:int;
  d = c[22]:int;
  goto B_o;
  label B_p:
  String_invoke_4(c + 16, h);
  g = c[5]:int;
  d = c[4]:int;
  label B_o:
  (c + 200)[0]:int = d;
  fmtString(a, d, g, b);
  a = c + 136;
  loop L_z {
    if (eqz(a)) goto B_h;
    a = a[1]:int;
    catchPanic();
    continue L_z;
  }
  label B_h:
  d = 1;
  label B_b:
  0[19911]:int = e;
  g_a = c + 224;
  return d;
  label B_a:
  runtime_nilPanic();
  return unreachable;
}

function writePadding(a:int_ptr, b:{ a:int, b:int, c:int }) {
  var e:int;
  var f:int;
  var i:int;
  var j:int;
  var f:int;
  var g:int;
  var h:int;
  var h:int;
  var i:int;
  var f:int;
  var g:int;
  var e:int;
  var j:int;
  var e:int;
  var f:int;
  var i:int;
  var h:int;
  var c:int = g_a - 48;
  g_a = c;
  c[9]:long@4 = 0L;
  c[7]:long@4 = 0L;
  c[5]:long@4 = 0L;
  c[3]:long@4 = 7L;
  var d:int = 0[19911]:int;
  0[19911]:int = c + 8;
  c[2]:int = d;
  if (b <= 0) goto B_d;
  if (eqz(a)) goto B_a;
  (c + 20)[0]:int = (e = a[0]);
  if (eqz(e)) goto B_a;
  (c + 24)[0]:int = (f = e[0]:int);
  g = e[1]:int;
  h = g + b;
  if (h <= (i = e[2]:int)) goto B_c;
  i = (i << 1) + b;
  if (i < 0) goto B_b;
  (c + 28)[0]:int = (f = runtime_alloc(i));
  (c + 32)[0]:int = (e = a[0]);
  if (eqz(e)) goto B_a;
  (c + 36)[0]:int = (j = e[0]:int);
  memmove(f, j, select_if(i, e = e[1]:int, e > i));
  goto B_c;
  label B_d:
  0[19911]:int = d;
  g_a = c + 48;
  return ;
  label B_c:
  (c + 16)[0]:int = f;
  if (g > h) goto B_b;
  if (h > i) goto B_b;
  j = select_if(48, 32, (a + 10)[0]:ubyte);
  e = f + g;
  loop L_f {
    if (eqz(b)) goto B_e;
    if (b) goto B_g;
    runtime_lookupPanic();
    unreachable;
    label B_g:
    e[0]:byte = j;
    e = e + 1;
    b = b + -1;
    continue L_f;
  }
  label B_e:
  (c + 40)[0]:int = (b = a[0]);
  if (eqz(b)) goto B_a;
  b.a = f;
  b.c = i;
  b.b = h;
  0[19911]:int = d;
  g_a = c + 48;
  return ;
  label B_b:
  runtime_slicePanic();
  unreachable;
  label B_a:
  runtime_nilPanic();
  unreachable;
}

function truncateString(a:{ a:int, b:int }, b:int_ptr, c:int, d:int) {
  var f:int;
  var f:int;
  var g:int;
  var f:int;
  var i:int;
  var i:int;
  if (b) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  if (eqz((b + 5)[0]:ubyte)) goto B_c;
  var e:int = b[5];
  b = 0;
  loop L_d {
    if (b < d) goto B_f;
    f = b;
    g = 0;
    b = 0;
    goto B_e;
    label B_f:
    g = 1;
    f = 1;
    var h:byte_ptr = c + b;
    i = h[0];
    if (i > -1) goto B_g;
    var j:int = d - b;
    if ((i & -32) != -64) goto B_h;
    f = 1;
    if (j < 2) goto B_g;
    f = 
      select_if(select_if(1, 2, ((h + 1)[0]:ubyte & 192) != 128), 1, i & 30);
    goto B_g;
    label B_h:
    if ((i & -16) != -32) goto B_i;
    f = 1;
    if (j < 3) goto B_g;
    f = 1;
    j = (h + 1)[0]:ubyte;
    if ((j & 192) != 128) goto B_g;
    if (((h + 2)[0]:ubyte & 192) != 128) goto B_g;
    f = 
      select_if(
        1,
        select_if(1, 3, ((f = (j & 63) << 6 | (i & 15) << 12) & 63488) == 55296),
        f < 2048);
    goto B_g;
    label B_i:
    f = 1;
    if (j < 4) goto B_g;
    f = 1;
    if ((i & 248) != 240) goto B_g;
    f = 1;
    j = (h + 1)[0]:ubyte;
    if ((j & 192) != 128) goto B_g;
    var k:int = (h + 2)[0]:ubyte;
    if ((k & 192) != 128) goto B_g;
    h = (h + 3)[0]:ubyte;
    if ((h & 192) != 128) goto B_g;
    f = 
      select_if(
        4,
        1,
        ((((j & 63) << 12 | (i & 7) << 18) | (k & 63) << 6) | (h & 63)) + 
        -65536 < 
        1048576);
    label B_g:
    f = f + b;
    label B_e:
    i = b;
    if (eqz(g & 1)) goto B_c;
    b = f;
    e = e + -1;
    if (e > -1) continue L_d;
  }
  if (i <= d) goto B_b;
  runtime_slicePanic();
  unreachable;
  label B_c:
  a.b = d;
  a.a = c;
  return ;
  label B_b:
  a.b = i;
  a.a = c;
}

function fmtSbx(a:int, b:int, c:int, d:int, e:int, f:ubyte_ptr) {
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var j:int;
  var l:int;
  var j:int;
  var l:int;
  var k:{ a:int, b:int, c:int }
  var k:{ a:int, b:int, c:int }
  var k:{ a:int, b:int, c:int }
  var k:{ a:int, b:int, c:int }
  var j:int;
  var k:{ a:int, b:int, c:int }
  var j:int;
  var j:int;
  var j:int;
  var k:{ a:int, b:int, c:int }
  var j:int;
  var k:{ a:int, b:int, c:int }
  var j:int;
  var k:{ a:int, b:int, c:int }
  var l:int;
  var l:int;
  var j:int;
  var s:int;
  var s:int;
  var j:int;
  var k:{ a:int, b:int, c:int }
  var g:int = g_a - 144;
  g_a = g;
  g[10]:long = 60129542144L;
  g[17]:long = 0L;
  g[16]:long = 0L;
  g[15]:long = 0L;
  g[14]:long = 0L;
  g[13]:long = 0L;
  g[12]:long = 0L;
  g[11]:long = 0L;
  var h:int = 0[19911]:int;
  0[19911]:int = g + 80;
  g[20]:int = h;
  if (eqz(a)) goto B_a;
  var i:{ a:int, b:int, c:int } = select_if(e, c, d);
  if (eqz((a + 5)[0]:ubyte)) goto B_b;
  j = a[5]:int;
  i = select_if(j, i, j < i);
  label B_b:
  j = i << 1;
  if (j <= 0) goto B_e;
  k = (a + 8)[0]:ubyte;
  if (eqz((a + 9)[0]:ubyte)) goto B_f;
  l = i + select_if(i << 2, j, k & 1) + -1;
  goto B_d;
  label B_f:
  l = select_if(j + 2, j, k & 1);
  goto B_d;
  label B_e:
  if (eqz(a[4]:ubyte)) goto B_c;
  writePadding(a, a[4]:int);
  goto B_c;
  label B_d:
  if (eqz(a[4]:ubyte)) goto B_g;
  j = a[4]:int;
  if (j <= l) goto B_g;
  if ((a + 6)[0]:ubyte) goto B_g;
  writePadding(a, j - l);
  label B_g:
  (g + 116)[0]:int = (k = a[0]:int);
  if (eqz(k)) goto B_a;
  (g + 120)[0]:int = (j = k.a);
  var m:int = k.c;
  k = k.b;
  if (eqz(a[8]:ubyte)) goto B_h;
  g[18]:int = 0;
  g[73]:byte = f[16];
  (g + 124)[0]:int = g + 72;
  g[72]:byte = 48;
  runtime_sliceAppend(g + 48, j, g + 72, k, m, 2);
  (g + 80 + 48)[0]:int = (j = g[12]:int);
  m = g[14]:int;
  k = g[13]:int;
  label B_h:
  (g + 88)[0]:int = j;
  (g + 132)[0]:int = g + 68;
  (g + 96)[0]:int = g + 76;
  (g + 108)[0]:int = g + 64;
  var n:int = select_if(i, 0, i > 0);
  var o:int_ptr = g + 92;
  var p:int_ptr = g + 100;
  var q:int_ptr = g + 136;
  var r:int_ptr = g + 104;
  i = 0;
  loop L_i {
    o[0] = j;
    if (n == i) goto B_k;
    if (eqz(i)) goto B_j;
    if (eqz(a[9]:ubyte & 1)) goto B_j;
    g[19]:int = 0;
    g[76]:byte = 32;
    runtime_sliceAppend(g + 32, j, g + 76, k, m, 1);
    p[0] = (j = g[8]:int);
    m = g[10]:int;
    k = g[9]:int;
    if (eqz(a[8]:ubyte)) goto B_j;
    g[17]:int = 0;
    g[69]:byte = f[16];
    g[68]:byte = 48;
    runtime_sliceAppend(g + 16, j, g + 68, k, m, 2);
    q[0] = (j = g[4]:int);
    m = g[6]:int;
    k = g[5]:int;
    goto B_j;
    label B_k:
    (g + 140)[0]:int = (i = a[0]:int);
    if (eqz(i)) goto B_a;
    i.a = j;
    i.b = k;
    i.c = m;
    if (eqz(a[4]:ubyte)) goto B_c;
    i = a[4]:int;
    if (i <= l) goto B_c;
    if (eqz((a + 6)[0]:ubyte)) goto B_c;
    writePadding(a, i - l);
    goto B_c;
    label B_j:
    r[0] = j;
    if (eqz(d)) goto B_n;
    s = d;
    if (i >= e) goto B_m;
    goto B_l;
    label B_n:
    s = b;
    if (i < c) goto B_l;
    label B_m:
    runtime_lookupPanic();
    unreachable;
    label B_l:
    g[16]:int = 0;
    g[65]:byte = (f + ((s = (s + i)[0]:ubyte) & 15))[0]:ubyte;
    g[64]:byte = (f + (s >> 4))[0]:ubyte;
    runtime_sliceAppend(g, j, g + 64, k, m, 2);
    (g + 80 + 32)[0]:int = (j = g[0]:int);
    i = i + 1;
    m = g[2]:int;
    k = g[1]:int;
    continue L_i;
  }
  label B_c:
  0[19911]:int = h;
  g_a = g + 144;
  return ;
  label B_a:
  runtime_nilPanic();
  unreachable;
}

function write(a:int, b:int, c:int) {
  var f:int;
  var d:int = g_a - 32;
  g_a = d;
  d[7]:int = 0;
  d[5]:long@4 = 2L;
  var e:int = 0[19911]:int;
  0[19911]:int = d + 16;
  d[4]:int = e;
  if (a) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  (d + 24)[0]:int = (f = a[0]:int);
  runtime_sliceAppend(d, f, b, a[1]:int, a[2]:int, c);
  0[19911]:int = e;
  var g:long = d[1]:long@4;
  a[0]:int = (e = d[0]:int);
  (d + 28)[0]:int = e;
  a[1]:long@4 = g;
  g_a = d + 32;
}

function clearflags(a:long_ptr@1) {
  var b:long_ptr = g_a - 16;
  g_a = b;
  if (a) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  a[4] = 0L;
  (b + 8)[0]:byte = 0;
  (a + 12)[0]:byte = 0;
  b[0] = 0L;
  g_a = b + 16;
}

function fmt_parsenum(a:{ a:int, b:byte, c:int }, b:int, c:int, d:int, e:int) {
  var h:int;
  if (d >= e) goto B_a;
  var f:int = select_if(d, c, d > c);
  c = 0;
  var g:int = 0;
  loop L_b {
    if (e == d) goto B_d;
    if (f != d) goto B_e;
    runtime_lookupPanic();
    unreachable;
    label B_e:
    h = (b + d)[0]:ubyte + -48 & 255;
    if (h < 10) goto B_c;
    e = d;
    label B_d:
    a.c = e;
    a.a = c;
    a.b = g & 1;
    return ;
    label B_c:
    if (c + 1000000 >= 2000001) goto B_f;
    c = c * 10 + h;
    g = 1;
    d = d + 1;
    continue L_b;
    label B_f:
  }
  a.c = e;
  a.b = 0;
  a.a = 0;
  return ;
  label B_a:
  a.c = e;
  a.b = 0;
  a.a = 0;
}

export function Random256(a:long_ptr@1) {
  var d:long_ptr@1;
  var e:int;
  var b:int = g_a - 16;
  g_a = b;
  b[3]:int = 0;
  b[1]:long@4 = 2L;
  var c:int = 0[19911]:int;
  0[19911]:int = b;
  b[0]:int = c;
  b[2]:int = (d = runtime_alloc(32));
  b[3]:int = (e = github_com_olegabu_go_secp256k1_zkp_cBuf(d));
  random_scalar_order256(e);
  0[19911]:int = c;
  var f:long = d[0];
  var g:long = d[8];
  var h:long = d[16];
  a[24] = d[24];
  a[16] = h;
  a[8] = g;
  a[0] = f;
  g_a = b + 16;
}

function github_com_olegabu_go_secp256k1_zkp_cBuf(a:int):int {
  if (a) goto B_a;
  return 0;
  label B_a:
  return a;
}

export function SharedContext(a:int):int {
  var d:int;
  var d:int;
  var e:int;
  var d:int;
  var d:int;
  var f:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var d:int;
  var b:int = g_a - 64;
  g_a = b;
  b[15]:int = 0;
  b[13]:long@4 = 0L;
  b[11]:long@4 = 0L;
  b[9]:long@4 = 0L;
  b[7]:long@4 = 0L;
  b[5]:long@4 = 10L;
  var c:int = 0[19911]:int;
  0[19911]:int = b + 16;
  b[4]:int = c;
  if (0[79756]:ubyte) goto B_a;
  0[79756]:byte = 1;
  0[19940]:int = (d = runtime_hashmapMake(4));
  (b + 36)[0]:int = d;
  0[19941]:int = (d = runtime_hashmapMake(12));
  (b + 40)[0]:int = d;
  label B_a:
  (b + 24)[0]:int = (d = 0[19940]:int);
  b[0]:int = (a = a & 769);
  if (eqz(runtime_hashmapBinaryGet(d, b, b + 12, 4) & 1)) goto B_c;
  d = b[3]:int;
  goto B_b;
  label B_c:
  d = secp256k1_context_preallocated_size(a);
  (b + 32)[0]:int = (e = 0[19941]:int);
  if (d < 0) goto B_d;
  (b + 44)[0]:int = (f = runtime_alloc(d));
  b[2]:int = d;
  b[1]:int = d;
  b[0]:int = f;
  b[3]:int = a;
  runtime_hashmapBinarySet(e, b + 12, b);
  (b + 48)[0]:int = (d = 0[19941]:int);
  b[3]:int = a;
  runtime_hashmapBinaryGet(d, b + 12, b, 12);
  (b + 52)[0]:int = (d = b[0]:int);
  if (b[1]:int) goto B_e;
  runtime_lookupPanic();
  unreachable;
  label B_e:
  (b + 56)[0]:int = (d = ContextPreallocatedCreate(d, a));
  (b + 60)[0]:int = (e = 0[19940]:int);
  b[3]:int = d;
  b[0]:int = a;
  runtime_hashmapBinarySet(e, b, b + 12);
  goto B_b;
  label B_d:
  runtime_slicePanic();
  unreachable;
  label B_b:
  0[19911]:int = c;
  (b + 28)[0]:int = d;
  g_a = b + 64;
  return d;
}

export function ContextPreallocatedCreate(a:int, b:int):int {
  var e:int_ptr;
  var c:int = g_a - 16;
  g_a = c;
  c[3]:int = 0;
  c[1]:long@4 = 2L;
  var d:int = 0[19911]:int;
  0[19911]:int = c;
  c[0]:int = d;
  c[2]:int = (e = runtime_alloc(4));
  e[0] = (a = secp256k1_context_preallocated_create(a, b));
  0[19911]:int = d;
  c[3]:int = a;
  g_a = c + 16;
  return e;
}

export function ContextPreallocatedSize(a:int):int {
  return secp256k1_context_preallocated_size(a)
}

export function ContextCreate(a:int, b:int) {
  var e:int_ptr;
  var c:int = g_a - 16;
  g_a = c;
  c[3]:int = 0;
  c[1]:long@4 = 2L;
  var d:int = 0[19911]:int;
  0[19911]:int = c;
  c[0]:int = d;
  c[2]:int = (e = runtime_alloc(4));
  e[0] = (b = secp256k1_context_create(b));
  0[19911]:int = d;
  c[3]:int = b;
  a[1]:long@4 = 0L;
  a[0]:int = e;
  g_a = c + 16;
}

export function ContextClone(a:int, b:int_ptr) {
  var e:int_ptr;
  var c:int = g_a - 32;
  g_a = c;
  c[5]:long@4 = 0L;
  c[3]:long@4 = 3L;
  var d:int = 0[19911]:int;
  0[19911]:int = c + 8;
  c[2]:int = d;
  c[4]:int = (e = runtime_alloc(4));
  if (b) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  (c + 20)[0]:int = (b = b[0]);
  e[0] = (b = secp256k1_context_clone(b));
  (c + 24)[0]:int = b;
  0[19911]:int = d;
  a[1]:long@4 = 0L;
  a[0]:int = e;
  g_a = c + 32;
}

export function ContextDestroy(a:int_ptr) {
  if (a) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  secp256k1_context_destroy(a[0]);
}

export function ContextRandomize(a:int_ptr, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int, j:int, k:int, l:int, m:int, n:int, o:int, p:int, q:int, r:int, s:int, t:int, u:int, v:int, w:int, x:int, y:int, z:int, aa:int, ba:int, ca:int, da:int, ea:int, fa:int, ga:int):int {
  var ha:int = g_a - 32;
  g_a = ha;
  ha[5]:long@4 = 0L;
  ha[3]:long@4 = 3L;
  var ia:int = 0[19911]:int;
  0[19911]:int = ha + 8;
  ha[2]:int = ia;
  var ja:{ a:byte, b:byte, c:byte, d:byte, e:byte, f:byte, g:byte, h:byte, i:byte, j:byte, k:byte, l:byte, m:byte, n:byte, o:byte, p:byte, q:byte, r:byte, s:byte, t:byte, u:byte, v:byte, w:byte, x:byte, y:byte, z:byte, aa:byte, ba:byte, ca:byte, da:byte, ea:byte, fa:byte } = 
    runtime_alloc(32);
  ja.fa = ga;
  ja.ea = fa;
  ja.da = ea;
  ja.ca = da;
  ja.ba = ca;
  ja.aa = ba;
  ja.z = aa;
  ja.y = z;
  ja.x = y;
  ja.w = x;
  ja.v = w;
  ja.u = v;
  ja.t = u;
  ja.s = t;
  ja.r = s;
  ja.q = r;
  ja.p = q;
  ja.o = p;
  ja.n = o;
  ja.m = n;
  ja.l = m;
  ja.k = l;
  ja.j = k;
  ja.i = j;
  ja.h = i;
  ja.g = h;
  ja.f = g;
  ja.e = f;
  ja.d = e;
  ja.c = d;
  ja.b = c;
  ja.a = b;
  ha[4]:int = ja;
  if (a) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  (ha + 20)[0]:int = (a = a[0]);
  (ha + 24)[0]:int = 
    (ja = github_com_olegabu_go_secp256k1_zkp_cBuf(ja));
  ja = secp256k1_context_randomize(a, ja);
  0[19911]:int = ia;
  g_a = ha + 32;
  return ja;
}

export function ContextPreallocatedDestroy(a:int_ptr) {
  if (a) goto B_a;
  runtime_nilPanic();
  unreachable;
  label B_a:
  secp256k1_context_preallocated_destroy(a[0]);
}

export function TestRand256() {
  var nb:int;
  var a:int = g_a - 336;
  g_a = a;
  a[29]:long = 98784247808L;
  a[30]:long = 0L;
  a[82]:int = 0;
  a[40]:long = 0L;
  a[39]:long = 0L;
  a[38]:long = 0L;
  a[37]:long = 0L;
  a[36]:long = 0L;
  a[35]:long = 0L;
  a[34]:long = 0L;
  a[33]:long = 0L;
  a[32]:long = 0L;
  a[31]:long = 0L;
  var b:int = 0[19911]:int;
  0[19911]:int = a + 232;
  a[58]:int = b;
  a[60]:int = a + 136;
  memset(a + 136, 0, 64);
  Random256(a + 104);
  var c:{ a:int, b:int } = a[104]:ubyte;
  var d:int = a[105]:ubyte;
  var e:{ a:int, b:int } = a[106]:ubyte;
  var f:int = a[107]:ubyte;
  var g:int = a[108]:ubyte;
  var h:int = a[109]:ubyte;
  var i:int_ptr = a[110]:ubyte;
  var j:int_ptr = a[111]:ubyte;
  var k:int = a[112]:ubyte;
  var l:int = a[113]:ubyte;
  var m:int = a[114]:ubyte;
  var n:int = a[115]:ubyte;
  var o:int = a[116]:ubyte;
  var p:int = a[117]:ubyte;
  var q:int = a[118]:ubyte;
  var r:int = a[119]:ubyte;
  var s:int = a[120]:ubyte;
  var t:int = a[121]:ubyte;
  var u:int = a[122]:ubyte;
  var v:int = a[123]:ubyte;
  var w:int = a[124]:ubyte;
  var x:int = a[125]:ubyte;
  var y:int = a[126]:ubyte;
  var z:int = a[127]:ubyte;
  var aa:int = a[128]:ubyte;
  var ba:int = a[129]:ubyte;
  var ca:int = a[130]:ubyte;
  var da:int = a[131]:ubyte;
  var ea:int = a[132]:ubyte;
  var fa:int = a[133]:ubyte;
  var ga:int = a[134]:ubyte;
  var ha:int = a[135]:ubyte;
  Random256(a + 72);
  var ia:int = a[72]:ubyte;
  var ja:int = a[73]:ubyte;
  var ka:int = a[74]:ubyte;
  var la:int = a[75]:ubyte;
  var ma:int = a[76]:ubyte;
  var na:int = a[77]:ubyte;
  var oa:int = a[78]:ubyte;
  var pa:int = a[79]:ubyte;
  var qa:int = a[80]:ubyte;
  var ra:int = a[81]:ubyte;
  var sa:int = a[82]:ubyte;
  var ta:int = a[83]:ubyte;
  var ua:int = a[84]:ubyte;
  var va:int = a[85]:ubyte;
  var wa:int = a[86]:ubyte;
  var xa:int = a[87]:ubyte;
  var ya:int = a[88]:ubyte;
  var za:int = a[89]:ubyte;
  var ab:int = a[90]:ubyte;
  var bb:int = a[91]:ubyte;
  var cb:int = a[92]:ubyte;
  var db:int = a[93]:ubyte;
  var eb:int = a[94]:ubyte;
  var fb:int = a[95]:ubyte;
  var gb:int = a[96]:ubyte;
  var hb:int = a[97]:ubyte;
  var ib:int = a[98]:ubyte;
  var jb:int = a[99]:ubyte;
  var kb:int = a[100]:ubyte;
  var lb:int = a[101]:ubyte;
  var mb:int = a[102]:ubyte;
  (a + 199)[0]:byte = (nb = a[103]:ubyte);
  (a + 198)[0]:byte = mb;
  (a + 197)[0]:byte = lb;
  (a + 196)[0]:byte = kb;
  (a + 195)[0]:byte = jb;
  (a + 194)[0]:byte = ib;
  (a + 193)[0]:byte = hb;
  (a + 136 + 56)[0]:byte = gb;
  (a + 191)[0]:byte = fb;
  (a + 190)[0]:byte = eb;
  (a + 189)[0]:byte = db;
  (a + 136 + 52)[0]:byte = cb;
  (a + 187)[0]:byte = bb;
  (a + 186)[0]:byte = ab;
  (a + 185)[0]:byte = za;
  (a + 184)[0]:byte = ya;
  (a + 183)[0]:byte = xa;
  (a + 182)[0]:byte = wa;
  (a + 181)[0]:byte = va;
  (a + 180)[0]:byte = ua;
  (a + 179)[0]:byte = ta;
  (a + 178)[0]:byte = sa;
  (a + 177)[0]:byte = ra;
  (a + 176)[0]:byte = qa;
  (a + 175)[0]:byte = pa;
  (a + 174)[0]:byte = oa;
  (a + 136 + 37)[0]:byte = na;
  (a + 172)[0]:byte = ma;
  (a + 171)[0]:byte = la;
  (a + 170)[0]:byte = ka;
  (a + 136 + 33)[0]:byte = ja;
  a[168]:byte = ia;
  a[167]:byte = ha;
  a[166]:byte = ga;
  a[165]:byte = fa;
  a[164]:byte = ea;
  a[163]:byte = da;
  a[162]:byte = ca;
  a[161]:byte = ba;
  a[160]:byte = aa;
  a[159]:byte = z;
  a[158]:byte = y;
  a[157]:byte = x;
  a[156]:byte = w;
  a[155]:byte = v;
  a[154]:byte = u;
  a[153]:byte = t;
  a[152]:byte = s;
  a[151]:byte = r;
  a[150]:byte = q;
  a[149]:byte = p;
  a[148]:byte = o;
  a[147]:byte = n;
  a[146]:byte = m;
  a[145]:byte = l;
  a[144]:byte = k;
  a[143]:byte = j;
  a[142]:byte = i;
  a[141]:byte = h;
  a[140]:byte = g;
  a[139]:byte = f;
  a[138]:byte = e;
  a[137]:byte = d;
  a[136]:byte = c;
  a[25]:long = 0L;
  a[26]:long = 0L;
  a[61]:int = a + 200;
  var ob:{ a:byte, b:byte, c:byte, d:byte, e:byte, f:byte, g:byte, h:byte, i:byte, j:byte, k:byte, l:byte, m:byte, n:byte, o:byte, p:byte, q:byte, r:byte, s:byte, t:byte, u:byte, v:byte, w:byte, x:byte, y:byte, z:byte, aa:byte, ba:byte, ca:byte, da:byte, ea:byte, fa:byte } = 
    runtime_alloc(32);
  ob.fa = ha;
  ob.ea = ga;
  ob.da = fa;
  ob.ca = ea;
  ob.ba = da;
  ob.aa = ca;
  ob.z = ba;
  ob.y = aa;
  ob.x = z;
  ob.w = y;
  ob.v = x;
  ob.u = w;
  ob.t = v;
  ob.s = u;
  ob.r = t;
  ob.q = s;
  ob.p = r;
  ob.o = q;
  ob.n = p;
  ob.m = o;
  ob.l = n;
  ob.k = m;
  ob.j = l;
  ob.i = k;
  ob.h = j;
  ob.g = i;
  ob.f = h;
  ob.e = g;
  ob.d = f;
  ob.c = e;
  ob.b = d;
  ob.a = c;
  a[62]:int = ob;
  a[63]:int = ob;
  a[51]:int = ob;
  a[50]:int = 169;
  ob = runtime_alloc(32);
  ob.fa = nb;
  ob.ea = mb;
  ob.da = lb;
  ob.ca = kb;
  ob.ba = jb;
  ob.aa = ib;
  ob.z = hb;
  ob.y = gb;
  ob.x = fb;
  ob.w = eb;
  ob.v = db;
  ob.u = cb;
  ob.t = bb;
  ob.s = ab;
  ob.r = za;
  ob.q = ya;
  ob.p = xa;
  ob.o = wa;
  ob.n = va;
  ob.m = ua;
  ob.l = ta;
  ob.k = sa;
  ob.j = ra;
  ob.i = qa;
  ob.h = pa;
  ob.g = oa;
  ob.f = na;
  ob.e = ma;
  ob.d = la;
  ob.c = ka;
  ob.b = ja;
  ob.a = ia;
  a[64]:int = ob;
  a[65]:int = ob;
  a[53]:int = ob;
  a[52]:int = 169;
  d = runtime_alloc(140);
  d[128]:byte = 0;
  d[126]:short@1 = 0;
  a[70]:int = d;
  a[80]:int = d;
  a[69]:int = d;
  a[68]:int = d;
  a[67]:int = d;
  a[66]:int = d;
  d[8]:int = d;
  j = d + 32;
  clearflags(j);
  d[124]:byte = 0;
  i = 0;
  g = 0;
  loop L_b {
    if (g >= 32) goto B_g;
    d[125]:byte = 1;
    ob = g + 2;
    h = g - select_if(g, 32, g > 32);
    c = 0;
    f = g;
    loop L_i {
      e = g + c;
      if (e == 32) goto B_h;
      if (eqz(h + c)) goto B_a;
      if ((e & -17) == 13) goto B_h;
      f = f + 1;
      ob = ob + 1;
      c = c + 1;
      continue L_i;
    }
    label B_h:
    if (e <= g) goto B_j;
    if (e < g) goto B_f;
    if (e >= 33) goto B_f;
    writeString(d, g + 74223, c);
    label B_j:
    if (e > 31) goto B_g;
    clearflags(j);
    e = 0 - select_if(f, 31, f > 31);
    loop L_l {
      if (ob == 33) goto B_k;
      if (e + ob == 2) goto B_a;
      c = (ob + 74222)[0]:ubyte;
      br_table[B_q, B_m, B_p, B_m, B_m, B_r, ..B_s](c + -43);
      label B_s:
      br_table[B_o, B_m, B_m, B_t, ..B_m](c + -32)
      label B_t:
      d[40]:byte = 1;
      goto B_n;
      label B_r:
      d[42]:byte = (d[38]:ubyte ^ -1) & 1;
      goto B_n;
      label B_q:
      d[39]:byte = 1;
      goto B_n;
      label B_p:
      d[42]:byte = 0;
      d[38]:byte = 1;
      goto B_n;
      label B_o:
      d[41]:byte = 1;
      label B_n:
      ob = ob + 1;
      continue L_l;
      label B_m:
    }
    if (i > 1) goto B_k;
    if (eqz(1077821502 >> ob + -1 & 1)) goto B_k;
    if (i > 1) goto B_a;
    (a + 232 + 52)[0]:int = (f = (e = a + 200 + (i << 3)).b);
    printArg(d, e.a, f, c);
    i = i + 1;
    g = ob;
    continue L_b;
    label B_k:
    argNumber(a + 56, d, i, ob + -1);
    e = a[64]:ubyte;
    i = a[14]:int;
    ob = a[15]:int;
    if (ob > 31) goto B_u;
    if (ob > 31) goto B_a;
    label B_u:
    fmt_parsenum(a + 40, 74223, 32, ob, 32);
    ob = a[12]:int;
    c = a[44]:ubyte;
    d[12]:int = a[10]:int;
    d[36]:byte = c & 1;
    if ((e & c) & 1) goto B_w;
    if (ob < 32) goto B_x;
    if (ob + 1 < 32) goto B_a;
    label B_x:
    if (e & 1) goto B_v;
    argNumber(a + 24, d, i, ob);
    ob = a[7]:int;
    i = a[6]:int;
    goto B_v;
    label B_w:
    d[125]:byte = 0;
    if (ob < 32) goto B_v;
    if (ob + 1 < 32) goto B_a;
    label B_v:
    if (ob > 31) goto B_y;
    if (ob > 31) goto B_a;
    g = ob + 1;
    if ((ob & -17) != 13) goto B_z;
    writeByte(d, 37);
    continue L_b;
    label B_z:
    ob = (ob + 74223)[0]:ubyte;
    if (d[125]:ubyte) goto B_c;
    writeString(d, 74211, 2);
    writeRune(d, ob);
    writeString(d, 74213, 10);
    continue L_b;
    label B_y:
    writeString(d, 74185, 10);
    label B_g:
    if (i > 1) goto B_d;
    if (d[124]:ubyte & 1) goto B_d;
    clearflags(j);
    writeString(d, 74195, 9);
    if (i >= 3) goto B_f;
    ob = 0;
    g = 0 - select_if(c = 2 - i, 0, c > 0);
    h = i + -2;
    c = a + 200 + (i << 3);
    i = a + 292;
    j = a + 296;
    goto B_e;
    label B_f:
    runtime_slicePanic();
    unreachable;
    label B_e:
    loop L_ba {
      if (g == ob) goto B_aa;
      if (h == ob) goto B_a;
      e = c.a;
      i[0] = (f = (c + 4)[0]:int);
      if (eqz(ob)) goto B_ca;
      writeString(d, 74204, 2);
      label B_ca:
      if (e) goto B_ea;
      writeString(d, 74206, 5);
      goto B_da;
      label B_ea:
      j[0] = reflect_TypeOf(e, f);
      writeString(d, 69127, 1);
      writeByte(d, 61);
      printArg(d, e, f, 118);
      label B_da:
      c = c + 8;
      ob = ob + -1;
      continue L_ba;
    }
    label B_aa:
    writeByte(d, 41);
    label B_d:
    (a + 300)[0]:int = (ob = d[0]:int);
    Write_1(a + 8, 74896, ob, d[1]:int);
    (a + 328)[0]:int = (ob = a[4]:int);
    (a + 324)[0]:int = ob;
    (a + 304)[0]:int = ob;
    (a + 316)[0]:int = a + 216;
    (a + 308)[0]:int = d[0]:int;
    if (d[2]:int > 65536) goto B_fa;
    d[3]:long@4 = 0L;
    d[1]:int = 0;
    d[5]:long@4 = 0L;
    d[33]:long@4 = 0L;
    (a + 312)[0]:int = d[0]:int;
    (d + 28)[0]:int = 0;
    label B_fa:
    0[19911]:int = b;
    g_a = a + 336;
    return ;
    label B_c:
    if (i < 2) goto B_ga;
    writeString(d, 74211, 2);
    writeRune(d, ob);
    writeString(d, 74064, 9);
    continue L_b;
    label B_ga:
    if (i > 1) goto B_a;
    (a + 232 + 56)[0]:int = (e = (c = a + 200 + (i << 3)).b);
    printArg(d, c.a, e, ob);
    i = i + 1;
    continue L_b;
  }
  label B_a:
  runtime_lookupPanic();
  unreachable;
}

function LNoopCoro_ResumeDestroy(a:int) {
}

